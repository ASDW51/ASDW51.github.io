<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker的使用</title>
    <link href="/2022/06/29/docker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/29/docker%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h1><h2 id="dockerfile模板"><a href="#dockerfile模板" class="headerlink" title="dockerfile模板"></a>dockerfile模板</h2><h3 id="根据模板可构建镜像"><a href="#根据模板可构建镜像" class="headerlink" title="根据模板可构建镜像"></a>根据模板可构建镜像</h3><ul><li><p>常用</p><ul><li><p>FROM</p><ul><li><p>设置基于某某镜像</p></li><li><p>WORKDIR</p><ul><li>工作目录</li></ul></li><li><p>COPY</p><ul><li>拷贝文件</li></ul></li><li><p>CMD</p><ul><li>运行命令</li></ul></li></ul></li></ul></li></ul><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="镜像可保存"><a href="#镜像可保存" class="headerlink" title="镜像可保存"></a>镜像可保存</h3><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="容器运行镜像"><a href="#容器运行镜像" class="headerlink" title="容器运行镜像"></a>容器运行镜像</h3><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><ul><li><p>docker</p><ul><li><p>ps</p><ul><li><p>查看所有容器</p><ul><li><p>-a</p><ul><li>启动已停止的容器</li></ul></li><li><p>-l</p><ul><li>查看最后一次创建的容器</li></ul></li></ul></li></ul></li><li><p>run image</p><ul><li><p>启动容器运行镜像</p><ul><li><p>-t</p><ul><li>在新容器指定一个伪终端或终端</li></ul></li><li><p>-i</p><ul><li>允许对容器内进行输入</li></ul></li><li><p>-d</p><ul><li>后台运行，以进程模式启动</li></ul></li><li><p>-P</p><ul><li><p>映射端口到物理机上</p><ul><li>自动映射</li></ul></li></ul></li><li><p>-p</p><ul><li><p>映射端口到物理机上</p><ul><li><p>指定端口</p><ul><li>real port : docker port</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>start containerId</p><ul><li>启动一个已停止的容器</li></ul></li><li><p>stop containerId</p><ul><li>停止一个容器 </li></ul></li><li><p>restart containerId</p></li><li><p>attach containerId</p><ul><li><p>以后台模式运行的容器 执行某条命令</p><ul><li><p>例如 docker attach container Id /bin/bash</p><ul><li>退出bash 时容器会停止运行</li></ul></li></ul></li></ul></li><li><p>exec containerId</p><ul><li><p>以后台模式运行的容器 执行某条命令</p><ul><li><p>例如 docker exec container Id /bin/bash</p><ul><li>退出bash 时不会停止容器</li></ul></li></ul></li></ul></li><li><p>export containerId</p><ul><li>导出容器到本地文件</li></ul></li><li><p>import filePath</p><ul><li><p>导入容器 cat docker/ubutu.tar | docker import - test/ubuntu:v1</p><ul><li>v1 是tag内容</li></ul></li></ul></li><li><p>rm -f containerId</p><ul><li><p>删除容器</p><ul><li><p>删除所有停止的容器</p><ul><li>docker container prune</li></ul></li></ul></li></ul></li><li><p>logs</p><ul><li><p>查看容器内部日志</p></li><li><p>-f</p><ul><li>让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。</li></ul></li></ul></li><li><p>top container</p><ul><li>查看内部进程</li></ul></li></ul></li></ul><h3 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h3><ul><li><p>docker</p><ul><li><p>images</p><ul><li>查看所有镜像</li></ul></li><li><p>rmi</p><ul><li>删除镜像</li></ul></li><li><p>commit -m=”desc” -a=”runoob” container Id imagename</p><ul><li><p>更新镜像使用镜像创建容器进入容器终端修改再commit</p><ul><li><p>-m</p><ul><li>提交的秒速信息</li></ul></li><li><p>-a</p><ul><li>镜像作者</li></ul></li><li><p>imagename</p><ul><li>目标镜像名</li></ul></li><li><p>containerId</p><ul><li>容器ID</li></ul></li></ul></li></ul></li><li><p>build</p><ul><li><p>dockfile构建镜像</p><ul><li><p>-t</p><ul><li>镜像名</li></ul></li><li><p>目录名</p></li></ul></li></ul></li><li><p>tag imageID</p><ul><li><p>更新标签名</p><ul><li>要用再看</li></ul></li></ul></li></ul></li></ul><h3 id="容器连接"><a href="#容器连接" class="headerlink" title="容器连接"></a>容器连接</h3><ul><li><p>docker</p><ul><li><p>networt</p><ul><li><p>create</p><ul><li><p>-d</p><ul><li><p>指定Docker网络类型</p><ul><li>bridge</li><li>overlay</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>示例</p><ul><li><p>docker netword create -d 网络类型 networkname</p><ul><li>运行容器时使用 –network networkname 指定连接</li></ul></li></ul></li></ul><h3 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h3><ul><li><p>FROM</p><ul><li><p>base镜像</p><ul><li>基于某个镜像构建</li></ul></li></ul></li><li><p>运行命令</p><ul><li><p>RUN</p><ul><li><p>构建时运行</p><ul><li>每一条RUN指令会多加一层镜像，造成镜像过大，可用&amp;&amp;连接多条命令</li></ul></li><li><p>格式</p><ul><li>RUN  命令</li><li>RUN [‘可执行文件’,’参数1’,’参数2’]</li></ul></li></ul></li><li><p>CMD</p><ul><li><p>容器启动是运行</p><ul><li><p>注意</p><ul><li>只有最后一条CMD指令会被执行</li></ul></li></ul></li><li><p>格式</p><ul><li><p>CMD 命令</p></li><li><p>CMD [‘可执行文件’,’参数1’,’参数2’]</p></li><li><p>CMD [‘参数1’,’参数2’]</p><ul><li><p>该写法为entry point 指令指定的程序提供默认参数</p><ul><li>入口点</li></ul></li></ul></li></ul></li></ul></li><li><p>ENTRYPOINT</p><ul><li><p>类似CMD指令,可与docker run 配合使用可变参数，与CMD配合使用默认参数</p><ul><li>同CMD一样，仅最后一个生效</li></ul></li><li><p>格式</p><ul><li><p>ENTRYPOINT [‘nginx’,’-c;]CMD [“/path”]</p><ul><li><p>docker run nginx:test</p><ul><li>不指定参数，nginx的-c参数值为/path</li></ul></li><li><p>docker run nginx:test -c ‘/otherPath’</p><ul><li>指定参数 nginx的-c参数为/otherPath</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>ENV</p><ul><li><p>设置环境变量，后续的指令可以使用这个变量</p><ul><li>访问使用$变量名</li></ul></li><li><p>格式</p><ul><li>ENV key value</li><li>ENV key1=value1 key2=value2</li></ul></li></ul></li><li><p>ARG</p><ul><li>与ENV作用一只，只是作用域不同，ARG只有build能访问到</li><li>可在 docker build 时通过 –build-arg 参数名=值来覆盖</li></ul></li><li><p>VOLUME</p><ul><li><p>定义匿名数据卷，在启动容器时忘记挂载数据卷，会自动挂载到匿名卷</p></li><li><p>格式</p><ul><li>VOLUME [path1,path2]</li><li>VOLUME path</li></ul></li><li><p>docker run -v 指定挂载点</p></li></ul></li><li><p>EXPOSE</p><ul><li>仅声明端口</li></ul></li><li><p>WORKDIR</p><ul><li>工作目录</li></ul></li><li><p>COPY</p><ul><li>复制文件</li></ul></li><li><p>ONBUILD</p><ul><li><p>延迟构建命令的执行</p><ul><li>这次构建的镜像被新的dockerfile引用且构建时运行</li></ul></li></ul></li><li><p>LABEL</p><ul><li><p>元数据</p><ul><li>LABEL key=value key2=value2</li></ul></li></ul></li><li><p>USER</p><ul><li>改变执行用户</li></ul></li><li><p>HEALTHCHECK</p><ul><li>指定某个程序或指令来监控容器服务的状态</li></ul></li></ul><h3 id="docker-machine"><a href="#docker-machine" class="headerlink" title="docker machine"></a>docker machine</h3><ul><li>使用本章通过 virtualbox 来介绍 docker-machine 的使用方法。其他云服务商操作与此基本一致。具体可以参考每家服务商的指导文档。1、列出可用的机器可以看到目前只有这里默认的 default 虚拟机。$ docker-machine ls2、创建机器创建一台名为 test 的机器。$ docker-machine create –driver virtualbox test–driver：指定用来创建机器的驱动类型，这里是 virtualbox。3、查看机器的 ip$ docker-machine ip test4、停止机器$ docker-machine stop test5、启动机器$ docker-machine start test6、进入机器$ docker-machine ssh testdocker-machine 命令参数说明docker-machine active：查看当前激活状态的 Docker 主机。$ docker-machine lsNAME      ACTIVE   DRIVER         STATE     URLdev       -        virtualbox     Running   tcp://192.168.99.103:2376staging   *        digitalocean   Running   tcp://203.0.113.81:2376$ echo $DOCKER_HOSTtcp://203.0.113.81:2376$ docker-machine activestagingconfig：查看当前激活状态 Docker 主机的连接信息。create：创建 Docker 主机env：显示连接到某个主机需要的环境变量inspect： 以 json 格式输出指定Docker的详细信息ip： 获取指定 Docker 主机的地址kill： 直接杀死指定的 Docker 主机ls： 列出所有的管理主机provision： 重新配置指定主机regenerate-certs： 为某个主机重新生成 TLS 信息restart： 重启指定的主机rm： 删除某台 Docker 主机，对应的虚拟机也会被删除ssh： 通过 SSH 连接到主机上，执行命令scp： 在 Docker 主机之间以及 Docker 主机和本地主机之间通过 scp 远程复制数据mount： 使用 SSHFS 从计算机装载或卸载目录start： 启动一个指定的 Docker 主机，如果对象是个虚拟机，该虚拟机将被启动status： 获取指定 Docker 主机的状态(包括：Running、Paused、Saved、Stopped、Stopping、Starting、Error)等stop： 停止一个指定的 Docker 主机upgrade： 将一个指定主机的 Docker 版本更新为最新url： 获取指定 Docker 主机的监听 URLversion： 显示 Docker Machine 的版本或者主机 Docker 版本help： 显示帮助信息</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.sync修饰符</title>
    <link href="/2021/08/23/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2021/08/23/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>elementui-slot-scope使用bug</title>
    <link href="/2021/07/20/elementui-slot-scope%E4%BD%BF%E7%94%A8bug/"/>
    <url>/2021/07/20/elementui-slot-scope%E4%BD%BF%E7%94%A8bug/</url>
    
    <content type="html"><![CDATA[<p>多个table按需显示时并且用到slot-scope时不能用if判断，需要使用v-show，否则可能出现数据显示不出或错乱等问题</p>]]></content>
    
    
    
    <tags>
      
      <tag>-elementui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack的使用</title>
    <link href="/2021/07/03/webpack%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/03/webpack%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>使用cnpm 会报错？</p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm i webpack webpack-<span class="hljs-keyword">cli</span> -D<br></code></pre></td></tr></table></figure><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><ul><li>根目录下新建webpack.config.js文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>)<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">mode</span>:<span class="hljs-string">&quot;development&quot;</span>,  <span class="hljs-comment">//编译模式 &quot;development&quot; | &quot;production&quot; | &quot;none&quot;</span><br>    <span class="hljs-attr">entry</span>:path.join(__dirname,<span class="hljs-string">&quot;./src/index.js&quot;</span>),   <span class="hljs-comment">//入口文件</span><br>    <span class="hljs-attr">output</span>:&#123;     <span class="hljs-comment">//打包后的文件信息</span><br>        <span class="hljs-attr">path</span>:path.join(__dirname, <span class="hljs-string">&quot;./dist&quot;</span>),  <span class="hljs-comment">//路径</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>  <span class="hljs-comment">//文件名</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span>   <h2 id="三、热更新"><a href="#三、热更新" class="headerlink" title="三、热更新"></a>三、热更新</h2><p>webpack-dev-ser</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">新版配置方法<br><span class="hljs-string">&quot;webpack&quot;</span>: <span class="hljs-string">&quot;^5.42.0&quot;</span>,<br><span class="hljs-string">&quot;webpack-cli&quot;</span>: <span class="hljs-string">&quot;^4.7.2&quot;</span>,<br><span class="hljs-string">&quot;webpack-dev-server&quot;</span>: <span class="hljs-string">&quot;^3.11.2&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://files.catbox.moe/izjfl7.png"></p><h2 id="四、插件"><a href="#四、插件" class="headerlink" title="四、插件"></a>四、插件</h2><p>插件示例：html-webpack-plugin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">html</span>-webpack-plugin<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> HtmlPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>)<br><span class="hljs-keyword">const</span> htmlP = <span class="hljs-keyword">new</span> HtmlPlugin(&#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;./src/index.html&quot;</span>  ,<span class="hljs-comment">//模板html,</span><br>    <span class="hljs-attr">filename</span>:<span class="hljs-string">&quot;index.html&quot;</span>  <span class="hljs-comment">//映射到内存的名字</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">添加plugin属性<br> <span class="hljs-attr">plugins</span>:[htmlP]<br></code></pre></td></tr></table></figure><h2 id="五、loader加载器"><a href="#五、loader加载器" class="headerlink" title="五、loader加载器"></a>五、loader加载器</h2><p>作用：打包js以外的文件</p><p>例：css</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">cnpm i <span class="hljs-built_in">style</span>-loader css-loader --<span class="hljs-built_in">save</span>-dev<br></code></pre></td></tr></table></figure><p>添加module属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>:&#123;<br>        <span class="hljs-attr">rules</span>:[<br>            &#123;<span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.css$/</span>,use:[<span class="hljs-string">&quot;style-loader&quot;</span>,<span class="hljs-string">&quot;css-loader&quot;</span>]&#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="六、vue单文件组件的加载"><a href="#六、vue单文件组件的加载" class="headerlink" title="六、vue单文件组件的加载"></a>六、vue单文件组件的加载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> VueLoaderPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vue-loader/lib/plugin&quot;</span>)<br> <span class="hljs-attr">plugins</span>:[htmlP,<span class="hljs-keyword">new</span> VueLoaderPlugin()]<br> <br> <br>  <span class="hljs-string">&quot;vue-loader&quot;</span>: <span class="hljs-string">&quot;^15.7.0&quot;</span>,<br>    <span class="hljs-string">&quot;vue-template-compiler&quot;</span>: <span class="hljs-string">&quot;^2.6.14&quot;</span>,<br></code></pre></td></tr></table></figure><h2 id="常用loader"><a href="#常用loader" class="headerlink" title="常用loader"></a>常用loader</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">less</span>-loader <span class="hljs-keyword">less</span><br>sass-loader node-sass<br>postcss-loader autoprefixer  添加兼容性前缀<br>url-loader <span class="hljs-keyword">file</span>-loader 图片，字体<br>vue-loader vue-template-compiler vue单文件组件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BOM</title>
    <link href="/2021/06/26/BOM/"/>
    <url>/2021/06/26/BOM/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器模型"><a href="#浏览器模型" class="headerlink" title="浏览器模型"></a>浏览器模型</h1><h2 id="浏览器组成"><a href="#浏览器组成" class="headerlink" title="浏览器组成"></a>浏览器组成</h2><h3 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h3><ul><li>解析代码</li><li>对象合成</li><li>布局</li><li>绘制</li><li>重流和重绘</li></ul><span id="more"></span>   <h3 id="javascript引擎"><a href="#javascript引擎" class="headerlink" title="javascript引擎"></a>javascript引擎</h3><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><p>window.name</p><ul><li>表示当前浏览器窗口的名字</li></ul></li><li><p>window.closed</p><ul><li>返回布尔值，表示窗口是否关闭</li></ul></li><li><p>window.opener</p><ul><li>表示当前窗口的父窗口，如果没有返回null</li></ul></li><li><p>window.self</p><ul><li><p>window.window</p><ul><li>都指向窗口本身</li></ul></li></ul></li><li><p>window.frames</p><ul><li>返回页内所有框架窗口</li></ul></li><li><p>window.frameElement</p></li><li><p>window.top</p><ul><li>指向最顶层窗口</li></ul></li><li><p>window.parent</p><ul><li>指向父窗口</li></ul></li><li><p>window.devicePixelRatio</p><ul><li>返回一个比率</li></ul></li><li><p>位置大小(只读)</p><ul><li><p>浏览器左上角相对于屏幕左上角的距离</p><ul><li>window.screenX</li><li>window.screenY</li></ul></li><li><p>返回网页在当前窗口的可见部分</p><ul><li>window.innerHeight</li><li>window.innerWidth</li></ul></li><li><p>返回浏览器的总高度，宽度</p><ul><li>window.outerHeight</li><li>window.outerWidth</li></ul></li><li><p>返回页面滚动距离</p><ul><li><p>window.scrollX</p><ul><li><p>==</p><ul><li>window.pageXOffset</li></ul></li></ul></li><li><p>window.scrollY</p><ul><li><p>==</p><ul><li>window.pageYOffset</li></ul></li></ul></li></ul></li></ul></li><li><p>浏览器组件</p><ul><li><p>window.locationbar</p><ul><li>地址栏对象</li></ul></li><li><p>window.menubar</p><ul><li>菜单栏对象</li></ul></li><li><p>window.scrollbars</p><ul><li>窗口的滚动条对象</li></ul></li><li><p>window.toolbar</p><ul><li>工具栏对象</li></ul></li><li><p>window.statusbar</p><ul><li>状态栏对象</li></ul></li><li><p>window.personalbar</p><ul><li>用户安装的个人工具栏对象</li></ul></li><li><p>组件共同属性</p><ul><li><p>visible</p><ul><li>表示这些组件是否可见</li></ul></li></ul></li></ul></li><li><p>全局对象属性</p><ul><li><p>window.document</p><ul><li>document对象</li></ul></li><li><p>window.location</p><ul><li>指向location对象</li></ul></li><li><p>window.localStorage</p><ul><li>指向本地储存的localStorage数据</li></ul></li><li><p>window.sessionStorage</p><ul><li>指向本地储存的sessionStorage数据</li></ul></li><li><p>window.console</p><ul><li>指向console对象，用于操作控制台</li></ul></li><li><p>指向Screen对象</p><ul><li>表示屏幕对象</li></ul></li></ul></li><li><p>window.isSecureContext</p><ul><li>返回布尔值，https协议下返回true</li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><p>对话框</p><ul><li><p>window.alert</p></li><li><p>window.prompt(tips,defaultValue)</p><ul><li>用户输入内容，有确定和取消，确定返回输入，取消返回null</li></ul></li><li><p>window.confirm(tips)</p><ul><li>有确定和删除按钮，确定返回true,取消返回false</li></ul></li></ul></li><li><p>窗口相关</p><ul><li><p>window,open(url,windowName,[features])</p><ul><li>features逗号分割的键值对,可以设置组件工具是否显示</li></ul></li><li><p>window.close()</p><ul><li>关闭窗口</li></ul></li><li><p>window.stop()</p><ul><li>停止加载</li></ul></li></ul></li><li><p>窗口移动</p><ul><li><p>window.moveTo(x,y)</p><ul><li>移到指定位置</li></ul></li><li><p>window.moveBy(x,y)</p><ul><li>移到相对位置x,y</li></ul></li></ul></li><li><p>窗口缩放</p><ul><li><p>window.resizeTo(width,height)</p><ul><li>缩小到指定大小</li></ul></li><li><p>window.resizeBy(x,y)</p><ul><li><p>按照相对量进行缩放</p><ul><li>负数就表示当前窗口大小减去该值</li></ul></li></ul></li></ul></li><li><p>窗口滚动</p><ul><li><p>window.scroll</p><ul><li><p>==</p><ul><li><p>window.scrollTo()</p><ul><li><p>页面滚到指定位置</p></li><li><p>接受两个参数或一个参数对象</p><ul><li><p>两个参数</p><ul><li>x,y坐标</li></ul></li><li><p>参数对象</p><ul><li><p>top：y坐标</p></li><li><p>left:x坐标</p></li><li><p>behavior:滚动方式</p><ul><li>smooth</li><li>instant</li><li>auto</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>window.scrollBy(右，下)</p><ul><li>网页滚动到指定距离</li></ul></li><li><p>滚动某个元素</p><ul><li>scrollTop</li><li>scrollLeft</li><li>scrollIntoView</li></ul></li></ul></li><li><p>window.print</p><ul><li>跳出打印对话框</li></ul></li><li><p>窗口焦点</p><ul><li><p>window.focus()</p><ul><li>聚焦</li></ul></li><li><p>window,blur()</p><ul><li>失焦</li></ul></li></ul></li><li><p>window.getSelection()</p><ul><li>返回Selection对象，表示用户现在选中的文本</li></ul></li><li><p>window.getComputedStyle()</p></li><li><p>window.matchMedia()</p><ul><li>检查媒体查询</li></ul></li><li><p>window.requestAnimationFrame()</p></li><li><p>window.requestIdIeCallback()</p></li><li><p>事件</p><ul><li>load</li><li>error</li></ul></li><li><p>子主题 14</p></li></ul><h2 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li><p>Navigator.userAgent</p><ul><li>浏览器标识</li></ul></li><li><p>Navigator.plugins</p><ul><li>返回类数组，浏览器安装的插件</li></ul></li><li><p>Navigator.platform</p><ul><li>用户的操作系统信息</li></ul></li><li><p>Navigator.onLine</p><ul><li>返回布尔值，用户在线还是离线(判断网络)</li><li>在线触发online事件</li><li>离线触发offline事件</li></ul></li><li><p>Navigator.language</p><ul><li><p>返回字符串，标识浏览器首选语言，属性只读</p></li><li><p>Navigator.languages</p><ul><li>返回一个数组，表示用户用户可以接受的语言</li></ul></li></ul></li><li><p>Geolocation</p><ul><li><p>Navigator.geolocation()返回该对象(https支持)</p></li><li><p>Geolocation.getCurrentPosition()</p><ul><li>得到用户当前位置</li></ul></li><li><p>Geolocation.watchPositon()</p><ul><li>监听用户位置变化</li></ul></li><li><p>Geolocation.clearWatch()</p><ul><li>取消watchPosition方法指定的函数</li></ul></li></ul></li><li><p>Navigator.cookieEnabled</p><ul><li>返回一个布尔值，表示浏览器Cookie功能是否打开</li></ul></li><li><p>实验性属性</p><ul><li><p>Navigator.deviceMemory</p><ul><li>返回当前计算机的内存数量，四舍五入返回最接近2的幂</li></ul></li><li><p>Navigator.hardwareConcurrency</p><ul><li>返回可用的逻辑处理器的数量，只读</li><li>该属性通过用于Web Worker,每个可用的逻辑处理器都创建一个Worker</li></ul></li><li><p>Navigator.connection</p><ul><li>返回一个对象，包含当前对象</li></ul></li></ul></li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li><p>Navigator.javaEnable()</p><ul><li>返回一个布尔值，表示浏览器能否能运行Java Applet小程序</li></ul></li><li><p>Navigator.sendBeacon()</p><ul><li>用于向服务器异步发送数据</li></ul></li></ul><h2 id="Screen对象"><a href="#Screen对象" class="headerlink" title="Screen对象"></a>Screen对象</h2><h3 id="Screen-height"><a href="#Screen-height" class="headerlink" title="Screen.height"></a>Screen.height</h3><ul><li>浏览器窗口所在的屏幕的高度，与分辨率相关</li></ul><h3 id="Screen-width"><a href="#Screen-width" class="headerlink" title="Screen.width"></a>Screen.width</h3><ul><li>浏览器窗口所在的屏幕的宽度</li></ul><h3 id="Screen-availWidth"><a href="#Screen-availWidth" class="headerlink" title="Screen.availWidth"></a>Screen.availWidth</h3><ul><li>浏览器窗口可用的屏幕宽度</li></ul><h3 id="Screen-availHeight"><a href="#Screen-availHeight" class="headerlink" title="Screen.availHeight"></a>Screen.availHeight</h3><ul><li>浏览器的可用屏幕高度</li></ul><h3 id="screen-colorDepth"><a href="#screen-colorDepth" class="headerlink" title="screen.colorDepth"></a>screen.colorDepth</h3><ul><li><p>==</p><ul><li><p>Screen.pixelDepth</p><ul><li>整数，表示屏幕的色彩位数</li></ul></li></ul></li></ul><h3 id="screen-orientation"><a href="#screen-orientation" class="headerlink" title="screen.orientation"></a>screen.orientation</h3><ul><li>返回一个对象，表示屏幕的方向</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="document-cookie"><a href="#document-cookie" class="headerlink" title="document.cookie"></a>document.cookie</h3><ul><li>返回当前网页的Cookie,可读写</li></ul><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="XMLHttpRequest-返回一个实例"><a href="#XMLHttpRequest-返回一个实例" class="headerlink" title="XMLHttpRequest() 返回一个实例"></a>XMLHttpRequest() 返回一个实例</h3><h3 id="xhr实例"><a href="#xhr实例" class="headerlink" title="xhr实例"></a>xhr实例</h3><ul><li><p>属性</p><ul><li><p>readyState 返回一个整数，表示实例对象当前状态</p></li><li><p>readyState</p><ul><li><p>0</p><ul><li>实例以已生成，open方法没有调用</li></ul></li><li><p>1</p><ul><li>open方法已调用，send未调用</li></ul></li><li><p>2</p><ul><li>send已调用，收到返回的头信息和状态码</li></ul></li><li><p>3</p><ul><li>正在接收服务器传来的数据体(body部分)</li></ul></li><li><p>4</p><ul><li>表示服务器返回的数据已经完全接受，或本次接受已经失败</li></ul></li></ul></li><li><p>xhr.onreadystatechange,readyState发生改变时触发该属性指向的函数</p></li><li><p>xhr.response 服务器返回的数据，类型右xhr.responseType属性决定</p></li><li><p>xhr.responseType 在open方法后，send方法前调用</p><ul><li><p>“”</p><ul><li>返回文本</li></ul></li><li><p>arraybuffer</p><ul><li>服务器返回二进制数组</li></ul></li><li><p>blob</p><ul><li>返回二进制对象</li></ul></li><li><p>document</p><ul><li>返回一个文档对象</li></ul></li><li><p>json</p><ul><li>JSON对象</li></ul></li><li><p>text</p><ul><li>字符串</li></ul></li></ul></li><li><p>xhr.responseText</p><ul><li>从服务器接收到字符串</li></ul></li><li><p>xhr.responseXML</p><ul><li>HTML或XML文档对象</li></ul></li><li><p>xhr.responseURL</p><ul><li>返回目标网址</li></ul></li><li><p>xhr.status</p><ul><li>http状态码</li></ul></li><li><p>xhr.statueText</p><ul><li>返回状态提示，默认ok</li></ul></li><li><p>xhr.timeout</p><ul><li>设置请求超时的标准，单位为毫秒</li></ul></li><li><p>xhr.ontimeout</p><ul><li>超时监听属性，超时会触发</li></ul></li><li><p>xhr.upload</p><ul><li>xhr上传文件时会有这个对象</li></ul></li></ul></li><li><p>事件的监听属性</p><ul><li><p>onloadstart</p><ul><li>请求发出时触发</li></ul></li><li><p>onprogress</p><ul><li>正在发送和加载数据时触发</li></ul></li><li><p>onabort</p><ul><li>请求终止时触发，比如调用了abort方法</li></ul></li><li><p>onerror</p><ul><li>请求失败触发</li></ul></li><li><p>onload</p><ul><li>请求成功触发</li></ul></li><li><p>ontimeout</p><ul><li>超时触发</li></ul></li><li><p>onloadend</p><ul><li>请求完成触发，不论成功与否</li></ul></li></ul></li><li><p>方法</p><ul><li><p>xhr.open(method,url,async,user,password)</p></li><li><p>xhr.send() 发送http请求</p></li><li><p>xhr.setRequestHeader()</p><ul><li>设置请求头</li></ul></li><li><p>xhr.getResponseHeader(filedname)</p><ul><li>获取响应头某一字段的值</li></ul></li><li><p>xhr.getAllResponseHeader()</p><ul><li>获取所有响应头</li></ul></li><li><p>xhr.abort()</p><ul><li>终止请求</li></ul></li><li><p>xhr.sendBeacon()</p></li></ul></li></ul><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><h3 id="window-sessionStorage和window-localStorage"><a href="#window-sessionStorage和window-localStorage" class="headerlink" title="window.sessionStorage和window.localStorage"></a>window.sessionStorage和window.localStorage</h3><ul><li>只是保存时长不一样，接口一样</li></ul><h3 id="key-value形式存储"><a href="#key-value形式存储" class="headerlink" title="key-value形式存储"></a>key-value形式存储</h3><h3 id="唯一属性"><a href="#唯一属性" class="headerlink" title="唯一属性"></a>唯一属性</h3><ul><li><p>length</p><ul><li>返回保存项的个数</li></ul></li></ul><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><ul><li><p>setItem(key,value)</p><ul><li><p>存入数据</p><ul><li>两个参数都是字符串，不是字符串会转成字符串</li><li>存对象得先转成字符串</li></ul></li></ul></li><li><p>getItem(key)</p><ul><li>根据key取value，key不存在返回null</li></ul></li><li><p>removeItem(key)</p><ul><li>根据key删除</li></ul></li><li><p>clear()</p><ul><li>清除所有保存的</li></ul></li><li><p>key(num)</p><ul><li>根据下标返回对应的项</li></ul></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>storage储存的数据发生改变时会触发window.storage事件</li></ul><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><h3 id="window-history-表示当前窗口的浏览历史"><a href="#window-history-表示当前窗口的浏览历史" class="headerlink" title="window.history 表示当前窗口的浏览历史"></a>window.history 表示当前窗口的浏览历史</h3><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><ul><li><p>history.length</p><ul><li>当前窗口访问过的网址的对象</li></ul></li><li><p>history.state</p><ul><li>最上层的状态值</li></ul></li></ul><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><ul><li><p>histoty.back()</p><ul><li>移动到上一个网址</li></ul></li><li><p>history.forward()</p><ul><li>移动到下一个网址</li></ul></li><li><p>history.go(num)</p><ul><li>指定网址</li></ul></li><li><p>history.pushState(state,title,url)</p><ul><li>添加一条记录</li></ul></li><li><p>history.replaceState(state,title,url)</p></li></ul><h3 id="popstate事件"><a href="#popstate事件" class="headerlink" title="popstate事件"></a>popstate事件</h3><ul><li>history对象出现变化都会触发该事件</li></ul><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><h3 id="document-location"><a href="#document-location" class="headerlink" title="document.location"></a>document.location</h3><h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><ul><li>href</li><li>protocol</li><li>host</li><li>hostname</li><li>port</li><li>pathname</li><li>search</li><li>hash</li><li>username</li><li>password</li><li>origin</li></ul><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><ul><li><p>location.assign(url)</p><ul><li>跳到新的url</li></ul></li><li><p>location.replace(url)</p><ul><li>跳到新的，不会保存记录</li></ul></li><li><p>location.reload()</p><ul><li>页面重载</li></ul></li><li><p>location.toString()</p><ul><li>返回URL字符串</li></ul></li></ul><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><h3 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h3><ul><li>encodeURI()</li><li>decodeURI()</li><li>encodeURIComponent()</li><li>decodeURIComponent()</li></ul><h3 id="URL实例对象"><a href="#URL实例对象" class="headerlink" title="URL实例对象"></a>URL实例对象</h3><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li><p>URL.createObjectURL()</p><ul><li>创建上传/卸载的文件</li></ul></li><li><p>URL.revokeOBjectURL()</p><ul><li>释放create创建的实例</li></ul></li></ul><h3 id="new-URLSearchParams"><a href="#new-URLSearchParams" class="headerlink" title="new URLSearchParams()"></a>new URLSearchParams()</h3><ul><li><p>构造URL search参数</p><ul><li>接收字符串、数组，对象</li></ul></li><li><p>toString()</p><ul><li>返回实例的字符串形式</li></ul></li><li><p>append()</p><ul><li>追加参数</li></ul></li><li><p>delete()</p><ul><li>删除</li></ul></li><li><p>has()</p><ul><li>查询是否存在某个键</li></ul></li><li><p>set()</p></li><li><p>get()</p></li><li><p>getAll()</p></li><li><p>sort()</p><ul><li>排序</li></ul></li><li><p>keys()、values()、entries()</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react</title>
    <link href="/2021/06/22/react/"/>
    <url>/2021/06/22/react/</url>
    
    <content type="html"><![CDATA[<h1 id="react"><a href="#react" class="headerlink" title="react"></a>react</h1><h2 id="react-hello"><a href="#react-hello" class="headerlink" title="react hello"></a>react hello</h2><h3 id="准备类库"><a href="#准备类库" class="headerlink" title="准备类库"></a>准备类库</h3><ul><li>react.js</li><li>react-dom.js</li><li>babel(browser.js)</li></ul><span id="more"></span>   <h3 id="创建虚拟节点"><a href="#创建虚拟节点" class="headerlink" title="创建虚拟节点"></a>创建虚拟节点</h3><ul><li><pre><code class="hljs">vnode = &lt;h2&gt;hello react&lt;/h2&gt;</code></pre></li></ul><h3 id="渲染节点到页面"><a href="#渲染节点到页面" class="headerlink" title="渲染节点到页面"></a>渲染节点到页面</h3><ul><li><p>ReactDOM.render(vnode,ele)</p><ul><li>挂载到ele元素上</li></ul></li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件三大属性"><a href="#组件三大属性" class="headerlink" title="组件三大属性"></a>组件三大属性</h3><ul><li><p>state</p><ul><li><p>setState</p><ul><li>设置某个state属性，会触发render渲染</li></ul></li></ul></li><li><p>props</p><ul><li><p>组件传参的形式</p><ul><li><p>限制传参类型</p><ul><li><p>设置Class.propTypes属性</p><ul><li><p>用到props-type.js</p><ul><li>全局属性：PropTypes</li></ul></li></ul></li></ul></li><li><p>设置传参默认值</p><ul><li>设置defaultProps属性</li></ul></li></ul></li><li><p>批量传参</p><ul><li>&lt;tag {…obj}/&gt;</li></ul></li></ul></li><li><p>ref</p><ul><li><p>组件加上ref属性</p><ul><li>字符串形式</li><li>回调函数形式</li><li>React.createRef()</li></ul></li></ul></li></ul><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><ul><li>{js code}</li></ul><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><ul><li>返回jsx代码</li></ul><h3 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h3><ul><li>render()  必要函数</li></ul><h3 id="生命周期-旧"><a href="#生命周期-旧" class="headerlink" title="生命周期(旧)"></a>生命周期(旧)</h3><ul><li><p>执行一次</p><ul><li><p>constructor()</p><ul><li>构造函数</li></ul></li><li><p>componentWillMount()</p><ul><li>即将挂载</li></ul></li><li><p>render()</p><ul><li>渲染</li></ul></li><li><p>componentDidMount()</p><ul><li>挂载完成</li></ul></li><li><p>componentWillUnmount()</p><ul><li>即将卸载</li></ul></li></ul></li><li><p>执行N次</p><ul><li><p>componentWillReceiveProps()</p><ul><li>父组件render时触发，第一次不触发</li></ul></li><li><p>shouldComponentUpdate()</p><ul><li>setState()触发</li><li>返回true会更新视图</li></ul></li><li><p>componentWillUpdate()</p><ul><li><p>即将更新</p><ul><li>forceUpdate()可以触发</li></ul></li></ul></li><li><p>render()</p></li><li><p>componentDidUpdate()</p></li><li><p>componentWillUnmount()</p></li></ul></li></ul><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h3><ul><li>props</li></ul><h3 id="兄弟通信"><a href="#兄弟通信" class="headerlink" title="兄弟通信"></a>兄弟通信</h3><ul><li><p>订阅消息-发布</p><ul><li><p>用PubSubJs</p><ul><li>subscribe 订阅</li><li>publish 发布</li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事件</title>
    <link href="/2021/06/20/%E4%BA%8B%E4%BB%B6/"/>
    <url>/2021/06/20/%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="EventTgarget接口"><a href="#EventTgarget接口" class="headerlink" title="EventTgarget接口"></a>EventTgarget接口</h2><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><h3 id="renoveEventListener"><a href="#renoveEventListener" class="headerlink" title="renoveEventListener"></a>renoveEventListener</h3><ul><li>移除监听，没有返回值</li></ul><h3 id="dispatchEvent-触发事件"><a href="#dispatchEvent-触发事件" class="headerlink" title="dispatchEvent 触发事件"></a>dispatchEvent 触发事件</h3><h2 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h2><h3 id="三个阶段"><a href="#三个阶段" class="headerlink" title="三个阶段"></a>三个阶段</h3><ul><li><p>捕获阶段</p><ul><li>父元素先触发</li></ul></li><li><p>目标阶段</p><ul><li>目标元素触发</li></ul></li><li><p>冒泡阶段</p><ul><li>子元素事件，冒泡触发</li></ul></li></ul><h2 id="Event对象"><a href="#Event对象" class="headerlink" title="Event对象"></a>Event对象</h2>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 总结</title>
    <link href="/2021/06/11/%E5%90%8E%E7%9B%BE%E4%BA%BAjs/"/>
    <url>/2021/06/11/%E5%90%8E%E7%9B%BE%E4%BA%BAjs/</url>
    
    <content type="html"><![CDATA[<h1 id="B站视频链接"><a href="#B站视频链接" class="headerlink" title="B站视频链接"></a><a href="https://www.bilibili.com/video/BV1NJ411W7wh">B站视频链接</a></h1><h2 id="一、变量声明"><a href="#一、变量声明" class="headerlink" title="一、变量声明"></a>一、变量声明</h2><h3 id="var、let、const"><a href="#var、let、const" class="headerlink" title="var、let、const"></a>var、let、const</h3><p>var 可重复声明，可二次赋值，无作用域概念</p><p>let 不可重复声明，可二次赋值，有作用域概念</p><p>const 不可重复声明，不可二次赋值，有作用域概念</p><h3 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a>undefined 和 null</h3><p>普通数据类型可用undefined, 引用数据类型可用null 两者无本质区别</p><span id="more"></span>   <h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>变量提升在用var声明变量的时候会有表现</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">num</span>) ;  //undefined<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">10</span>;<br><br> ||  等同于<br> ∨<br> <span class="hljs-built_in">var</span> <span class="hljs-built_in">num</span>;<br> console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">num</span>)  <br> <span class="hljs-built_in">num</span> = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h2 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h2><p>前置加和后置加的区别</p><p>短路与和短路或  ||  &amp;&amp;</p><p>赋值运算符</p><p>比较运算符</p><p>严格比较运算符</p><h2 id="三、条件控制语句"><a href="#三、条件控制语句" class="headerlink" title="三、条件控制语句"></a>三、条件控制语句</h2><h3 id="if…else……"><a href="#if…else……" class="headerlink" title="if…else……"></a>if…else……</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(真)</span></span>&#123;<br>会执行在这里的语句，仅有一条语句时可省略大括号（不推荐省略）<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">布尔表达式？<span class="hljs-literal">true</span>的时候返回这个:<span class="hljs-literal">false</span>的时候返回这个<br></code></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">switch</span>(<span class="hljs-keyword">variable</span>)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">break</span>;<br>……<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> <span class="hljs-built_in">num</span> =<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">num</span>&gt;<span class="hljs-number">10</span>)&#123;<br><span class="hljs-built_in">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="do……while"><a href="#do……while" class="headerlink" title="do……while"></a>do……while</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">do</span>……<span class="hljs-keyword">while</span> =<span class="hljs-function">=&gt;</span> 至少执行一次代码块<br><span class="hljs-keyword">do</span>&#123;<br>至少执行一次<br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(let i =<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++)</span></span>&#123;<br>console<span class="hljs-selector-class">.log</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for……in"><a href="#for……in" class="headerlink" title="for……in"></a>for……in</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(a in arr)</span></span>&#123;<br>此时a是arr的下标<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for……of"><a href="#for……of" class="headerlink" title="for……of"></a>for……of</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(a of arr)</span></span>&#123;<br>此时a是arr的值<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、String对象"><a href="#四、String对象" class="headerlink" title="四、String对象"></a>四、String对象</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;构造函数&quot;</span>)<br><span class="hljs-built_in">console</span>.log(str)  <span class="hljs-comment">//构造函数</span><br>等同于<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;构造函数&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">字符串模板的特点：可以在字符串中使用定义好的变量，无需字符串拼接<br><span class="hljs-keyword">let</span> str1 = <span class="hljs-string">&quot;str1&quot;</span>;<br><span class="hljs-keyword">let</span> str2 = <span class="hljs-string">&quot;str2&quot;</span>;<br><span class="hljs-keyword">let</span> str3 = <span class="hljs-string">&quot;我的str:&quot;</span> + str1 + str2<br><span class="hljs-keyword">let</span> str4 = <span class="hljs-string">`我的str:<span class="hljs-subst">$&#123;str1&#125;</span><span class="hljs-subst">$&#123;str2&#125;</span>`</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;str3&quot;</span>,str3); <span class="hljs-comment">//str3 我的str:str1str2</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;str4&quot;</span>,str4);<span class="hljs-comment">//str4 我的str:str1str2</span><br></code></pre></td></tr></table></figure><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><h4 id="1-slice-start-end-支持负数索引"><a href="#1-slice-start-end-支持负数索引" class="headerlink" title="1.slice(start, end) (支持负数索引)"></a>1.slice(start, end) (支持负数索引)</h4><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs openscad">slice(start, end) <span class="hljs-comment">//两个参数 以字符串中的下标论，从0开始，包括start,不包括end,end默认到末尾</span><br><span class="hljs-built_in">let</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;12345&quot;</span>;<br><span class="hljs-comment">//  下标    01234</span><br><span class="hljs-comment">//截取2到4</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">str</span>.slice(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>))  <span class="hljs-comment">// 234</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">str</span>)    <span class="hljs-comment">//12345 slice 不改变原数组</span><br></code></pre></td></tr></table></figure><h4 id="2-substr-start-length-支持负数索引"><a href="#2-substr-start-length-支持负数索引" class="headerlink" title="2.substr(start, length) (支持负数索引)"></a>2.substr(start, length) (支持负数索引)</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">substr(<span class="hljs-built_in">start</span>, <span class="hljs-built_in">length</span>)从<span class="hljs-built_in">start</span>开始抽取指定<span class="hljs-built_in">length</span>个的字符<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>start</em></td><td align="left">必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。</td></tr><tr><td align="left"><em>length</em></td><td align="left">可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>let substr = <span class="hljs-string">&quot;12345&quot;</span><br><span class="hljs-regexp">//</span>截取<span class="hljs-number">2</span>到<span class="hljs-number">4</span><br>console.log(substr.substr(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) <span class="hljs-regexp">//</span><span class="hljs-number">234</span><br>console.log(substr) <span class="hljs-regexp">//</span><span class="hljs-number">12345</span> substr 不改变原数组<br></code></pre></td></tr></table></figure><h4 id="3-substring-from-to-不支持负数索引"><a href="#3-substring-from-to-不支持负数索引" class="headerlink" title="3.substring(from, to) (不支持负数索引)"></a>3.substring(from, to) (不支持负数索引)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">substring() 方法用于提取字符串中介于两个指定下标之间的字符。<br>substring() 方法返回的子串包括 开始 处的字符，但不包括 结束 处的字符。<br><br><span class="hljs-keyword">let</span> substring = <span class="hljs-string">&quot;12345&quot;</span>;<br><span class="hljs-comment">//截取2到4</span><br><span class="hljs-built_in">console</span>.log(substring.substring(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>));  <span class="hljs-comment">//</span><br><span class="hljs-built_in">console</span>.log(substring)  <span class="hljs-comment">//12345 substring 不改变原数组</span><br></code></pre></td></tr></table></figure><h3 id="字符串查找方法"><a href="#字符串查找方法" class="headerlink" title="字符串查找方法"></a>字符串查找方法</h3><ul><li>indexOf(str)  从左到右查找str，成功返回下标，失败返回-1</li><li>lastIndexOf(str)  从有到左查找str，成功返回下标，失败返回-1</li><li>includes(str)  是否包含str ，返回值boolean</li><li>switchWith(str)  是否以str 开头 返回值boolean</li><li>trim() 去掉两边空白</li><li>toLocalLowerCase()  转小写</li><li>toLocalUpperCase() 转大写</li><li>valueOf() 返回字符串对象的原始值</li><li>toString()  返回一个字符串</li><li>split(str)  根据str 把字符串切割成数组</li><li>replace()  字符串替换</li><li>repeat(n) 字符串重复n次</li></ul><h2 id="五、Math对象"><a href="#五、Math对象" class="headerlink" title="五、Math对象"></a>五、Math对象</h2><h3 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Math</span>.max(num<span class="hljs-number">1</span>,num<span class="hljs-number">2</span>,num<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Math</span>.min(num<span class="hljs-number">1</span>,num<span class="hljs-number">2</span>,num<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Math</span>.random()  返回<span class="hljs-number">0</span>~<span class="hljs-number">1</span>之间的一个书<br></code></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>ceil(x) 向上取整</li><li>floor(x)  向下取整</li><li>pow(x,y) 返回x的y次幂</li><li>round(x)  四舍五入、</li></ul><h2 id="六、Date对象"><a href="#六、Date对象" class="headerlink" title="六、Date对象"></a>六、Date对象</h2><p>Date的时间支持1970年至今</p><h3 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h3><ul><li><em>let</em> date =new Date();</li><li><em>let</em> date =new Date(milliseconds); 给一个毫秒数</li><li><em>let</em> date =new Date(2010,2,2,19,20,30);  年月日时分秒</li><li>……</li></ul><h3 id="Date常用方法"><a href="#Date常用方法" class="headerlink" title="Date常用方法"></a>Date常用方法</h3><ul><li>getDay()  返回一周中的某一天（0-6）</li><li>getFullYear()  返回四位数的年份</li><li>getMonth()  返回月份（0-11） 月份从0开始到11</li><li>getDate() 返回一个月中的某一天（1-31）</li><li>getHour()   返回小时  （0-23）从0开始</li><li>getMinutes() 返回分钟（0-59） 0开始</li><li>getSenconds()  返回秒数（0–59）</li><li>getTime()  返回1970至今毫秒数</li><li></li><li>toLocaleDateString()</li></ul><h2 id="七、数组"><a href="#七、数组" class="headerlink" title="七、数组"></a>七、数组</h2><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><ul><li>arr = new Array(5)  5个空间的arr</li><li>arr = new Array.of(5)  一个空间并且为5的数组</li><li>arr = []  空数组</li></ul><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">let [<span class="hljs-keyword">a</span>,b] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">a</span>) <span class="hljs-comment"> //1</span><br>console.<span class="hljs-built_in">log</span>(b)<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h3 id="数组的增删改查"><a href="#数组的增删改查" class="headerlink" title="数组的增删改查"></a>数组的增删改查</h3><p>增</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">let</span> arr =<span class="hljs-meta"> [1,2,3]</span><br><span class="hljs-attribute">arr</span>[arr.length]=<span class="hljs-number">4</span><br><span class="hljs-attribute">arr</span>.push(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>……)<br></code></pre></td></tr></table></figure><p>删</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode">arr.pop<span class="hljs-comment">()</span>  删除末尾的一个元素  <br>arr.shift<span class="hljs-comment">()</span>  删除数组的第一个元素<br><br>以上两个返回值都是被删除的元素<br><br><br></code></pre></td></tr></table></figure><p>改</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">再次赋值即可<br></code></pre></td></tr></table></figure><p>查</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">let arr = <span class="hljs-selector-attr">[1,2,3]</span><br>arr<span class="hljs-selector-class">.includes</span>()  boolean 返回值<br>arr<span class="hljs-selector-class">.indexOf</span>()<br>arr<span class="hljs-selector-class">.lastIndexOf</span>()<br>类似String查找……<br><br><span class="hljs-function"><span class="hljs-title">find</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">findIndex</span><span class="hljs-params">()</span></span><br>引用类型适用<br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><p>遍历的时候拿到的item 是普通数据类型还是引用数据类型呢？关键点</p></li><li><p>fill()    数组填充</p></li><li><p>sort()</p><ul><li>```<br>let arr = [2,1,3,5,67,99,3,4,34,43];<pre><code class="hljs">console.table(arr.sort(function(a,b)&#123;    //a-b 从小到大 升序排序    //b-a 从大到小  降序排序    return a-b;&#125;))</code></pre>sort 原理<br>function sort(arr,callback){<pre><code class="hljs">    //冒泡排序    for(let i =0; i&lt; arr.length; i++)&#123;        for(let j=0; j&lt;arr.length; j++)&#123;            if(callback(arr[i], arr[j]) &lt; 0)&#123;                let temp = arr[j];                arr[j] = arr[i];                arr[i] = temp;            &#125;        &#125;    &#125;&#125;</code></pre><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>  <br><br>- <span class="hljs-keyword">for</span><span class="hljs-constructor">Each()</span> 数组循环<br><br>  - ```<br>      <span class="hljs-keyword">let</span> arr = <span class="hljs-literal">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span><br>        arr.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">function</span>(<span class="hljs-params">value</span>, <span class="hljs-params">key</span>, <span class="hljs-params">arr</span>)</span>&#123;<br>            <span class="hljs-comment">// value 值</span><br>            <span class="hljs-comment">// key 下标</span><br>            <span class="hljs-comment">// arr 原数组</span><br>            console.log(arr)<br>        &#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>every()</p><ul><li>```<br>let status = arr.every(function(value, key, arr){<pre><code class="hljs">    console.log(value)    //每一次循环都要返回真才会继续循环    return true&#125;)//全真才会返回真， 一假就假console.log(status)</code></pre><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><br>    <br><br>- <span class="hljs-keyword">some</span>()<br><br>  - ```<br>    类似<span class="hljs-keyword">every</span> 刚好反过来，遇到<span class="hljs-literal">false</span>会继续遍历<br></code></pre></td></tr></table></figure></li></ul></li><li><p>filter()</p><ul><li>```<br>filter(function(value, key, arr)=&gt;{<pre><code class="hljs">//最终会返回一个新数组返回true 会push 当前元素进去返回false 不会push当前元素进去</code></pre>}) <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br>    <br><br>- <span class="hljs-built_in">map</span>()<br><br>  - ```<br>    <span class="hljs-built_in">map</span>(function(value, <span class="hljs-built_in">key</span>, arr)&#123;<br>    <span class="hljs-comment">//这里返回什么，新数组对应位置就为什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    &#125;)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>reduce()</p><ul><li>```<br>reduce(function(pre, value, key, arr){<pre><code class="hljs">//pre 如果有第二个参数则为第二个参数，如果没有则为数组的第一个参数//pre 也为上一个循环的返回值</code></pre>})<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>    <br><br>## 八、新增数据类型<br><br>### <span class="hljs-number">1.</span>symbol<br><br>symbol 本质上是类似于唯一字符串，可用作对象的唯一属性名<br><br>#### 唯一性<br><br>即使是同一个描述生成的symbol 对象也不相等<br><br>#### 隐藏性<br><br>for……<span class="hljs-keyword">in</span>，object.keys() 不能访问到<br><br>Object.getOwnPropertySymbols()   才可以获取到值ymbol  只能遍历symbol 类型的key<br><br>Reflect.ownKeys() 可以遍历到所有的<br><br>#### 需要可复用<br><br>虽然这样保证了Symbol的唯一性，但我们不排除希望能够多次使用同一个symbol值的情况。<br>为此，官方提供了全局注册并登记的方法：Symbol.for()<br><br></code></pre></td></tr></table></figure>let name1 = Symbol.for(‘name’); //检测到未创建后新建<br>let name2 = Symbol.for(‘name’); //检测到已创建后返回<br>console.log(name1 === name2); // true<br>123<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>通过这种方法就可以通过参数值获取到全局的symbol对象了，反之，能不能通过symbol对象获取到参数值呢？<br>是可以的 ，通过<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Symbol</span>.</span></span>key<span class="hljs-constructor">For()</span><br><br></code></pre></td></tr></table></figure>let name1 = Symbol.for(‘name’);<br>let name2 = Symbol.for(‘name’);<br>console.log(Symbol.keyFor(name1));  // ‘name’<br>console.log(Symbol.keyFor(name2)); // ‘name’<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### <span class="hljs-number">2.</span>Set<br><br>set 的特点 不可重复性，强引用, 区分类型（number 和·string）<br><br>#### set的定义<br><br></code></pre></td></tr></table></figure>let set = new Set();<br>console.log(set)  //[]<br>let set = new Set(“1232”);<br>console.log(set)  //[“1”,”2”,”3”]<br>let set = new Set([1,2,3,1]);<br>console.log(set)  //[1,2,3]<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### set 增加数据<br><br></code></pre></td></tr></table></figure>set.add(data)<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### set删除数据<br><br></code></pre></td></tr></table></figure>set.delete(data)    删除成功返回true,反之返回false<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### set查找<br><br></code></pre></td></tr></table></figure>set.has(data)    删除成功返回true,反之返回false<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### set 清空数据<br><br></code></pre></td></tr></table></figure>set.clear()<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### set遍历<br><br></code></pre></td></tr></table></figure>set.values()<br>set.keys()<br>set.entries()<br>forEach<br>for…in<br>……<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### Set与数组互转<br><br></code></pre></td></tr></table></figure>set-&gt;arr    […set]<br>arr-&gt;set     new Set(arr)<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### size<br><br></code></pre></td></tr></table></figure>set.size() 返回set的大小<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### <span class="hljs-number">3.</span>WeakSet()<br><br>特点：不可重复，只能存放引用类型的数组，弱引用<br><br>delete()<br><br>has()<br><br>其他set的方法没了，size都没有<br><br>### <span class="hljs-number">4.</span>Map<br><br>特点：类似对象，都是以键值对的方式储存数据。区别是对象只能以字符串作为键名，而Map不局限于字符串，数字、对象等都可以作为键名<br><br>#### Map的定义<br><br></code></pre></td></tr></table></figure>let map = new Map()<br>//传入二维数组<br>let map = new Map([[“key1”,”value1”],[“key2”,”value2”]]);</li></ul></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### Map添加数据<br><br></code></pre></td></tr></table></figure><p>map.set(key, value)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### Map删除数据<br><br></code></pre></td></tr></table></figure><p>map.delete(key)    删除成功返回true<br>map.clear()  全删除，无返回值</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### Map查找数据<br><br></code></pre></td></tr></table></figure><p>map.has(key)    查找成功返回true</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### Map转数组<br><br></code></pre></td></tr></table></figure><p>[…map]   得到二位数组</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### Map的一些方法<br><br></code></pre></td></tr></table></figure><p>map.keys()<br>map.values()<br>map.entries()<br>map可以用for…of遍历<br>也可以转为数组在遍历</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><br><span class="hljs-comment">### 5.WeakMap</span><br><br>特点：类似Map 类型， 但键名只能使用对象，且是弱引用<br><br>仅有<span class="hljs-built_in">delete</span>、has、<span class="hljs-built_in">set</span>方法<br><br><span class="hljs-comment">## 九、函数</span><br><br><span class="hljs-comment">### 函数的定义方式</span><br><br>```javascript<span class="hljs-comment"></span><br><span class="hljs-comment">//构造函数</span><br>let fun1 = <span class="hljs-built_in">new</span> Function(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;console.log(a)&quot;</span>)<span class="hljs-comment"></span><br><span class="hljs-comment">//函数表达式</span><br>let fun2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-title">a</span>)&#123;</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">a</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun3</span>(<span class="hljs-title">a</span>)&#123;</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">a</span>)<br>&#125;<br>fun1(<span class="hljs-number">4</span>)<span class="hljs-comment"> //4</span><br>fun2(<span class="hljs-number">4</span>)<span class="hljs-comment"> //4</span><br>fun3(<span class="hljs-number">4</span>)<span class="hljs-comment"> //4</span><br></code></pre></td></tr></table></figure><h3 id="全局函数的特点"><a href="#全局函数的特点" class="headerlink" title="全局函数的特点"></a>全局函数的特点</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">全局定义的函数默认是添加在<span class="hljs-built_in">window</span>对象上的方法<br></code></pre></td></tr></table></figure><h3 id="匿名函数与函数提升"><a href="#匿名函数与函数提升" class="headerlink" title="匿名函数与函数提升"></a>匿名函数与函数提升</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">匿名函数特点：不用命名，难以复用<br>函数提升:下面例子不会报错<br><span class="hljs-built_in">fun1</span>()<br>function <span class="hljs-built_in">fun1</span>()&#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="立即执行函数解决作用域冲突（命名冲突）"><a href="#立即执行函数解决作用域冲突（命名冲突）" class="headerlink" title="立即执行函数解决作用域冲突（命名冲突）"></a>立即执行函数解决作用域冲突（命名冲突）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">立即执行函数<br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;aa&quot;</span>)<br>&#125;)()<br></code></pre></td></tr></table></figure><p>用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">window</span></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> a = &#123;<br>        <span class="hljs-function"><span class="hljs-title">a1</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a1&quot;</span>)<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">a2</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a2&quot;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">window</span>.a = a<br>&#125;)(<span class="hljs-built_in">window</span>)<br><span class="hljs-built_in">window</span>.a.a1()<br><span class="hljs-built_in">window</span>.a.a2()<br></code></pre></td></tr></table></figure><h3 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h3><p>略</p><h3 id="arguments和用…语法接收参数"><a href="#arguments和用…语法接收参数" class="headerlink" title="arguments和用…语法接收参数"></a>arguments和用…语法接收参数</h3><p>传入的参数会被arguments接到，类似是一个数组</p><p>现在用…args可以达到同样的效果，不同的是arguments会接到所有的参数，不管你定义了几个参数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">let fun1=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a)</span></span>&#123;<br>        console.log(a)  <span class="hljs-comment">// 1</span><br>        console.log(arguments)  <span class="hljs-comment">//1 2 3</span><br>    &#125;<br>    let fun2 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a, <span class="hljs-rest_arg">...args</span>)</span></span>&#123;<br>        console.log(a)  <span class="hljs-comment">//1</span><br>        console.log(args)      <span class="hljs-comment">//2 3</span><br>    &#125;<br>    fun1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>    fun2(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ol><li>常在匿名函数里使用</li><li>语法 ()=&gt;{}</li><li>圆括号里写参数，仅有一个参数时圆括号可省略，没有参数时要写上圆括号 a=&gt;{}</li><li>代码块中仅有一条语句时且是return 的 ,  {}省略  a=&gt;a+1</li></ol><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>一个函数的参数是一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;这是个函数，他将作为一个参数传递给另一个函数&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params">a</span>)</span>&#123;<br><span class="hljs-comment">//a是形参，接收任意数据类型，当传进一个函数体时会发生什么呢？</span><br><br><span class="hljs-comment">//可以调用传进来得函数体？</span><br>a()   <span class="hljs-comment">//控制台有打印吗？</span><br><br><span class="hljs-comment">//回调函数  在一个适当的时机调用另外一个函数</span><br><span class="hljs-keyword">if</span>(真)&#123;<br>a()   <span class="hljs-comment">//条件为真才调用</span><br>&#125;<br>&#125;<br><br>b(callback)<br></code></pre></td></tr></table></figure><h3 id="函数中的this和方法中的this-指向"><a href="#函数中的this和方法中的this-指向" class="headerlink" title="函数中的this和方法中的this 指向"></a>函数中的this和方法中的this 指向</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun1</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)   <span class="hljs-comment">//指向window对象</span><br>   &#125;<br>   <span class="hljs-keyword">let</span> obj = &#123;<br>       <span class="hljs-function"><span class="hljs-title">fun1</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>) <span class="hljs-comment">//指向obj</span><br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">let</span> obj2 = &#123;<br>       <span class="hljs-function"><span class="hljs-title">fun1</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)   <span class="hljs-comment">//这是方法中的函数，指向window对象</span><br>           &#125;,<span class="hljs-number">1000</span>)<br>       &#125;<br>   &#125;<br>   fun1()<br>   obj1.fun1()<br>   obj2.fun1()<br></code></pre></td></tr></table></figure><p>总结：普通函数中的this指向window对象，对象中的方法指向当前对象，对象的方法中的函数指向window对象</p><p>注意：DOM对象添加事件监听其实也是添加DOM对象的方法，此时this指向DOM对象</p><h3 id="箭头函数的this指向"><a href="#箭头函数的this指向" class="headerlink" title="箭头函数的this指向"></a>箭头函数的this指向</h3><p>在箭头函数中使用的this会到父级作用域中寻找this,此时this指向跟父级作用域的this指向相同，DOM对象中的事件监听按此理也是寻找父级作用域的this</p><h3 id="this使用总结"><a href="#this使用总结" class="headerlink" title="this使用总结"></a>this使用总结</h3><p>普通回调函数用箭头函数， DOM事件用普通函数</p><h3 id="用call、apply、bind来调用函数"><a href="#用call、apply、bind来调用函数" class="headerlink" title="用call、apply、bind来调用函数"></a>用call、apply、bind来调用函数</h3><ul><li>这三个方法的作用都是用来改变函数的this指向</li><li>Function.call(Object, params)    此时 Function 的this指向Object  ,params 格式为  1，2，3</li><li>Function.apply(Object,  params)  此时 Function 的this指向Object ,  params 是一个数组传参</li><li>上面两个方法都是立即执行</li><li>Function.bind(Object, params)   与call类似，区别是不会立即调用函数,适用于改变事件监听中回调函数的this指向</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM</title>
    <link href="/2021/05/26/DOM/"/>
    <url>/2021/05/26/DOM/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><ul><li><p>属性</p><ul><li>defaultView</li><li>doctype</li><li>documentElement  指向html节点</li><li>document.body</li><li>document.head</li></ul><span id="more"></span>   <ul><li><p>document.scrollingElement</p></li><li><p>document.activeElement</p></li><li><p>fullscreenElement</p></li><li><p>返回HTMLCollection实例</p><ul><li>document.links</li><li>document.forms</li><li>document.images</li><li>document.embeds</li><li>document.plugins</li><li>scripts</li></ul></li><li><p>document.styleSheets</p></li><li><p>document.documentURI</p></li><li><p>document.documentURL</p></li><li><p>document.domain</p></li><li><p>document.location</p></li><li><p>document.lastModiified</p></li><li><p>document.title</p></li><li><p>document.characterSet</p></li><li><p>document.referrer</p></li><li><p>document.dir</p></li></ul></li><li><p>方法</p><ul><li><p>选择器</p><ul><li><p>返回NodeList对象</p><ul><li>document.querySelector()</li><li>document.querySelectorAll()</li><li>document.getElementsByName()</li></ul></li><li><p>返回HTMLCollection 实例</p><ul><li>document.getElementsByTagName()</li><li>document.getElementsByClassName()</li></ul></li><li><p>document.getElementById() 返回的是个节点</p></li></ul></li><li><p>节点生成</p><ul><li>document.createElement()  生成元素节点</li><li>document.createTextNode() 生成文本节点</li><li>document.createComment() 生成注释节点</li><li>document.createDocumentFragment() 生成空的文档对象</li></ul></li><li><p>属性相关</p><ul><li>document.createAttribute() 生成一个新的属性节点。值通过value属性设置</li></ul></li><li><p>事件相关</p><ul><li>document.createEvent()  生成事件对象</li><li>document.addEventListener()  添加监听器</li><li>document.removeEventListener()  移除监听器</li></ul></li><li><p>子节点遍历器</p><ul><li><p>document.createNodeIterator() 子节点遍历器</p><ul><li>nextNode()</li><li>previousNode()</li></ul></li></ul></li></ul></li></ul><h3 id="DocumentType"><a href="#DocumentType" class="headerlink" title="DocumentType"></a>DocumentType</h3><h3 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h3><ul><li><p>属性</p><ul><li><p>Element.id</p></li><li><p>Element.tagName</p></li><li><p>Element.dir</p></li><li><p>Element.accessKey</p></li><li><p>Element.draggable</p></li><li><p>Element.lang</p></li><li><p>Element.tabIndex</p></li><li><p>Element.title</p></li><li><p>元素状态相关</p><ul><li>Element.hidden</li><li>Element.contentEditable 元素是否可编辑</li><li>Element.isContentEditable</li></ul></li><li><p>Element.attributes</p></li><li><p>元素类的操作</p><ul><li><p>className 返回字符串</p></li><li><p>classList 返回类数组对象</p><ul><li>add() 增加一个类</li><li>remove() 删除一个类</li><li>contains() 是否包含某个类</li><li>toggle() 类切换</li><li>item() 返回指定索引的类</li><li>toSting() 转成字符串形式</li></ul></li></ul></li><li><p>Element.dataset  自定义属性</p></li><li><p>Element.innerHTML</p></li><li><p>Element.outerHTML  可用于替换整个元素</p></li><li><p>元素大小</p><ul><li><p>返回元素大小，只包括padding</p><ul><li>Element.clientHeight</li><li>Element.clientWidth</li></ul></li><li><p>返回边框大小</p><ul><li>Element.clientLeft</li><li>Element.clientTop</li></ul></li><li><p>返回元素占的总大小(不包括margin,border)</p><ul><li>Element.scrollHeight</li><li>Element.scrollWidth</li></ul></li><li><p>滚动的像素</p><ul><li>Element.scrollLeft 返回元素向右滚动的像素</li><li>Element.scrollTop 返回元素向下滚动的像素</li></ul></li></ul></li><li><p>元素离窗口的距离</p><ul><li><p>返回元素在该元素的总大小</p><ul><li>Element.offsetHeight</li><li>Element.offsetWidth</li></ul></li><li><p>返回距离父元素的偏移量</p><ul><li>Element.offsetLeft</li><li>Element.offsetTop</li></ul></li></ul></li><li><p>Element.offsetParent</p><ul><li>返回最近的父元素且position不等于static</li></ul></li><li><p>Element.style  行内样式</p></li><li><p>Element.children</p><ul><li>返回HTMLCollection 实例</li></ul></li><li><p>Element.childElementCount</p></li><li><p>Element.firstElementChild</p></li><li><p>Element.lastElementChild</p></li><li><p>Element.nextElementSibling</p></li><li><p>Element.previousElementSibling</p></li></ul></li><li><p>方法</p><ul><li><p>属性相关</p><ul><li>getAttribute() 获取某个属性的值</li><li>getAttributeNames() 返回当前元素的所有属性名 </li><li>setAttribute() 写入属性值</li><li>hasAttribute() 某个属性是否存在</li><li>hasAttributes() 当前属性是否有属性</li><li>removeAttribute() 删除属性</li></ul></li><li><p>选择器</p><ul><li><p>Element.querySelector() css选择器</p></li><li><p>Element.querySelectorAll()  返回NodeList实例</p></li><li><p>返回HTMLCollection 实例</p><ul><li>Element.getElementsByClassName() </li><li>Element.getElementsByTagName()</li></ul></li><li><p>Element.closest()</p><ul><li>接受css选择器，返回距离选中元素最近的父元素</li></ul></li><li><p>Element.matches() 返回一个布尔值，表示当前元素是否匹配给定的css选择器</p></li></ul></li><li><p>Element.scrollIntoView() 滚动当前元素进入浏览器可视区域</p></li><li><p>Element.getBoundingClientRect() 返回一个对象</p><ul><li>x</li><li>y</li><li>height</li><li>width</li><li>left</li><li>right</li><li>top</li><li>bottom</li></ul></li><li><p>Element.getClientReacts()</p></li><li><p>Element.insertAdjacentElement()</p></li><li><p>Element.insertAdjacentHtml()</p></li><li><p>Element.insertAdjacentText()</p></li><li><p>Element.remove()</p></li><li><p>Element.focus()</p></li><li><p>Element.blur()</p></li><li><p>Element.click()</p></li></ul></li><li><p>Element.attributes</p><ul><li><p>返回类似数组的动态对象，可通过索引或属性名索引</p></li><li><p>属性节点对象</p><ul><li><p>name</p><ul><li>属性名，等同于nodeName</li></ul></li><li><p>value</p><ul><li>属性值。等同于nodeValue</li></ul></li></ul></li><li><p>属性保留字</p><ul><li><p>for</p><ul><li>htmlFor</li></ul></li><li><p>ckass</p><ul><li>className</li></ul></li></ul></li><li><p>属性操作的标准方法</p><ul><li>getAttribute(key) 返回属性值</li><li>Elemnet.getAttributeNames() 返回一个数组，成员是当前索引属性的名字</li><li>Element.setAttribute() 设置属性</li><li>Element.hasAttribute()  返回一个布尔值。表示是否有该属性</li><li>Element.hasAttributes()移除指定属性</li><li>data- 自定义属性</li></ul></li></ul></li></ul><h3 id="Attr"><a href="#Attr" class="headerlink" title="Attr"></a>Attr</h3><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><h3 id="DocumentFragment"><a href="#DocumentFragment" class="headerlink" title="DocumentFragment"></a>DocumentFragment</h3><h3 id="子主题-8"><a href="#子主题-8" class="headerlink" title="子主题 8"></a>子主题 8</h3><h3 id="子主题-9"><a href="#子主题-9" class="headerlink" title="子主题 9"></a>子主题 9</h3><h2 id="多个节点的接口"><a href="#多个节点的接口" class="headerlink" title="多个节点的接口"></a>多个节点的接口</h2><h3 id="NodeList"><a href="#NodeList" class="headerlink" title="NodeList"></a>NodeList</h3><ul><li><p>length</p></li><li><p>forEach()</p></li><li><p>item(i) 取第i个节点</p></li><li><p>遍历</p><ul><li>keys() 遍历键名</li><li>values() 遍历值</li><li>entries()  遍历键值</li></ul></li></ul><h3 id="HTMLCollection"><a href="#HTMLCollection" class="headerlink" title="HTMLCollection"></a>HTMLCollection</h3><ul><li>length</li><li>item(i) 取第i个节点</li><li>namedItem() 根据id或name属性取节点</li></ul><h2 id="属性的操作"><a href="#属性的操作" class="headerlink" title="属性的操作"></a>属性的操作</h2><h3 id="元素对象独有的属性，其他类型的返回null"><a href="#元素对象独有的属性，其他类型的返回null" class="headerlink" title="元素对象独有的属性，其他类型的返回null"></a>元素对象独有的属性，其他类型的返回null</h3><h3 id="可以通过序号引用，也可以通过属性名引用"><a href="#可以通过序号引用，也可以通过属性名引用" class="headerlink" title="可以通过序号引用，也可以通过属性名引用"></a>可以通过序号引用，也可以通过属性名引用</h3><h3 id="element-attributes"><a href="#element-attributes" class="headerlink" title="element.attributes"></a>element.attributes</h3><h3 id="每个属性都有name-value属性，对应键值对"><a href="#每个属性都有name-value属性，对应键值对" class="headerlink" title="每个属性都有name,value属性，对应键值对"></a>每个属性都有name,value属性，对应键值对</h3><h3 id="html元素的标准属性，会自动成为节点对象的属性"><a href="#html元素的标准属性，会自动成为节点对象的属性" class="headerlink" title="html元素的标准属性，会自动成为节点对象的属性"></a>html元素的标准属性，会自动成为节点对象的属性</h3><ul><li>id</li><li>href</li><li>src</li><li>action</li><li>method</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><p>getAttribute</p><ul><li>obj.getAttribute(name) 返回指定属性</li></ul></li><li><p>getAttributeNames</p><ul><li>返回所有属性的名字</li></ul></li><li><p>setAttribute</p><ul><li>设置属性</li></ul></li><li><p>hasAttributes</p><ul><li>是否有某个属性</li></ul></li><li><p>removeAttribute</p><ul><li>移除某个属性，没有返回值</li></ul></li></ul><h3 id="dataset属性"><a href="#dataset属性" class="headerlink" title="dataset属性"></a>dataset属性</h3><h2 id="Node接口"><a href="#Node接口" class="headerlink" title="Node接口"></a>Node接口</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>nodeType</li><li>nodeName</li><li>nodeValue</li><li>textContent</li><li>baseUrl</li><li>ownerDocument</li><li>nextSibling</li><li>previousSibling</li><li>parentNode</li><li>parentElement</li><li>firstChild</li><li>lastChild</li><li>childNodes</li><li>isConnected</li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li>appendChild</li><li>hasChildNodes</li><li>cloneNode</li><li>insertBefore</li><li>removeChildl</li><li>replaceChild</li><li>compareDocumentPosition</li><li>isEqualNode</li><li>isSameNode</li><li>normalize</li><li>getRootNode</li></ul><h2 id="父子节点接口"><a href="#父子节点接口" class="headerlink" title="父子节点接口"></a>父子节点接口</h2><h3 id="ParentNode"><a href="#ParentNode" class="headerlink" title="ParentNode"></a>ParentNode</h3><ul><li>children  返回HTMLCollection实例</li><li>firstElementChild</li><li>lastElementChild</li><li>childElementCount</li><li>append() 可追加多个</li><li>prepend()</li></ul><h3 id="ChildNode"><a href="#ChildNode" class="headerlink" title="ChildNode"></a>ChildNode</h3><ul><li>remove()</li><li>before()</li><li>after()</li><li>replaceWith()</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 更新代码</title>
    <link href="/2021/04/14/Git%E6%9B%B4%E6%96%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
    <url>/2021/04/14/Git%E6%9B%B4%E6%96%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>Git更新远程仓库代码到本地</strong></p><p>初始化本地仓库  –<code>git init</code></p><p>在本地代码修改过的情况中，从远程获取最新版本到本地仓库，添加一新分支，将远程origin仓库的master分支代码下载到本地temp分支</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git fetch origin master:temp<br></code></pre></td></tr></table></figure><span id="more"></span>   <p><em><strong>执行以下命令</strong></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">git add .<br><br>git commit -m <span class="hljs-string">&quot;备注内容&quot;</span><br></code></pre></td></tr></table></figure><p><em><strong>比较本地代码与刚刚从远程下载下来的代码</strong></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git diff temp<br></code></pre></td></tr></table></figure><p><em><strong>合并分支</strong></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git merge temp<br></code></pre></td></tr></table></figure><p><strong><strong>提交</strong></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git push origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel</title>
    <link href="/2021/03/27/laravel/"/>
    <url>/2021/03/27/laravel/</url>
    
    <content type="html"><![CDATA[<h2 id="一、路由"><a href="#一、路由" class="headerlink" title="一、路由"></a>一、路由</h2><h3 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Route::<span class="hljs-keyword">get</span>(path,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;)<br></code></pre></td></tr></table></figure><span id="more"></span>   <h3 id="路由调用类中的方法"><a href="#路由调用类中的方法" class="headerlink" title="路由调用类中的方法"></a>路由调用类中的方法</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Route::<span class="hljs-keyword">get</span>(path, [<span class="hljs-keyword">class</span>,&quot;<span class="hljs-symbol">methodName</span>&quot;])<br><span class="hljs-symbol">Route::<span class="hljs-symbol">get</span></span>(<span class="hljs-symbol">path, </span>&quot;<span class="hljs-symbol">controllerName</span>@<span class="hljs-symbol">methodName</span>&quot;)<br></code></pre></td></tr></table></figure><h3 id="响应多个http请求的路由"><a href="#响应多个http请求的路由" class="headerlink" title="响应多个http请求的路由"></a>响应多个http请求的路由</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">Route::<span class="hljs-keyword">match</span>([<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>],callback)<br></code></pre></td></tr></table></figure><h3 id="csrf保护"><a href="#csrf保护" class="headerlink" title="csrf保护"></a>csrf保护</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">POST,<span class="hljs-meta">PUT</span>,PATCH,<span class="hljs-meta">DElETE</span><br>@csrf<br></code></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ROute::<span class="hljs-built_in">redirect</span>(here,there)<br></code></pre></td></tr></table></figure><h3 id="视图路由"><a href="#视图路由" class="headerlink" title="视图路由"></a>视图路由</h3><p>Route::view(path,view_name)</p><h3 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h3><h4 id="必填参数"><a href="#必填参数" class="headerlink" title="必填参数"></a>必填参数</h4><p>参数写在{ } 中表示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;/user/&#123;id&#125;&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>可选参数加个问号（？）并且回调中的参数需添加默认值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Route::get(<span class="hljs-string">&quot;/user/&#123;name?&#125;&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>=<span class="hljs-literal">null</span></span>)</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="正则约束路由匹配"><a href="#正则约束路由匹配" class="headerlink" title="正则约束路由匹配"></a>正则约束路由匹配</h4><p>在路由实例上添加where方法约束</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Route::get<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">&#x27;/user/id&#x27;</span>,<span class="hljs-keyword">function</span>($id)&#123;&#125;)</span>-&gt;</span>where(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;[0-9]+&quot;</span>)<br></code></pre></td></tr></table></figure><p>系统添加的常用正则</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">whereNumber</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">whereAlpha</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">whereAlphaNumeric</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">whereUuid</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h5 id="正则的全局约束"><a href="#正则的全局约束" class="headerlink" title="正则的全局约束"></a>正则的全局约束</h5><p>在Providers中的路由服务类中添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Route::<span class="hljs-built_in">pattern</span>(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;[0-9]+&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>middleware</p><p>中间件</p><h2 id="二、请求"><a href="#二、请求" class="headerlink" title="二、请求"></a>二、请求</h2><p>http\Reqiest类</p><ul><li><p>path方法返回路径信息因此接收到的目标是  <a href="http://domain.com/foo/bar">http://domain.com/foo/bar</a>  则path方法会返回 foo/bar</p></li><li><p>is 方法验证请求的路径是否与给定的模式匹配</p></li><li><p>获取请求的url</p><ul><li>```<br>url() 返回不带查询条件的url 而fullUrl 方法返回带查询条件的url<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs haml"><br>-<span class="ruby"> method 方法回会请求方式，isMethod 可以验证是否与目标请求方式匹配</span><br><span class="ruby"></span><br>-<span class="ruby"> all 方法获取全部的请求参数 array类型</span><br><span class="ruby"></span><br>-<span class="ruby"> 获取其中一个输入数据  <span class="hljs-variable">$request</span>-&gt;input(key, defaultValue)</span><br><span class="ruby"></span><br>-<span class="ruby"> only()    <span class="hljs-variable">$request</span>-&gt;only([<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>]);</span><br><span class="ruby"></span><br>-<span class="ruby"> except()   <span class="hljs-variable">$request</span>-&gt;except([<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>])</span><br><span class="ruby"></span><br>-<span class="ruby"> has 判断是否有某个值  <span class="hljs-variable">$request</span>-&gt;has(key)</span><br><span class="ruby"></span><br>-<span class="ruby">  flash() 方法吧<span class="hljs-variable">$request</span>中的参数存到session中</span><br><span class="ruby"></span><br>-<span class="ruby"> old辅助函数在blade模板中可以获取上一次的输入值</span><br><span class="ruby"></span><br>-<span class="ruby"> <span class="hljs-comment">### cookie</span></span><br><span class="ruby"></span><br>-<span class="ruby"> 获取cookie</span><br><span class="ruby"></span><br>  -<span class="ruby"> 获取请求来的cookie  <span class="hljs-variable">$request</span>-&gt;cookie(<span class="hljs-string">&quot;name&quot;</span>)  或者Cookie::get(<span class="hljs-string">&quot;name&quot;</span>)</span><br><span class="ruby"></span><br>-<span class="ruby"> 返回cookie</span><br><span class="ruby"></span><br>  -<span class="ruby"> 将cookie附加到响应中 retrun response()-&gt;cookie(key, value, time)</span><br><span class="ruby"></span><br>-<span class="ruby"> 删除cookie</span><br><span class="ruby"></span><br>  -<span class="ruby"> Cookie::queue(Cookie::forget(<span class="hljs-string">&#x27;name&#x27;</span>))</span><br><span class="ruby"></span>  -<span class="ruby"> <span class="hljs-variable">$cookie</span> = Cookie::forget(<span class="hljs-string">&#x27;name&#x27;</span>)   <span class="hljs-keyword">return</span> response()-&gt;cookie(<span class="hljs-variable">$cookie</span>)</span><br><span class="ruby"></span><br>### 获取上传的文件<br><br>-<span class="ruby"> file方法</span><br><span class="ruby"></span><br></code></pre></td></tr></table></figure>$request-&gt;file(“fileName”)   该方法返回一个UploadedFile  类的实例，该类继承了php SplFileInfo 类的同时也提供各种与文件交互的方法<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>- hasFile 方法判断有没有该文件上传<br>- isValid() 方法验证上传到文件是否有效<br><br>## 三、视图<br><br>视图共享数据<br><br>在 AppServiceProvider boot方法中添加 View::share(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>)<br><br>## 四、生成url<br><br>url辅助函数<br><br>url-&gt;current()  当前url<br><br>url-&gt;full()   获取当前url 包括querystring<br><br>url-&gt;previous()  获取上一个url<br><br>## 五、session<br><br></code></pre></td></tr></table></figure>1。通过Request 注入的实例访问<br>$request-&gt;session()-&gt;get(“key”,default);<br>$request-&gt;session()-&gt;get(“key”,function(){<pre><code class="hljs">return 当key不存在时返回这个参数</code></pre>});</li></ul></li></ul><p>2.通过辅助函数session()<br>    当传入一个普通字符时是获取session<br>    session(“key”,defaultValue)<br>    当传入一个键值对数组时是存储session<br>    session([“name”=&gt;”xiaoming”])<br>3.获取所有Session数据<br>    $request-&gt;session-&gt;all()<br>4.判断session中是否存在某个值，可以用has方法，如果该值存在且不为null，那么has方法会返回true<br>    $request-&gt;session()-&gt;has(“key”)<br>    如果把为null的值也算作存在的话，可以使用exists方法<br>    $request-&gt;session()-&gt;exists(“key”)</p><p>5.存储数据<br>    $request-&gt;session()-&gt;put(key, value);<br>    session([key=&gt;value])<br>push方法可以添加一个新的值到数组内</p><p>6.检索&amp;删除数据<br>    $request-&gt;session()-&gt;pull(“key”, “default”)</p><p>7.删除数据<br>    删除指定数据<br>    $request-&gt;session()-&gt;forget(key);<br>    删除所有数据<br>    $request-&gt;session()-&gt;flush()</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 六、表单验证<br><br></code></pre></td></tr></table></figure><p>1.Request实例的validate 方法</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 七、Model<br><br>常用属性<br><br></code></pre></td></tr></table></figure><p>1.更Model默认的表名<br>protected $table = 表名<br>2.更改绑定的创建时间和更改时间字段<br>protected CREATED_AT = 字段名<br>protected UPDATED_AT = 字段名<br>3.用模型的create方法插入属性时需要设置哪个字段允许插入<br>protected fillable = []  允许插入的字段<br>protected guarded = []  不允许插入的字段<br>4.关闭时间戳接管<br>public $timestamps = false;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>常用方法<br><br></code></pre></td></tr></table></figure><p>1.find()<br>根据给定的id查询相关的字段<br>2.批量更新数据<br>Model::update(data[]) 更新成功会返回受影响的记录条数<br>3.批量插入数据<br>Model::create(data[])  插入成功回返回一个对象，失败返回null<br>4.删除数据，通过主键id删除数据<br>Model::find(id)  获取对象实例，通过调用实例的delete方法删除对象</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 八、门面DB类<br><br>常用方法<br><br></code></pre></td></tr></table></figure><p>1.;get()  获取数据    获取符合条件的所有数据    返回值是一个collection 集合对象，可以foreach循环遍历用 isEmpty() 方法判断是否为空，为空返回true<br>DB::table(name)-&gt;all()<br>2.where()   添加查询条件<br>3.first()  获取第一条数据  返回的是一个 stdClass 对象  为空时等于null</p><p>增加<br>4.DB::table()-&gt;insert()   插入成功返回true</p><pre><code class="hljs"></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql笔记</title>
    <link href="/2021/03/23/mysql/"/>
    <url>/2021/03/23/mysql/</url>
    
    <content type="html"><![CDATA[<ul><li>创建数据库 create database 数据库名臣</li><li>显示所有数据库 SHOW DATABASE</li><li>显示某个数据库的信息 SHOW CREATE DATABASE 数据库名</li><li>修改数据库编码格式 ALTER DATABASE 数据库名 DEFAULT CHARACTER SET 编码方式（gbk、utf8……）</li></ul><span id="more"></span>   <ul><li><p>删除数据库 DROP DARABASE 数据库名称；</p></li><li><p>数据类型</p><ul><li>整形<ul><li>tinyint 1个字节</li><li>smallint 2个字节</li><li>mediumint 3个字节</li><li>int 4个字节</li><li>bigint 8个字节</li></ul></li><li>浮点数<ul><li>float 4个字节</li><li>double 8个字节</li></ul></li><li>日期和时间类型<ul><li>year 1个字节 取值范围 1901~2155</li><li>date 4个字节 1000-01-01~9999-12-3   格式：YYYY:MM:DD</li><li>time 3个字节  -838：59：59 ~ 838：59：59  格式：HH:MM:SS</li><li>datatime  8个字节  格式： YYYY-MM-DD HH:MM:SS</li><li>timestamp  4个字节  类似datatime</li></ul></li></ul></li><li><p>创建数据表  CREATE TABLE 表名(‘字段1’ 数据类型 约束条件,’字段2’,’字段3’)</p></li><li><p>查看表信息 show create table 表名</p></li><li><p>查看表内容 describe 表名  简写 desc 表名</p></li><li><p>修改数据表</p><ul><li>修改表名  alter table 旧表名 rename 新表名字</li><li>修改字段名 alter table 表名 change 旧字段名 新字段名 新数据类</li><li>修改字段的数据类型 alter table 表名 modify 字段名 数据类型</li><li>添加字段 alter table 表名 add 新字段名 数据类型</li></ul></li><li><p>表的约束</p><ul><li>primary key 主键约束 <ul><li>单字段主键 创建表的时候添加</li><li>多字段主键 primary key(字段名1，字段名2……)</li></ul></li><li>非空约束 not null</li><li>唯一约束 unique</li><li>默认约束 default 设置字段默认值，插入数据时如果没有为该字段添加值，则插入默认值</li></ul><p>‘ </p><p>增长 auto_increment</p></li><li><p>索引</p><ul><li><p>普通索引 由key或index定义的</p></li><li><p>唯一性索引 是由unique定义的索引，例如在id字段上建立唯一性索引，那么，id字段的值就必须时唯一的</p></li><li><p>全文索引 由fulltext定义的索引，只能创建在char、varchar、或text类型的字段上</p></li><li><p>空间索引 由spatial定义的索引</p></li><li><p>创建索引 </p><ul><li><p>```<br>create table t1(id int,</p><pre><code class="hljs">            name varchar(20),            score float,            INDEX 别名(字段名, 长度, 升序/降序))</code></pre><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>  <span class="hljs-keyword">unique</span> <span class="hljs-keyword">index</span> 索引名 （字段 升降序）   <span class="hljs-comment">-------唯一索引的定义</span><br><br>- 第二种创建方法  使用<span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> 语句在已存在的表上创建索引<br><br></code></pre></td></tr></table></figure><p>CREATE 索引类型 INDEX 索引名 ON 表名 (字段名 长度 asc/desc)<br>例： create unique index s1 on t1 (id asc);</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-operator">-</span> 第三种索引创建方法 使用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 语句在已经存在的表上创建索引<br><br></code></pre></td></tr></table></figure><p>alter table 表名 add 索引类型 INDEX 索引名 (字段名（长度） 升序/降序)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">    ​</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> 索引的删除<br><br><span class="hljs-bullet">  -</span> 使用alter table 删除索引<br><br></code></pre></td></tr></table></figure><p>alter table 表名 drop index 索引名</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><br>- 使用<span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> 删除索引<br><br></code></pre></td></tr></table></figure><p>drop index 索引名 on 表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-operator">-</span> 添加更新与删除索引<br><br>  <span class="hljs-operator">-</span> 添加数据<br><br>    <span class="hljs-operator">-</span> ```<br>      指定字段名<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2</span>，字段<span class="hljs-number">3</span>) <span class="hljs-keyword">values</span>(字段<span class="hljs-number">1</span>对应的值，字段<span class="hljs-number">2</span>对应的值，字段<span class="hljs-number">3</span>对应的值)<br>      不指定字段名                             <span class="hljs-operator">/</span><span class="hljs-operator">/</span>缺点  不能偷懒<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>，值<span class="hljs-number">3</span>)   <span class="hljs-operator">/</span><span class="hljs-operator">/</span>缺点  必须与字段定义的顺序一一对应<br></code></pre></td></tr></table></figure></li><li><p>```<br>特殊写法<br>insert into 表名 set 字段1=值1，字段2=值2……</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-operator">-</span> ```<br>  同时添加多条记录<br>  <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2</span>，字段<span class="hljs-number">3</span>) <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>，值<span class="hljs-number">3</span>)，（值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>，值<span class="hljs-number">3</span>）<br></code></pre></td></tr></table></figure></li></ul></li><li><p>更新数据</p><ul><li><p>```<br>更新记录<br>update 表名 set 字段1=值1，字段2=值2，字段3=值3 where 条件<br>//一般更新语句都得加条件不然全改了</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs q"><br>- 删除数据<br><br>  - ```<br>    删除数据<br>    <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-built_in">where</span> 条件   <span class="hljs-comment">//一般删除语句都得加条件不然全删了</span><br></code></pre></td></tr></table></figure></li><li><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">    使用<span class="hljs-built_in">truncate</span>删除数据<br>    <span class="hljs-built_in">truncate</span> 表名<br>使用<span class="hljs-built_in">truncate</span>删除时不能指定条件，使用时会删除整张表的数据<br></code></pre></td></tr></table></figure></li><li><p>```<br>delete 与 truncate 的区别<br>1.使用delete 删除数据后，在有自动增长的情况下，删除后插入的记录自增将会从删除前的最大值继续增加<br>2.使用truncate 删除数据后，下次插入数据将会从1开始</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br>- 单表查询<br><br>  - <span class="hljs-keyword">select</span> 语句<br><br>    - ```<br>      按字段指定顺序查询<br>      <span class="hljs-keyword">select</span> 查询字段<span class="hljs-number">1</span>，查询字段<span class="hljs-number">2</span>，查询字段<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> 表名（要在哪张表中查询）<br>      查询所有字段<br>      <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名<br>          可用*代表所有字段<br></code></pre></td></tr></table></figure></li><li><p>```<br>按条件查询（where）<br>mysql关系运算符<br>=等于    &lt;&gt;不等于    ！=不等于    &lt; 小于    &lt;=小于等于    &gt;大于    &gt;=大于等于<br>示例<br>select * from 表名 where 条件表达式</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br>- ```<br>  带<span class="hljs-keyword">in</span>关键字的查询<br>  <span class="hljs-keyword">in</span>关键字用于判断某个字段的值是否在指定集合中，如果字段的值在集合中，则满足条件，该字段所在的记录将会被查询出来<br>  <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 字段<span class="hljs-number">1</span> [not]<span class="hljs-keyword">in</span> (值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>，值<span class="hljs-number">3</span>)<br>  此处加not 表示除了该集合以外的值<br></code></pre></td></tr></table></figure></li><li><p>```<br>带between and 关键字的查询<br>between and 用于判断某个字段的值是否在指定的范围内，如果字段的值在指定范围内，则满足条件，该字段所在记录的值也就会被查询出来</p><p>例如：查询表中的id为2到5之间的记录<br>select * from 表名 where id between 2 and 5   (闭合区间，包括2和5)</p><pre><code class="hljs">                        between 前加not 表示除了该区间的字段</code></pre><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>- ```<br>  空值查询<br>  在数据表中，某些列的值可能为空值（<span class="hljs-keyword">NULL</span>）,空值不等同于<span class="hljs-number">0</span>，也不同于空字符串<br>  在mysql中，可以使用 <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> 来判断字段的值是否为控制<br>  <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> age <span class="hljs-keyword">is</span> [<span class="hljs-keyword">not</span>] <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure></li><li><p>```<br>带distinct 关键字的查询<br>很多表中某些字段存在重复的值，distinct 可用于去重</p><pre><code class="hljs">select distinct 字段1 from 表名</code></pre><p>distinct 可用于多个字段<br>例如： select distinct 字段1，字段2 from 表名</p><pre><code class="hljs">    只有当记录中的字段1和字段2都相同时才被认为是重复记录</code></pre><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>- ```<br>  带<span class="hljs-keyword">like</span>关键字的查询（模糊查询）<br>  <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 字段 [<span class="hljs-keyword">not</span>] <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;匹配字符串’</span><br><span class="hljs-string">  </span><br><span class="hljs-string">  1.百分号通配符（%）</span><br><span class="hljs-string">  匹配任意长度的字符串，包括空字符串，例如 字符串“c%&quot; 匹配以字符c开头 任意长度的字符串</span><br><span class="hljs-string">  2.下划线(_)通配符</span><br><span class="hljs-string">  下划线通配符只能匹配单个字符</span><br><span class="hljs-string">  </span><br><span class="hljs-string">  当需要匹配%或_时，需要用\来转义</span><br></code></pre></td></tr></table></figure></li><li><p>```<br>1.带and关键字的多条件查询语句（表示且）<br>select * from 表名 where 条件1 and 条件2<br>2.带or关键字的多条件查询语句（表示或）<br>select * from 表名 where 条件1 or 条件2</p><p>注意：and的优先级高于or</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-operator">-</span> 高级查询<br><br>  <span class="hljs-operator">-</span> ```<br>    聚合函数<br>    <span class="hljs-built_in">count</span>() 返回某列的行数<br>    <span class="hljs-built_in">sum</span>()  返回某列值的和<br>    <span class="hljs-built_in">avg</span>()  返回某列的平均值<br>    <span class="hljs-built_in">max</span>()  返回某列的最大值<br>    <span class="hljs-built_in">min</span>()  返回某列的最小值<br>    <br>    基本用法 <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(某个字段) <span class="hljs-keyword">from</span> 表名<br></code></pre></td></tr></table></figure></li><li><p>```<br>对查询结果排序（order by） 默认升序<br>select * from 表名 order by 某一字段 升序asc/降序desc<br>当排序的选项有多个时，即是按多个字段进行排序<br>例如<br>select * from 表名 order by 字段1 asc,字段2 desc<br>只有当两条记录的字段1的值相同时，则会按照字段2的规则排序</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><br>- 分组查询<span class="hljs-keyword">group</span> <span class="hljs-title">by</span><br><br>  - 需要注意的是。<span class="hljs-keyword">group</span> <span class="hljs-title">by</span> 一般和聚合函数一起使用，如果查询的字段出现在<span class="hljs-keyword">group</span> <span class="hljs-title">by</span>后，却没有包含在聚合函数中，该字段显示的是分组后的第一条值<br><br>  - ```<br>    单独使用 <span class="hljs-keyword">group</span> <span class="hljs-title">by</span> 分组<br>    select * from 表名 <span class="hljs-keyword">group</span> <span class="hljs-title">by</span> 字段<span class="hljs-number">1</span>  （没有跟聚合函数一起使用，查询显示的只是每个分组的第一条记录，没有意义）<br>    正确用法<br>    select count(*),gender from 表名 <span class="hljs-keyword">group</span> <span class="hljs-title">by</span> 字段<span class="hljs-number">1</span><br>    <br></code></pre></td></tr></table></figure><ul><li><p>```<br>group by 和 having 一起使用<br>having 关键字和where关键字作用相同，都用于设置条件表达式对查询结果进行过滤，两者的区别在于，having 关键字可以跟聚合函数，而where 关键字不能。通常情况下having关键字都和group by一起使用，用于对分组后的结果进行过滤、</p><p>例子<br>select sum(grade),gender from student group by gender having sum(grade) &lt; 300<br>该sql 先按gender 进行分组，再筛选出总分小于300的组并显示总分和性别</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```<br>  limit 限制查询结果的数量<br>  limit(开始索引，要几条)  索引默认从<span class="hljs-number">0</span>开始，<span class="hljs-number">0</span>代表第一条记录<br></code></pre></td></tr></table></figure></li><li><p>函数……略过（concat(),if(条件表达式，真返回这个，假返回这个))</p></li><li><p>```<br>为表和字段取别名<br>1.为表取别名<br>select * from 表名 as 别名<br>select * from student as s where s.gender = ‘女’<br>2.为字段取别名<br>select 字段名 as 别名 from 别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-operator">-</span> 多表操作<br><br>  <span class="hljs-operator">-</span> 外键<br><br>    <span class="hljs-operator">-</span> 外键是指引用另外一个表中的一列或多列，被引用的列应该具有主键约束或唯一性约束。外键用于建立和加强两个表之间的连接。<br><br>    <span class="hljs-operator">-</span> 引入外键后，外键列只能插入参照列存在的值。参照列被参照二第值不能被删除，这就保证了数据的参照完整性<br><br>    <span class="hljs-operator">-</span> ```<br>      为表添加外键约束<br>      <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名(从表) <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> 外键名 <span class="hljs-keyword">foreign</span> key(外键字段名) <span class="hljs-keyword">references</span> 主表表名（主键字段名）<br>      <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk foregin key(gid) <span class="hljs-keyword">references</span> grade(id)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>```<br>删除外键约束<br>alter table 表名 drop foreign key 外键名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  -</span> 要删除主表中的数据前得先删除从表中参照主表的数据先<br><br><span class="hljs-bullet">-</span> 连接查询<br><br><span class="hljs-bullet">  -</span> 内连接<br><br><span class="hljs-bullet">  -</span> 交叉连接<br><br></code></pre></td></tr></table></figure><p>select * from 表1 cross join 表2；<br>交叉连接的结果就是两个表中所有数据的组合</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>内连接<br><br><span class="hljs-code">  内连接又称简单连接或自然连接，是一种常见的连接查询。内连接使用比较运算符对两个表中的数据进行比较，并列出与连接条件匹配的数据行、组合成新纪录。也就是说在内连接查询中，只有满足条件的记录才能出现再查询结果中</span><br><br></code></pre></td></tr></table></figure><p>select 查询字段 from 表1 inner join 表2 on（用where也行） 表1.关系字段 = 表2.关系字段</p><pre><code class="hljs">                    实际中inner可省略</code></pre><p>使用where 条件语句实现同样的功能<br>select 表1.字段, 表2.字段 from 表1，表2 where 表1的关系字段 = 表2的关系字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-operator">-</span> 外连接（左连接和右连接）<br><br>  <span class="hljs-operator">-</span> ```<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span>左连接<br>    左连接的结果包括<span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> 子句中指定的左表的所有记录以及所有满足连接条件的记录。如果左表的某条记录在右表中的不存在，则在右表中显示为空(<span class="hljs-keyword">null</span>)<br>    <span class="hljs-keyword">select</span> 表<span class="hljs-number">1.</span>字段，表<span class="hljs-number">2.</span>字段 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 表<span class="hljs-number">1.</span>关系字段 <span class="hljs-operator">=</span> 表<span class="hljs-number">2.</span>关系字段<br></code></pre></td></tr></table></figure><ul><li>```<br>right join右连接 类似左连接<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>  - 复合条件连接查询<br><br>    - 运用<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 之类的关键字<span class="hljs-keyword">or</span> 条件表达式<br><br>- 子查询（套娃）<br><br>  - 子查询是指一个查询语句嵌套在另一个查询语句内部的查询，它可以嵌套在一个 <span class="hljs-keyword">select</span>、<span class="hljs-keyword">select</span> <span class="hljs-keyword">into</span> 、<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 等语句中。在执行查询语句时，首先会执行子查询中的语句，然后将返回的结果作为外层查询的过滤条件，在子查询中通常使用<span class="hljs-keyword">in</span>、<span class="hljs-keyword">exists</span>、<span class="hljs-keyword">any</span>、<span class="hljs-keyword">all</span>操作符<br><br>  - 使用<span class="hljs-keyword">IN</span>关键字的子查询<br><br></code></pre></td></tr></table></figure>select * from 表1 where id in (select gid from 表2 where 条件)<br>从表2中查到id 返回  再通过in关键字筛选出符合的记录<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>    -  带<span class="hljs-keyword">exists</span>关键字的子查询<br><br>      - <span class="hljs-keyword">exists</span>关键字后面的参数可以是任意一个子查询，这个子查询的作用相当于测试，他不产生任何数据，只返回<span class="hljs-keyword">true</span> 或 <span class="hljs-keyword">false</span> 当返回值为<span class="hljs-keyword">true</span> 时，外层查询才会执行<br>        - 注意：当<span class="hljs-keyword">sql</span>语句可以查询到记录时返回<span class="hljs-keyword">true</span><br><br>    - 带<span class="hljs-keyword">any</span>关键字的子查询<br><br>      - <span class="hljs-keyword">any</span> 关键字表示满足其中任意一个条件，它允许创建一个表达式对子查询的返回值列表进行比较，只要满足内层子查询中的任意一个比较条件，就返回一个结果作为外层查询条件<br><br>    - 带<span class="hljs-keyword">all</span>关键字的子查询<br><br>      - <span class="hljs-keyword">all</span>关键字与<span class="hljs-keyword">any</span> 有点类似，只不过带<span class="hljs-keyword">all</span>关键字的子查询返回的结果需同时满足所有内层查询条件<br><br>    - 带比较运算符的子查询<br><br>      - 在前面讲解的<span class="hljs-keyword">any</span>关键字和<span class="hljs-keyword">all</span>关键字的子查询中使用了大于号的比较运算符，子查询中还可以使用其他的比较运算符<br>  <br>- 事务<br><br>  - 开启事务 <span class="hljs-keyword">start</span> transation<br>  - 事务提交 <span class="hljs-keyword">commit</span><br>  - 事务回滚 <span class="hljs-keyword">rollback</span><br><br>- 存储过程<br><br>  - 创建存储过程<br><br>    - ```<br>      <span class="hljs-keyword">delimiter</span> // 定义语句结束符（防止跟存储过程中的<span class="hljs-keyword">sql</span>语句冲突）<br>      <span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> 事务名称(参数列表)<br>      <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">sql</span>语句<br>      <span class="hljs-keyword">end</span> //<br>      <span class="hljs-keyword">delimiter</span> ;<br>      <br></code></pre></td></tr></table></figure></li></ul></li><li><p>```<br>删除存储过程<br>drop procedure 存储名</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><br>- 视图<br><br>  - ```<br>    创建视图<br>    <span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> 视图名 <span class="hljs-keyword">as</span> 指定视图要执行的操作<br>    默认情况下，创建的视图字段名称和基本表的字段名称是一样的，但是也可以是根据实际需要指定视图字段的名称<br>    例<br>    <span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> viewname(字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> 字段<span class="hljs-number">11</span>,字段<span class="hljs-number">22</span> <span class="hljs-keyword">from</span> 表名  <br></code></pre></td></tr></table></figure></li></ul></li><li><p>```<br>查看视图<br>1.使用describe<br>describe 视图名<br>2.使用show create view<br>show create view viewname</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>- ```<br>  修改视图<br>  <span class="hljs-number">1.</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">view</span> viewname <span class="hljs-keyword">as</span> 语句<br>  <span class="hljs-number">2.</span><span class="hljs-keyword">alter</span> <span class="hljs-keyword">view</span> viewname <span class="hljs-keyword">as</span> <br></code></pre></td></tr></table></figure></li><li><pre><code class="hljs">删除视图drop view viewname</code></pre></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniapp踩过的坑</title>
    <link href="/2021/03/14/%E9%82%A3%E4%BA%9B%E5%B9%B4uniapp%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <url>/2021/03/14/%E9%82%A3%E4%BA%9B%E5%B9%B4uniapp%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="clientDB"><a href="#clientDB" class="headerlink" title="clientDB"></a>clientDB</h2><ul><li><p>第一个坑</p></li><li><p>用到in 和 ！1查询时，参数为数组。数组里的字段必须为字符串</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">uniCloud</span><span class="hljs-selector-class">.database</span>()<span class="hljs-selector-class">.collection</span>*()<span class="hljs-selector-class">.where</span>(<span class="hljs-string">&quot;name in [&#x27;小明&#x27;，&#x27;小红&#x27;]&quot;</span>)<br></code></pre></td></tr></table></figure><span id="more"></span>   </li><li><p>为了实现动态传参，直接传个数组进去</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">let arr = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-string">&#x27;小红&#x27;</span>]</span><br>uniCloud<span class="hljs-selector-class">.database</span>().collection*()<span class="hljs-selector-class">.where</span>(<span class="hljs-string">&quot;name in [&quot;</span>+arr+“]”)<br></code></pre></td></tr></table></figure></li><li><p>但是当数组跟字符串拼接时，数组会调用toString()方法转为字符串，就会变成</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">uniCloud<span class="hljs-selector-class">.database</span>().collection*()<span class="hljs-selector-class">.where</span>(<span class="hljs-string">&quot;name in [1，2]&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span>会去掉括号<br></code></pre></td></tr></table></figure></li><li><p>解决办法：去掉括号？那我给你加上</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_quot</span>(<span class="hljs-params">arr</span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;[&#x27;</span> + arr.map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#x27;&quot;</span> + v + <span class="hljs-string">&quot;&#x27;&quot;</span><br>&#125;) + <span class="hljs-string">&#x27;]&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第二个坑  数据库还是类型分明的</p></li><li><p>关于条件运算符</p></li><li><p>==  可以比较字符串和数字</p></li><li><p>&lt;&gt;.、&lt;、&gt;=、&lt;、等均只能比较数字</p></li></ul><ul><li><p>排序</p></li><li><pre><code class="hljs">使用orderBy方法可实现排序，支持多个字段排序，字段之间用，隔开 整体是个字符串类型</code></pre></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 笔记</title>
    <link href="/2021/03/11/vue/"/>
    <url>/2021/03/11/vue/</url>
    
    <content type="html"><![CDATA[<h1 id="B站视频链接"><a href="#B站视频链接" class="headerlink" title="B站视频链接"></a><a href="https://www.bilibili.com/video/BV1xb411L7D6?p=19">B站视频链接</a></h1><p>1.vue的语法格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#div1&quot;</span>,<span class="hljs-comment">//vue的作用范围在该元素内</span><br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-comment">//放数据的地方</span><br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;yang&quot;</span><br><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><span id="more"></span>   <p>2.双花括号是vue的表达式，类似输出语句，可以输出data中的数据<br>3.指令<br>    ①v-bind:属性    用于在html元素的属性上使用表达式双花括号  所有标签可用<br>        注：class和style属性分别可以传数组跟json<br>    ②v-modle  双向数据更新？     使用于输入型组件<br>    ③v-text和v-html<br>        <span>呵呵<span></p><pre><code class="hljs">    v-text 用于输出text文本    呵呵    v-html 用于输出html文本④v-on:事件  事件绑定  简写@事件⑤v-show和v-if   值为true时显示，反之显示，区别：v-if是删除一个元素，v-show是隐藏一个元素⑥v-pre 预编译  跳过vue的解析⑦v-bloak  加载阶段隐藏vue代码  事先得手动加隐藏代码</code></pre><p>4.事件修饰符<br>    once  只执行一次<br>    stop  阻止事件冒泡<br>    prevent 阻止默认事件<br>    native  原生事件：调用原生js代码<br>    keyCode 键盘编号，可以跟keydown之类的配合 例如：@keydown.enter 和 @keydown.13 效果一样<br>    self<br>    capture<br>    用法 @click.stop = fn</p><pre><code class="hljs">computed组件    1.缓存    2.方便    在computed对象中，函数都有get方法和set方法,分别可以设置和获取</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;div1&quot;&gt;<br>姓：&lt;input type=&quot;text&quot; v-model=&#x27;familyName&#x27;&gt;&lt;br /&gt;<br>名：&lt;input type=&quot;text&quot; v-model=&#x27;ContentName&#x27;&gt;&lt;br /&gt;<br>姓名：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;<br>&lt;/div&gt;<br><br>///vue<br>computed:&#123;<br>name:&#123;<br>get()&#123;<br>return this.familyName + this.ContentName<br>&#125;,<br>set(value)&#123;<br>this.familyName = value[0]<br>this.ContentName = value.substring(1)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>watch 组件  直接以要监听的属性/对象名称作为一个方法名称添加到watch对象中,类似oninput</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">姓名：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;<br>///vue<br>data:&#123;<br>//放数据的地方<br>name:&quot;张三&quot;<br>&#125;,<br>watch:&#123;<br>name()&#123;<br>console.log(&quot;改变了&quot;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Vue路由<br>    1.路由容器：放置路由地址对应的内容，router-view容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-view&gt;<br><br>&lt;/router-view&gt;<br></code></pre></td></tr></table></figure><p>2.路由表：设置地址和地址指向的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">let router = new VueRouter(&#123;<br>routes:[<br>&#123;path:&#x27;/a&#x27;,component:&#123;template:&quot;&lt;div&gt;aaa&lt;/div&gt;&quot;&#125;&#125;,<br>&#123;path:&#x27;/b&#x27;,component:&#123;template:&quot;&lt;div&gt;bbb&lt;/div&gt;&quot;&#125;&#125;,<br>&#123;path:&#x27;/c&#x27;,component:&#123;template:&quot;&lt;div&gt;ccc&lt;/div&gt;&quot;&#125;&#125;<br>]<br>&#125;)<br></code></pre></td></tr></table></figure><p>3.命名路由<br>    添加路由地址的时候加上name属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">let router = new VueRouter(&#123;<br>routes:[<br>&#123;path:&#x27;/news&#x27;,name:&#x27;news&#x27;,component:&#123;template:&quot;&lt;div&gt;news&lt;/div&gt;&quot;&#125;&#125;,<br>&#123;path:&#x27;/user&#x27;,name:&#x27;user&#x27;,component:&#123;template:&quot;&lt;div&gt;user&lt;/div&gt;&quot;&#125;&#125;,<br>&#123;path:&#x27;/index&#x27;,name:&#x27;index&#x27;,component:&#123;template:&quot;&lt;div&gt;index&lt;/div&gt;&quot;&#125;&#125;<br>]<br>&#125;)<br></code></pre></td></tr></table></figure><p>4.路由参数<br>    /:id 跟koa-router相似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">routes:[<br>&#123;path:&#x27;/news/:id&#x27;,name:&#x27;news&#x27;,component:&#123;template:&quot;&lt;div&gt;新闻id&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&quot;&#125;&#125;,<br>]<br></code></pre></td></tr></table></figure><p>5.通过路由参数跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">方法一：<br>&lt;router-link to=&quot;/news/22121&quot; class=&quot;nav&quot;&gt;页面一&lt;/router-link&gt;<br>方法二：<br>&lt;router-link :to=&quot;&#123;name:&#x27;news&#x27;,params:&#123;id:128912&#125;&#125;&quot; class=&quot;nav&quot;&gt;页面一&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><p>6.通过js跳转 $router对象<br>this.$router.push(string|object)  入栈<br>this.$router.replace(string|object)  替换最后一个历史记录 也就是当前的记录<br>this.$router.go(int)        -1 后退  1 前进<br>7.$route和$router<br>    $route路由的信息<br>    $router 这是方法<br>8.命名视图 给router-view 加name<br>    components里放不同名称对应不同的组件<br>    compoents:[<br>    ]<br>9.component组件(也就是小的vm对象,一样有data、methods、computed、watch、template、components等属性)</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lasso">组件<span class="hljs-number">1.0</span>写法<br>全局组件注册<br>Vue.component(<span class="hljs-string">&#x27;组件名&#x27;</span>,&#123;<br>组件对象的内容<br>&#125;)<br><br>局部组件注册(加在components属性上)<br><span class="hljs-literal">new</span> Vue(&#123;<br>el:<span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-built_in">data</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>components:&#123;<br><span class="hljs-string">&quot;组件名称&quot;</span>:&#123;<br>组件内容<br>&#125;<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml">组件2.0写法<br>封装在.vue文件中，编译后还是回到1.0的写法，只是更方便了（语法糖）<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> Table <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/table.vue&#x27;</span></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">Table</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>11.父子组件通信</p><ul><li><p>父组件给子组件传递</p><ul><li>通过标签属性传递<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">现有子组件<span class="hljs-built_in">test</span><br>&lt;<span class="hljs-built_in">test</span> name=<span class="hljs-string">&quot;name&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></li><li>通过vm对象的props属性接收<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">export</span> <span class="hljs-keyword">default</span> &#123;<br>props:[&#x27;name&#x27;]  //会绑定到<span class="hljs-class"><span class="hljs-keyword">data</span>对象上，和平时使用数据一样</span><br><span class="hljs-class"><span class="hljs-keyword">data</span>()&#123;</span><br><span class="hljs-class"><span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#125;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>子组件调用父组件的数据</p><ul><li>父组件通过子组件的属性把自身的this暴露过去</li><li>子组件通过props 接收暴露过来的this来操作父组件的属性方法</li></ul></li></ul><p>12.子组件的插槽</p><ul><li>普通插槽  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>调用子组件时标签内的内容会再此显示<br></code></pre></td></tr></table></figure></li><li>具名插槽  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;名字&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>具名插槽、会显示带有名字的标签内的内容<br></code></pre></td></tr></table></figure></li></ul><p>13.vuex</p><ul><li>state   放数据</li><li>mutations 方法，同步</li><li>actions 方法，异步</li><li>getters 获取state?  类似computed</li></ul><p>mapState —&gt; computed</p><p>mapActions —-&gt;   methods</p><p>mapGetters   —&gt;computed</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>boostrap 笔记2</title>
    <link href="/2020/12/01/bootstrap/"/>
    <url>/2020/12/01/bootstrap/</url>
    
    <content type="html"><![CDATA[<h1 id="bootstrap-–学会看源码"><a href="#bootstrap-–学会看源码" class="headerlink" title="bootstrap    –学会看源码"></a>bootstrap    –学会看源码</h1><ul><li><p>视口·</p><ul><li>```<br>窗口自适应<meta name="viewport" content="width=device-width,initial-scale=1"><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>- bootstrap3<br><br>  - 网格系统<br><br>    - 固定宽度 container  /全屏宽度 container-fluid<br><br>    - 响应式网格系统随着屏幕或者视口尺寸的增加，系统最多分成<span class="hljs-number">12</span>列<br><br>    - 各种尺寸<br>    <br>      - ```<br>        //bootstrap3<br>        .<span class="hljs-keyword">col</span>-xs 小于<span class="hljs-number">768</span>px<br>        .<span class="hljs-keyword">col</span>-<span class="hljs-keyword">sm</span> 大于等于<span class="hljs-number">768</span>px<br>    .<span class="hljs-keyword">col</span>-md  大于等于<span class="hljs-number">992</span>px<br>        .<span class="hljs-keyword">col</span>-<span class="hljs-keyword">lg</span>- 大于<span class="hljs-number">1200</span>px<br>    <br>        <br>        //bootstrap4<br>        .<span class="hljs-keyword">col</span>-  所有<br>        .<span class="hljs-keyword">col</span>-<span class="hljs-keyword">sm</span>&gt;=<span class="hljs-number">556</span><br>        .<span class="hljs-keyword">col</span>-md&gt;=<span class="hljs-number">768</span><br>        .<span class="hljs-keyword">col</span>-<span class="hljs-keyword">lg</span>&gt;=<span class="hljs-number">992</span><br>        .<span class="hljs-keyword">col</span>-xl&gt;=<span class="hljs-number">1200</span><br></code></pre></td></tr></table></figure>    </li></ul></li><li><p>常用类</p><ul><li>row   主要作用：创建一个弹性盒子</li><li>col-**-**   满足该类的定义尺寸时按照定义的来，不满足时会设置宽度100%，即弹性子元素会拉满屏幕</li><li>offset-**-n  偏移n列，通过设置元素的margin-left来实现该功能</li></ul></li><li><p>文字排版</p><ul><li><p>bootstrap4默认的font-size 为16px,line-height为1.5，所有的p元素 margin-top:0,margin-bottem:1em</p></li><li><p>h1~h6 大概就居中对齐的样子</p></li><li><p>display-n   n取(1-4)  定义更大更粗的字体</p></li><li><p>font 相关</p><ul><li>```<br>font-weight-bold 加粗<br>font-weight-normal 普通文本<br>font-weight-light  更细的文本<br>font-italic    斜体文本<br>lead 让段落更突出<br>small 更小的文本<br>text-left 左对齐<br>text-center 居中<br>text-right  右对齐<br>text-justify 设定文本对齐，段落中超出屏幕的部分文字自动换行  对标css中的text-align-justify  –两端文本对齐<br>text-nowrap  超出屏幕不换行    对标css white-space:nowrap<br>text-lowercase 转小写    对标css text-transform:lowercase<br>text-uppercase 转大写    对标css text-transform:uppercase<br>list-unstyled    移除默认的列表样式    css代码为padding-left:0;list-style:none<br>list-inline    :将所有列表项放置同一行   bootstrap3生效<br>list-inline-item    css代码为display:inline-block<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> 颜色相关<br><br><span class="hljs-bullet">  -</span> Bootstrap 4 提供了一些有代表意义的颜色类：<span class="hljs-strong">**.text-muted**</span>, <span class="hljs-strong">**.text-primary**</span>, <span class="hljs-strong">**.text-success**</span>, <span class="hljs-strong">**.text-info**</span>, <span class="hljs-strong">**.text-warning**</span>, <span class="hljs-strong">**.text-danger**</span>, <span class="hljs-strong">**.text-secondary**</span>, <span class="hljs-strong">**.text-white**</span>, <span class="hljs-strong">**.text-dark**</span> and <span class="hljs-strong">**.text-light**</span>:<br><br><span class="hljs-bullet">  -</span> 提供背景颜色的类有: <span class="hljs-strong">**.bg-primary**</span>, <span class="hljs-strong">**.bg-success**</span>, <span class="hljs-strong">**.bg-info**</span>, <span class="hljs-strong">**.bg-warning**</span>, <span class="hljs-strong">**.bg-danger**</span>, <span class="hljs-strong">**.bg-secondary**</span>, <span class="hljs-strong">**.bg-dark**</span> 和 <span class="hljs-strong">**.bg-light**</span>。<br><br><span class="hljs-code">    注意背景颜色不会设置文本的颜色，在一些实例中你需要与 **.text-\*** 类一起使用。</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> 表格<br><br><span class="hljs-bullet">  -</span> 基础表格样式table<br><span class="hljs-bullet">  -</span> 条纹表格 table-striped<br><span class="hljs-bullet">  -</span> 带边框表格  table-bordered<br><span class="hljs-bullet">  -</span> 鼠标悬停  table-hover<br><span class="hljs-bullet">  -</span> 黑色背景  table-dark<br><span class="hljs-bullet">  -</span> 黑色条纹表格     table-dark/table-striped<br><span class="hljs-bullet">  -</span> 鼠标悬停+黑色背景  table-dark  table-hover<br><span class="hljs-bullet">  -</span> 表格颜色<br><span class="hljs-bullet">    -</span> table-primary<br><span class="hljs-bullet">    -</span> table-success<br><span class="hljs-bullet">    -</span> table-danger<br><span class="hljs-bullet">    -</span> table-info<br><span class="hljs-bullet">    -</span> table-warning<br><span class="hljs-bullet">    -</span> table-active<br><span class="hljs-bullet">    -</span> table-secondary<br><span class="hljs-bullet">    -</span> table-light<br><span class="hljs-bullet">    -</span> table-dark<br><span class="hljs-bullet">  -</span> table-sm 较小的表格<br><span class="hljs-bullet">  -</span> 响应式表格  table-responsive  在屏幕宽度小于992px时会创建水平滚动条<br><span class="hljs-bullet">    -</span> 设置指定屏幕宽度下显示滚动条<br><span class="hljs-bullet">      -</span> table-responsive-sm小于576<br><span class="hljs-bullet">      -</span> table-responsive-md   小于768<br><span class="hljs-bullet">      -</span> table-responsive-lg       小于992<br><span class="hljs-bullet">      -</span> table-responsive-xl      小于1200<br><br><span class="hljs-bullet">-</span> 图像形状<br><br><span class="hljs-bullet">  -</span> rounded  可以让图片显示圆角效果<br><br><span class="hljs-bullet">  -</span> rounded-circle  设置椭圆形图片<br><br><span class="hljs-bullet">  -</span> 缩略图   img-thumbnail  设置图片缩略图<br><br><span class="hljs-bullet">  -</span> float-right  图片右对齐<br><br><span class="hljs-bullet">  -</span> float-left  设置图片左对齐<br><br><span class="hljs-bullet">  -</span> 响应式图片   <br><br><span class="hljs-bullet">    -</span> img-fluid设置响应式图片  <br><br><span class="hljs-bullet">    -</span> <span class="hljs-code">```</span><br><span class="hljs-code">      img-fluid 本质css</span><br><span class="hljs-code">      &#123;</span><br><span class="hljs-code">      max-width:100%;</span><br><span class="hljs-code">      height:auto;</span><br><span class="hljs-code">      &#125;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Jumbotron</p><ul><li>jumbotron  创建一个大的灰色背景框  有圆角，里面可以放一些html标签，也可以是bootstrap的元素如果你想创建一个没有圆角的全屏幕，可以在jumbotron-fluid里添加container或container-fluid类来实现</li></ul></li><li><p>提示框</p><ul><li><p>alert类</p></li><li><p>alert-主要颜色，可更改背景颜色</p></li><li><p>alert-link  链接</p></li><li><p>关闭提示框</p><ul><li>```<br>我们可以再提示框的div中添加.alert-dismissible 然后在关闭按钮链接的链接上加上close类和data-dismiss=’alert’属性来设置提示框的关闭操作<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs haml">  <br>-<span class="ruby"> 淡入淡出效果 添加fade show 类</span><br><span class="ruby"></span>  <br>-<span class="ruby"> 按钮</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> 基本按钮 btn</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> btn-primary 主要按钮</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> btn-secondary 次要按钮</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> btn-success 成功</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> btn-info 信息</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> btn-warning 警告</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> btn-danger 危险</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> btn-dark 黑色</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> btn-light 浅色</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> btn-link 链接</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> 按钮类可用于a,button或input元素上</span><br><span class="ruby"></span>  <br>  -<span class="ruby"> 按钮设置边框</span><br><span class="ruby"></span>  <br>    -<span class="ruby"> <span class="hljs-string">``</span><span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="ruby"></span></span>        btn-outline-不同颜色<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>不同大小的按钮</p><ul><li>btn-lg 大号按钮<ul><li>btn-sm 小号按钮</li></ul></li></ul></li><li><p>块级按钮  .btn-block</p></li><li><p>激活和禁用的按钮  .active类可以设置按钮是可用的，disable 属性是设置禁用的</p><ul><li>注意：a标签需添加.disable类来设置禁用项</li></ul></li></ul></li><li><p>按钮组</p><ul><li>bootstrap4中允许我们将按钮放在同一行<ul><li>可以在div元素上添加.btn-group 类来创建按钮组</li><li>设置按钮组大小的类 btn-group-sm|lg</li><li>垂直按钮组  btn-group-vertical</li><li>按钮组的下拉菜单  略</li></ul></li></ul></li><li><p>Badges  徽章主要用于突出新的或未读的的项  </p><ul><li>badge + 上带有指定意义的颜色类<ul><li>药丸形状徽章  badge-pill</li></ul></li></ul></li><li><p>进度条</p><ul><li>父类  progress<ul><li>子类 progress-bar   修改子元素的width百分比</li><li>条纹进度条 progress-bar-striped</li><li>动画进度条 progress-bar-animated</li><li>混合色彩进度条<ul><li>创建多个progress-bar,设置不同的背景颜色</li></ul></li></ul></li></ul></li><li><p>分页  pagination</p><ul><li><p>要创建一个基本的分页可以在ul元素上添加 .pagination类。然后在li元素上添加.page-item类</p><ul><li>分页显示大小  pagination-lg设置大字体  pagination-sm  设置小字体</li></ul></li><li><p>列表组</p><ul><li>要创建列表组，可以在ul元素上添加.list-group类，在li元素上添加.list-group-item类</li><li>禁用列表项 .disabled</li><li>鼠标悬停的效果类  list-group-item-action</li><li>颜色设置类  list-group-item-颜色</li></ul></li><li><p>卡片(card)</p><ul><li>我们可以通过.card与.card-body类来创建一个简单的卡片</li><li>.card-header  头部,.card-body 内容,.card-footer底部</li><li>卡片可以通过bg-*类来改变颜色</li><li>.card-title设置卡片的标题</li><li>.card-link 给卡片内的链接来使用</li><li>图片卡片<ul><li>我们可以给img添加.card-img-top（图片在文字上面）或.card-img-bottom（图片在文字下面）</li><li>如果图片要设置成背景，给文字容器添加.card-img-overlay类</li></ul></li></ul></li><li><p>下拉菜单</p><ul><li>下拉菜单依赖于poper.min.js</li><li>.dropdown 创建一个下拉菜单 源码作用是创建一个相对定位</li><li>.dropdown-menu 创建一个下拉菜单列表，用于放下拉菜单的选项</li><li>实现下拉菜单效果需要加data-toggle=’dropdown’属性</li><li>.dropdown-toggle 可以添加一个三角形图标</li><li>.dropdown-item  放在dropdown-menu里，类似li元素的效果</li><li>下拉菜单中的分割线  .dropdown-divider  创建一个水平的分割线</li><li>.dropdown-header 下拉菜单中的标题</li><li>可用项active  禁用项 disabled</li><li>下拉菜单的右对齐  dropdown-menu-right</li><li>设置下拉菜单不同的弹出方向  默认dropdown向下弹出</li><li>dropright 向右弹出</li><li>dropup 向上弹出</li><li>dropleft 向左弹出</li></ul></li><li><p>表单</p><ul><li>form-group类  表单组？</li><li>form-control   变成块级元素，width:100%</li><li>form-inline  创建弹性盒子 ,换行，flex-align:center;align-items:center;width:100%</li><li>form-chexk-input</li><li>form-check-label</li><li>form-check-inline 类可以让选项显示在同一行上</li><li>radio 单选框</li><li>radio-inline  可以让选项显示在同一行</li><li>form-group</li><li>lable的for属性表示与某个表单元素绑定，值为表单元素的id</li></ul></li><li><p>折叠</p><ul><li><p>折叠可以很容易的实现内容的显示与隐藏</p></li><li><p>collapse类用于指定一个折叠元素；点击按钮后会在隐藏于显示之间切换</p></li><li><p>控制内容的隐藏与显示，需要在a或button元素上添加data-toggle=’collapse’属性</p></li><li><p>data-target=’id’对应要显示隐藏内容的id</p></li><li><p>代码示例</p><ul><li>```<div class='container'>    <a href="" data-toggle='collapse' data-target='#demo'>折叠</a>    <div class='collapse' id="demo">        被折叠的内容    </div></div><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs haml"><br>  -<span class="ruby"> data-parent属性来确保所有的折叠元素在指定的父元素下，这样就能是现在一个折叠选项显示时其他选项就隐藏</span><br><span class="ruby"></span><br>-<span class="ruby"> 导航nav</span><br><span class="ruby"></span><br>  -<span class="ruby"> 创建一个简单的导航，可以在ul元素上添加.nav类，再每个li选项上添加.nav-item类，在连接上添加.nav-link类</span><br><span class="ruby"></span>  -<span class="ruby"> 导航的对齐方式</span><br><span class="ruby"></span>    -<span class="ruby"> 居中显示 justify-content-center</span><br><span class="ruby"></span>    -<span class="ruby"> 导航右对齐 justify-content-right</span><br><span class="ruby"></span>    -<span class="ruby"> 垂直导航 flex-column</span><br><span class="ruby"></span>  -<span class="ruby"> 选项卡    在.nav类的基础上加上nav-tabs</span><br><span class="ruby"></span>  -<span class="ruby"> 胶囊导航  在nav的基础上加上nav-pills</span><br><span class="ruby"></span>  -<span class="ruby"> 导航等宽  .nav-justified类可以设置导航项齐行等宽显示</span><br><span class="ruby"></span>  -<span class="ruby"> 胶囊下拉菜单  添加下拉菜单到导航的某个选项上</span><br><span class="ruby"></span>  -<span class="ruby"> 选项卡下拉菜单 同上</span><br><span class="ruby"></span>  -<span class="ruby"> 动态选项卡</span><br><span class="ruby"></span>    -<span class="ruby"> 给选项加.data-toggle=<span class="hljs-string">&#x27;tab&#x27;</span></span><br><span class="ruby"></span>    -<span class="ruby"> 给个div,添加tab-content类，里面放的元素id跟上面的对应并添加tab-pane类</span><br><span class="ruby"></span><br>-<span class="ruby"> 导航栏</span><br><span class="ruby"></span><br>  -<span class="ruby"> 我们可以使用.navbar来创建一个标准的导航栏 后面紧跟.navbar-expand-xl<span class="hljs-params">|md|</span>sm类来创建响应式导航栏(大屏幕铺开，小屏幕垂直堆叠)</span><br><span class="ruby"></span>  -<span class="ruby"> 导航栏的上的选项可以使用ul元素并添加<span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">navbar</span>-<span class="hljs-title">nav</span>“类，然后再<span class="hljs-title">li</span>元素上添加<span class="hljs-title">nav</span>-<span class="hljs-title">item</span>类，<span class="hljs-title">a</span>元素上使用.<span class="hljs-title">nav</span>-<span class="hljs-title">link</span>类</span></span><br><span class="ruby"></span>  -<span class="ruby"> .navbar-brand 高亮显示品牌</span><br><span class="ruby"></span>  -<span class="ruby"> 折叠导航栏 navbar-collapse类，navbar-toggler类</span><br><span class="ruby"></span>  -<span class="ruby"> 导航栏文本 navbar-text</span><br><span class="ruby"></span>  -<span class="ruby"> 固定导航栏 fixed-top/fixed-bottom 固定顶部/固定底部</span><br><span class="ruby"></span>  <br>-<span class="ruby"> 模态框（modal）</span><br><span class="ruby"></span><br>  -<span class="ruby"> modal定义一个模态框</span><br><span class="ruby"></span>  -<span class="ruby"> modal-dialog定义弹出的框，内容都放在该容器下</span><br><span class="ruby"></span>  -<span class="ruby"> modal-header 模态框头部 / modal-title</span><br><span class="ruby"></span>  -<span class="ruby"> modal-body  模态框内容</span><br><span class="ruby"></span>  -<span class="ruby"> modal-footer 模态框底部</span><br><span class="ruby"></span>  -<span class="ruby"> modal-sm 小模态框</span><br><span class="ruby"></span>  -<span class="ruby"> modal-lg 大模态框</span><br><span class="ruby"></span>  -<span class="ruby"> </span><br><span class="ruby"></span><br>-<span class="ruby"> 提示框</span><br><span class="ruby"></span><br>  -<span class="ruby"> 通过向元素添加data-toggle=<span class="hljs-string">&#x27;tooltip&#x27;</span>来创建提示框，title属性为提示款显示的内容</span><br><span class="ruby"></span><br>  -<span class="ruby"> <span class="hljs-string">``</span><span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="ruby"></span></span>    &lt;a href=&quot;#&quot; data-toggle=&#x27;tooltip&#x27; title=&quot;提示的文字&quot;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>注意：提示框生效要调用tootip()方法</p></li><li><p>data-placement 设定显示的方向 top/bottom/left/right</p></li><li><p>提示的内容添加html标签 设置 data-html=’true</p></li></ul></li><li><p>弹出框</p><ul><li>向元素添加data-toggle=’popover’来创建弹出框，当点击的时候出现内容</li><li>title属性为弹出框的标题，data-content为弹出框的文本内容</li><li>注意：弹出框生效需要调用popover方法</li><li>data-placement可以设置弹出框显示的方向 top/bottom/left/right</li><li>设置再次点击弹出框消失的属性 data-trigger=’focus’</li><li>鼠标移到元素上显示，一处小时 data-trigger=’hover’</li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>h5 和 CSS3</title>
    <link href="/2020/11/27/html5%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/"/>
    <url>/2020/11/27/html5%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML5的新语义标签"><a href="#HTML5的新语义标签" class="headerlink" title="HTML5的新语义标签"></a>HTML5的新语义标签</h2><h3 id="块级标签"><a href="#块级标签" class="headerlink" title="块级标签"></a>块级标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">header</span><br><span class="hljs-selector-tag">section</span><br><span class="hljs-selector-tag">footer</span><br><span class="hljs-selector-tag">aside</span><br><span class="hljs-selector-tag">nav</span><br><span class="hljs-selector-tag">main</span><br><span class="hljs-selector-tag">article</span><br><span class="hljs-selector-tag">figure</span><br></code></pre></td></tr></table></figure><h3 id="为HTML添加新元素"><a href="#为HTML添加新元素" class="headerlink" title="为HTML添加新元素"></a>为HTML添加新元素</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">创建新元素 myHero</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml">myHero</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">定义新标签的样式</span><br><span class="hljs-template-variable">&#125;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="新的多媒体标签"><a href="#新的多媒体标签" class="headerlink" title="新的多媒体标签"></a>新的多媒体标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">audio</span>  定义音频内容<br><span class="hljs-selector-tag">video</span>  定义视频<br>source 定义多媒体资源&lt;<span class="hljs-selector-tag">video</span><br>embed  定义嵌入的内容，比如插件<br>track  <br></code></pre></td></tr></table></figure><h4 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h4><p>属性</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">autoplay音频就绪后马上播放<br>controls显示控件<br><span class="hljs-keyword">loop</span>音频结束时重新开始播放<br>muted经营<br>preload音频加载方式<br>src<br></code></pre></td></tr></table></figure><h3 id="新增表单元素"><a href="#新增表单元素" class="headerlink" title="新增表单元素"></a>新增表单元素</h3><h5 id="datalist-与input元素配合使用"><a href="#datalist-与input元素配合使用" class="headerlink" title="datalist 与input元素配合使用"></a>datalist 与input元素配合使用</h5><p>例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;list1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list1&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><p>keygen 密钥对生成器</p><p>output 可以实时计算简单的数字？</p><h5 id="details和summary配合使用"><a href="#details和summary配合使用" class="headerlink" title="details和summary配合使用"></a>details和summary配合使用</h5><p>summary定义标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>这是标题<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="figure-用来放图片的容器"><a href="#figure-用来放图片的容器" class="headerlink" title="figure 用来放图片的容器"></a>figure 用来放图片的容器</h5><h6 id="figcaption-定义图片的标题"><a href="#figcaption-定义图片的标题" class="headerlink" title="figcaption 定义图片的标题"></a>figcaption 定义图片的标题</h6><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h3 id="选择器并行的写法"><a href="#选择器并行的写法" class="headerlink" title="选择器并行的写法"></a>选择器并行的写法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.class</span>&#123;<br><span class="hljs-attribute">text-align</span>:center;<br>&#125;<br><span class="hljs-selector-tag">p</span>标签并且有个类为class<br></code></pre></td></tr></table></figure><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><h4 id="background-color-背景颜色"><a href="#background-color-背景颜色" class="headerlink" title="background-color  背景颜色"></a>background-color  背景颜色</h4><h4 id="background-image-背景图片"><a href="#background-image-背景图片" class="headerlink" title="background-image    背景图片"></a>background-image    背景图片</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">图片路径</span>)<br></code></pre></td></tr></table></figure><h4 id="background-repeat-背景平铺-repeat-x-repeat-y"><a href="#background-repeat-背景平铺-repeat-x-repeat-y" class="headerlink" title="background-repeat    背景平铺 repeat-x/repeat-y"></a>background-repeat    背景平铺 repeat-x/repeat-y</h4><h4 id="background-postion-设置图片位置"><a href="#background-postion-设置图片位置" class="headerlink" title="background-postion    设置图片位置"></a>background-postion    设置图片位置</h4><p>例 right top 右上角</p><p>background-position:x y        x轴 y轴的值</p><h4 id="background的简写"><a href="#background的简写" class="headerlink" title="background的简写"></a>background的简写</h4><p>background:color image repeat postion</p><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><p>color定义文字颜色</p><p>对齐方式text-align属性</p><p>属性值</p><ul><li>center</li><li>right/left</li><li>justify 每一行被展开为宽度相等，左右外边距是对齐</li></ul><h4 id="文本修饰符-text-decoration"><a href="#文本修饰符-text-decoration" class="headerlink" title="文本修饰符 text-decoration"></a>文本修饰符 text-decoration</h4><p>text-decoration属性</p><p>值</p><ul><li>overline 上划线</li><li>line-through 中划线</li><li>underline 下划线</li></ul><h4 id="文本转换（大小写转换）"><a href="#文本转换（大小写转换）" class="headerlink" title="文本转换（大小写转换）"></a>文本转换（大小写转换）</h4><p>text-transform属性</p><ul><li>uppercase 转大写</li><li>lowercase 转小写</li><li>capitalize 首字母大写</li></ul><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><p>text-indent:2em;</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>direction 文本方向 ltr(left to right) / rtl(right to left)</li><li>line-height 行高</li><li>text-shadow 文本阴影</li><li>vertical-align 垂直对齐的方式</li><li>white-space 空白怎么处理 nowrap 不换行</li></ul><h3 id="字体font"><a href="#字体font" class="headerlink" title="字体font"></a>字体font</h3><h4 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h4><p>指定文本的字体</p><h4 id="font-size字体"><a href="#font-size字体" class="headerlink" title="font-size字体"></a>font-size字体</h4><p>设置字体大小</p><h4 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h4><p>值：normal 正常/italic 斜体 / oblique 倾斜的字体样式 / inherit 继承父元素 </p><h3 id="css-链接的样式-伪类？"><a href="#css-链接的样式-伪类？" class="headerlink" title="css 链接的样式 伪类？"></a>css 链接的样式 伪类？</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> 未访问链接<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> 已访问链接<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>链接移动到链接上<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> 鼠标点击时<br>注意：<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>必须在<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> 和 <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> 之后，需要按严格顺序才能看到效果<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>必须在<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> 之后<br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表-ul"><a href="#无序列表-ul" class="headerlink" title="无序列表 ul"></a>无序列表 ul</h4><h4 id="有序列表-ol"><a href="#有序列表-ol" class="headerlink" title="有序列表 ol"></a>有序列表 ol</h4><h5 id="list-style属性"><a href="#list-style属性" class="headerlink" title="list-style属性"></a>list-style属性</h5><ul><li>list-style-type: circle(圆点)/square(方形)</li><li>list-style-image:url(图片地址)    自定义图标</li><li>list-style-position:  inside 放在文本以内，outside 图标放置在文本外，inherit 继承父元素</li></ul><h3 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框border</h3><ul><li>border-style: </li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">none</span>/<br><span class="hljs-attribute">dotted</span> 点线边框 <br><span class="hljs-attribute">dashed</span> 虚线边框 <br><span class="hljs-attribute">solid</span> 实线边框 <br><span class="hljs-attribute">double</span> 两个边框<br><span class="hljs-attribute">groove</span> 定义<span class="hljs-number">3</span>D沟槽边框<br><span class="hljs-attribute">ridge</span> 定义<span class="hljs-number">3</span>D脊边框<br><span class="hljs-attribute">inset</span> 定义一个<span class="hljs-number">3</span>D的嵌入边框<br><span class="hljs-attribute">outset</span> 定义一个<span class="hljs-number">3</span>D突出边框<br></code></pre></td></tr></table></figure><ul><li><p>border-width 边框宽度</p></li><li><p>border-color 边框颜色</p><p>边框颜色必须配合border-style一起使用</p><h4 id="边框-单独设置各边"><a href="#边框-单独设置各边" class="headerlink" title="边框-单独设置各边"></a>边框-单独设置各边</h4><ul><li>border-top-style</li><li>border-right-style</li><li>border-bottom-style</li><li>border-left-style</li><li>简写 border-style:上右下左</li></ul></li></ul><h4 id="边框简写"><a href="#边框简写" class="headerlink" title="边框简写"></a>边框简写</h4><ul><li>border:width style color</li></ul><h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓-outline"></a>轮廓-outline</h3><ul><li><p> style width</p></li><li><p>outline-color 设置颜色</p></li><li><p>outline-style 设置轮廓样式</p></li><li><p>outline-width 设置轮廓的宽度</p></li></ul><h3 id="margin-外边距"><a href="#margin-外边距" class="headerlink" title="margin 外边距"></a>margin 外边距</h3><h3 id="padding-内边距"><a href="#padding-内边距" class="headerlink" title="padding 内边距"></a>padding 内边距</h3><h3 id="css-尺寸"><a href="#css-尺寸" class="headerlink" title="css 尺寸"></a>css 尺寸</h3><ul><li>height 元素的高度</li><li>line-height 设置行高</li><li>max-height 设置元素的最大高度</li><li>max-width 设置元素的宽度的最大宽度</li><li>min-height 设置元素的最小高度</li><li>min-width 设置元素的最小宽度</li><li>width 设置元素的宽度</li></ul><p>max和min 就是用来限制js来修改样式而设置的临界值？</p><h3 id="css显示"><a href="#css显示" class="headerlink" title="css显示"></a>css显示</h3><ul><li>display :none    表示隐藏该元素 隐藏后不占用空间</li><li>visibility:hidden; 表示隐藏该元素 隐藏后占用空间</li></ul><h3 id="css-定位"><a href="#css-定位" class="headerlink" title="css 定位"></a>css 定位</h3><h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><p>值</p><ul><li>static  html 的默认值，即没有定位，遵循正常的文档流对象</li><li>fixed   元素的位置相对于浏览器窗口是固定位置，即使窗口滚动的它也不会移动<ul><li>fixed定位是使元素的位置与文档流无关，因此不占据空间。</li><li>fixed定位的元素和其他元素重叠</li></ul></li><li>relative 定位  相对定位元素的定位是相对于其正常位置<ul><li>移动相对定位元素，但他原本占据的空间不会改变</li><li>相对定位元素经常被用来作为绝对定位元素的容器块</li></ul></li><li>absolute 定位 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对与<html><ul><li>absolute定位使元素的位置与文档流无关，因此不占据空间</li><li>absolute定位的元素与其他元素重叠</li></ul></li><li>sticky定位 粘性定位  基于用户的滚动位置来定位<ul><li>粘性定位的元素依赖于用户的滚动，在relative与fixed定位之间切换 </li><li>它的行为就像relative,当页面滚动超出目标区域使。它的表现就像fixed 他会固定在目标位置</li></ul></li><li>重叠的元素  z-index修改显示优先？</li><li>相关<ul><li>bottom</li><li>clip  拥有绝对定位的元素可添加该属性</li><li>cursor 显示光标移动到该元素所显示指定的类型<ul><li>default 一个箭头</li><li>auto 默认</li><li>crosshair 十字线</li><li>pointer 一只手</li><li>move  指示某对象可移动（一个表示可移动的图标）</li><li>wait 加载中</li><li>text 文本</li></ul></li></ul></li></ul><h3 id="css-overflow"><a href="#css-overflow" class="headerlink" title="css overflow"></a>css overflow</h3><p>值</p><ul><li>overflow:visible 默认值，内容不会被修剪，呈现在元素框外</li><li>overflow:hidden 内容会被修剪，并且其余内容不可见</li><li>overflow:scroll  内容会被修剪，并且显示滚动条</li><li>overflow:auto 如果内容被修剪，则显示滚动条</li><li>overflow:inherit  继承父类</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CSS3</tag>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3 总结</title>
    <link href="/2020/11/18/css3/"/>
    <url>/2020/11/18/css3/</url>
    
    <content type="html"><![CDATA[<h3 id="定义自定义字体"><a href="#定义自定义字体" class="headerlink" title="定义自定义字体"></a>定义自定义字体</h3><p>@font-face{</p><p>​    font-family:自定义字体名;</p><p>​    src:url()</p><p>}</p><h3 id="使用自定义字体"><a href="#使用自定义字体" class="headerlink" title="使用自定义字体"></a>使用自定义字体</h3><p>font-family:字体名字</p><h3 id="css3-多列"><a href="#css3-多列" class="headerlink" title="css3 多列"></a>css3 多列</h3><p>浏览器前缀</p><p>-webkit-  /* Chrome,Safari, Opear*/</p><p>-moz-   /<em>Firefox</em>/</p><ul><li>column-count 属性指定了需要分割的列数</li><li>column-gap  属性指定了列与列之间的间隙 单位px</li><li>column-rule-style  属性指定了列与列间的边框样式</li><li>column-rule-width 指定了边框厚度</li><li>column-rule-color 指定了边框颜色</li><li>column-rule:边框厚度、样式、颜色</li><li>column-span 指定元素跨越多少列   all表示跨越所有列</li><li>column-width 指定列的宽度</li></ul><h2 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h2><p>弹性盒子由弹性容器（flex container）和 弹性子元素（flex item）组成</p><p>弹性盒子通过设置display属性的值flex 或 inline-flex 将其定义为弹性容器</p><p>弹性容器内包含了一个或多个弹性子元素</p><p>注意：弹性容器外及弹性元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局</p><p>弹性子元素通常在弹性盒子内一行显示。默认情况下每个容器只有一行</p><h3 id="弹性盒子属性"><a href="#弹性盒子属性" class="headerlink" title="弹性盒子属性"></a>弹性盒子属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>flex-direction 属性指定了弹性子元素在父元素中的位置</p><ul><li>row 横向从左到右排列（左对齐） 默认的排列方式</li><li>row-reverse : 反转横向排列（右对齐，从后往前排。最后一项在最前面)</li><li>column 纵向排列</li><li>column-reverse 反转纵向排列，从后往前排，最后一项排在最上面</li></ul><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>内容对齐（justify-content)属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线对齐</p><ul><li>flex-start 弹性项目向行头紧挨着填充。这个是默认值，第一个弹性项的main-start外边距边线被放置在该行的main-start 边线，而后续弹性项依次平齐摆放</li><li>flex-end 弹性项目向行尾紧挨填充。第一个弹性项的main-end外边距边线被放置在该行的main-end线</li><li>center 弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）</li><li>space-between 弹性项目平均分布在该行，如果剩余空间为负或只有一个弹性项，则该值等同于flex-start.否则，第一个弹性项的外边距和行的min-start边线对齐</li><li>space-around 弹性项目平均分布在该行上，两边留有一半的间隔空间</li></ul><h4 id="align-items-设置或检索弹性盒子元素在纵轴方向上的对齐方式"><a href="#align-items-设置或检索弹性盒子元素在纵轴方向上的对齐方式" class="headerlink" title="align-items 设置或检索弹性盒子元素在纵轴方向上的对齐方式"></a>align-items 设置或检索弹性盒子元素在纵轴方向上的对齐方式</h4><p>align-items</p><ul><li>flex-start  纵轴起始点</li><li>flex-end   纵轴结束边界</li><li>center    纵轴上居中放置，如果该行的尺寸小于弹性盒子的尺寸，则会向两个方向溢出相同的长度</li><li>baseline</li><li>stretch</li></ul><h4 id="flex-wrap-用于指定弹性盒子的子元素换行方式"><a href="#flex-wrap-用于指定弹性盒子的子元素换行方式" class="headerlink" title="flex-wrap 用于指定弹性盒子的子元素换行方式"></a>flex-wrap 用于指定弹性盒子的子元素换行方式</h4><ul><li><p>nowrap  默认，弹性容器为单行，该情况下弹性子项可能会溢出容器</p></li><li><p>wrap  弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行</p></li><li><p>wrap-reverse 反转wrap排列</p></li></ul><h4 id="align-content-属性"><a href="#align-content-属性" class="headerlink" title="align-content 属性"></a>align-content 属性</h4><p>align-content 属性用于修改flex-wrap 属性的行为。类似于align-items,但它不是设置弹性子元素的对齐，而是设置各个行的对齐</p><p>align-content:</p><ul><li>stretch 默认。各行将会伸展以占用剩余的空间</li><li>flex-start 各行向弹性盒容器的起始位置堆叠</li><li>flex-end 各行向弹性盒容器的结束位置堆叠</li><li>center 各行向弹性盒容器中间位置堆叠</li><li>space-between 各行弹性盒容器中平均分布</li><li>space-around 各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半</li></ul><h3 id="弹性子元素属性"><a href="#弹性子元素属性" class="headerlink" title="弹性子元素属性"></a>弹性子元素属性</h3><h4 id="排序-order"><a href="#排序-order" class="headerlink" title="排序 order"></a>排序 order</h4><p>order：数字  </p><p>用数值来定义排序顺序，数值小的排在前面，可以为负值</p><p>在弹性子元素里面使用</p><h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h4><p>margin:auto</p><h5 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h5><ul><li>auto 如果align-self的值为auto,则其计算值为元素的父元素的align-items值，如果没有父元素。则计算值为stretch</li><li>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</li><li>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</li><li>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</li><li>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</li><li>stretch：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</li></ul><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code> 属性用于指定弹性子元素如何分配空间。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">flex: <span class="hljs-built_in">auto</span> | <span class="hljs-type">initial</span> | <span class="hljs-type">none</span> | <span class="hljs-type">inherit</span> |  <span class="hljs-type">[ flex</span>-grow ] |<span class="hljs-type">| [ flex</span>-shrink ] |<span class="hljs-type">| [ flex</span>-basis ]<br></code></pre></td></tr></table></figure><p>各个值解析:</p><ul><li>auto: 计算值为 1 1 auto</li><li>initial: 计算值为 0 1 auto</li><li>none：计算值为 0 0 auto</li><li>inherit：从父元素继承</li><li>[ flex-grow ]：定义弹性盒子元素的扩展比率。</li><li>[ flex-shrink ]：定义弹性盒子元素的收缩比率。</li><li>[ flex-basis ]：定义弹性盒子元素的默认基准值。</li></ul><p>以下实例中，第一个弹性子元素占用了 2/4 的空间，其他两个各占 1/4 的空间:</p><p>flex-direction</p><p>justify-content  flex-start\flex-end\center\space-between\space-around</p><p>align-items    flex-start\flex-end\center\baseline</p><p>flex-wrap wrap \ nowrap</p><p>弹性子元素的属性</p><p>align-self  自身纵轴的对齐方式</p><h2 id="css3-多媒体查询"><a href="#css3-多媒体查询" class="headerlink" title="css3 多媒体查询"></a>css3 多媒体查询</h2><h2 id="多媒体查询语法"><a href="#多媒体查询语法" class="headerlink" title="多媒体查询语法"></a>多媒体查询语法</h2><p>多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 true 或 false。</p><p>@media not|only mediatype and (expressions) {    CSS 代码…; }</p><p>mediatype  媒体类型</p><p>expressions 表达式</p><p>如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。</p><p>除非你使用了 not 或 only 操作符，否则所有的样式会适应在所有设备上显示效果。</p><ul><li><strong>not:</strong> not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。</li><li><strong>only:</strong> 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。</li><li><strong>all:</strong> 所有设备，这个应该经常看到。</li></ul><p>你也可以在不同的媒体上使用不同的样式文件：</p><link rel="stylesheet" media="mediatype and|not|only (expressions)" href="print.css"><hr><h2 id="CSS3-多媒体类型"><a href="#CSS3-多媒体类型" class="headerlink" title="CSS3 多媒体类型"></a>CSS3 多媒体类型</h2><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">all</td><td align="left">用于所有多媒体类型设备</td></tr><tr><td align="left">print</td><td align="left">用于打印机</td></tr><tr><td align="left">screen</td><td align="left">用于电脑屏幕，平板，智能手机等。</td></tr><tr><td align="left">speech</td><td align="left">用于屏幕阅读器</td></tr></tbody></table><hr><h2 id="多媒体查询简单实例"><a href="#多媒体查询简单实例" class="headerlink" title="多媒体查询简单实例"></a>多媒体查询简单实例</h2><p>使用多媒体查询可以在指定的设备上使用对应的样式替代原有的样式。</p><p>以下实例中在屏幕可视窗口尺寸小于 480 像素的设备上修改背景颜色:</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>@media screen and (max-width: 480px) {    body {        background-color: lightgreen;    } }</p><p><a href="https://www.runoob.com/try/try.php?filename=trycss3_media_queries1">尝试一下 »</a></p><p>以下实例在屏幕可视窗口尺寸大于 480 像素时将菜单浮动到页面左侧：</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>@media screen and (min-width: 480px) {    #leftsidebar {width: 200px; float: left;}    #main {margin-left:216px;} }</p><p><a href="https://www.runoob.com/try/try.php?filename=trycss3_media_queries2">尝试一下 »</a></p><p>以下实例在屏幕可视窗口尺寸小于 600 像素时将 div 元素隐藏：</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>@media screen and (max-width: 600px) {  div.example {    display: none;  } }</p><p><a href="https://www.runoob.com/try/try.php?filename=trycss3_media_queries3">尝试一下 »</a></p><hr><h2 id="CSS3-media-参考"><a href="#CSS3-media-参考" class="headerlink" title="CSS3 @media 参考"></a>CSS3 @media 参考</h2>]]></content>
    
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 搭建</title>
    <link href="/2020/10/26/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84git%E4%BB%93%E5%BA%93/"/>
    <url>/2020/10/26/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84git%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="git搭建-服务器环境：Centos-7"><a href="#git搭建-服务器环境：Centos-7" class="headerlink" title="git搭建 服务器环境：Centos 7"></a>git搭建 服务器环境：Centos 7</h1><h2 id="服务器的网络配置"><a href="#服务器的网络配置" class="headerlink" title="服务器的网络配置"></a>服务器的网络配置</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">方法一、<br><br>　　<span class="hljs-number">1</span>、打开 vi <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-eth0（每个机子都可能不一样，但格式会是“ifcfg-eth数字”），把ONBOOT=no，改为ONBOOT=yes<br><br>　　<span class="hljs-number">2</span>、重启网络：service network restart<br><br>方法二、<br><br>　　<span class="hljs-number">1</span>、打开 vi <span class="hljs-regexp">/etc/</span>resolv.conf，增加 nameserver <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br><br>　　<span class="hljs-number">2</span>、重启网络: service network restart<br></code></pre></td></tr></table></figure><h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">yum</span> install git -y<br>-y表示一直<span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><h3 id="2-创建仓库（也就是文件夹，用于存放上传的文件）"><a href="#2-创建仓库（也就是文件夹，用于存放上传的文件）" class="headerlink" title="2.创建仓库（也就是文件夹，用于存放上传的文件）"></a>2.创建仓库（也就是文件夹，用于存放上传的文件）</h3><p>mkdir</p><h3 id="3-初始化仓库"><a href="#3-初始化仓库" class="headerlink" title="3.初始化仓库"></a>3.初始化仓库</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">git init <span class="hljs-comment">--bare xxx.git</span><br>创建名为xxx的仓库<br></code></pre></td></tr></table></figure><h3 id="4-添加Linux系统用户"><a href="#4-添加Linux系统用户" class="headerlink" title="4.添加Linux系统用户"></a>4.添加Linux系统用户</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">useradd</span> 用户名<br>passwd 用户名<br></code></pre></td></tr></table></figure><p>禁止刚刚添加的用户通过ssh登陆系统</p><h3 id="5-改变-git的所有者为新添加的用户"><a href="#5-改变-git的所有者为新添加的用户" class="headerlink" title="5.改变.git的所有者为新添加的用户"></a>5.改变.git的所有者为新添加的用户</h3><p>chown -R username:username 要改变的目录</p><p>​            -R递归目录下的文件</p><h3 id="6-clone"><a href="#6-clone" class="headerlink" title="6.clone"></a>6.clone</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">用户名@服务器：/目录/仓库.git</span>   <br>仓库的绝对路径<br></code></pre></td></tr></table></figure><p>+</p>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>autoJs</title>
    <link href="/2020/10/22/autoJs/"/>
    <url>/2020/10/22/autoJs/</url>
    
    <content type="html"><![CDATA[<h2 id="①app"><a href="#①app" class="headerlink" title="①app"></a>①app</h2><h3 id="1-打开应用"><a href="#1-打开应用" class="headerlink" title="1.打开应用"></a>1.打开应用</h3><ul><li><p>通过应用名称打开</p><p>app.launchApp(appName)</p></li><li><p>通过应用包名打开</p><p>app.launch(packageName)  or app.launchPackageName(packageName)</p></li></ul><h3 id="2-获取包名-应用名"><a href="#2-获取包名-应用名" class="headerlink" title="2.获取包名/应用名"></a>2.获取包名/应用名</h3><ul><li><p>通过应用名称获取包名</p><p>app.getPackgeName(appName)</p></li><li><p>通过包名获取应用名称</p><p>app.getAppName(packName)</p></li></ul><h2 id="②基于坐标的操作"><a href="#②基于坐标的操作" class="headerlink" title="②基于坐标的操作"></a>②基于坐标的操作</h2><h3 id="1-自动放缩"><a href="#1-自动放缩" class="headerlink" title="1.自动放缩"></a>1.自动放缩</h3><p>setScreenMetrics(width,height)</p><p>这行下面代码的坐标都是以这该函数设置的宽高为准，当运行设备与改坐标不符时会自动缩放</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//获取设备的宽度</span><br>var width = device.width;<br><span class="hljs-comment">//获取设备的高度</span><br>var height = device.height;<br><span class="hljs-built_in">setScreenMetrics</span>(width,height);<br></code></pre></td></tr></table></figure><h3 id="2-模拟点击方法click-x-y"><a href="#2-模拟点击方法click-x-y" class="headerlink" title="2.模拟点击方法click(x,y)"></a>2.模拟点击方法click(x,y)</h3><p>click(x,y)  x坐标跟y坐标</p><p>返回值：返回是否点击成功</p><p>注意：点击需要大约150毫秒才会点击成功</p><p>150毫秒内打断施法会点击失败</p><h3 id="3-longClick-x-y-长按"><a href="#3-longClick-x-y-长按" class="headerlink" title="3.longClick(x,y) 长按"></a>3.longClick(x,y) 长按</h3><h3 id="4-连点器实现-press-x-y-duration"><a href="#4-连点器实现-press-x-y-duration" class="headerlink" title="4.连点器实现 press(x,y,duration)"></a>4.连点器实现 press(x,y,duration)</h3><p>duration 单位 毫秒</p><p>模拟按住坐标x,y duration 秒 </p><p>duration 大于500毫秒表示按住，低于500毫秒是点击</p><h3 id="5-滑动swipe-x1-y1-x2-y2-duration"><a href="#5-滑动swipe-x1-y1-x2-y2-duration" class="headerlink" title="5.滑动swipe(x1,y1,x2,y2,duration)"></a>5.滑动swipe(x1,y1,x2,y2,duration)</h3><p>x1,y1 滑动起始坐标</p><p>x2,y2 滑动结束坐标</p><p>返回是都成功</p><h3 id="6-手势滑动用到再看"><a href="#6-手势滑动用到再看" class="headerlink" title="6.手势滑动用到再看"></a>6.手势滑动用到再看</h3><p>单个手势  getture() </p><p>多个手势 gettures()</p><h2 id="③Device"><a href="#③Device" class="headerlink" title="③Device"></a>③Device</h2><h3 id="1-获取设备宽高分辨率"><a href="#1-获取设备宽高分辨率" class="headerlink" title="1.获取设备宽高分辨率"></a>1.获取设备宽高分辨率</h3><ul><li>宽度：device.width</li><li>高度：device.height</li></ul><h3 id="2-获取设备型号"><a href="#2-获取设备型号" class="headerlink" title="2.获取设备型号"></a>2.获取设备型号</h3><p>device.model</p><h3 id="3-获取安卓版本号"><a href="#3-获取安卓版本号" class="headerlink" title="3.获取安卓版本号"></a>3.获取安卓版本号</h3><p>device.release</p><h3 id="4-亮度相关"><a href="#4-亮度相关" class="headerlink" title="4.亮度相关"></a>4.亮度相关</h3><ul><li>获取手动调节的亮度（0-255） device.getBrightness()</li><li>获取当前的亮度模式 0为手动亮度 1 为自动亮度</li><li>设置手动亮度 当亮度模式为手动亮度时才会生效 device.setBrightness(n)</li><li>设置当前的亮度模式 1为自动亮度 2 为手动亮度 device.setBrightnessMode(mode)</li></ul><h3 id="5-媒体音量相关（需要再查）"><a href="#5-媒体音量相关（需要再查）" class="headerlink" title="5.媒体音量相关（需要再查）"></a>5.媒体音量相关（需要再查）</h3><h2 id="④Dialogs"><a href="#④Dialogs" class="headerlink" title="④Dialogs"></a>④Dialogs</h2><h3 id="1-简单的交互"><a href="#1-简单的交互" class="headerlink" title="1.简单的交互"></a>1.简单的交互</h3><p>alert(“hello world”)</p><h3 id="2-有响应的对话框"><a href="#2-有响应的对话框" class="headerlink" title="2.有响应的对话框"></a>2.有响应的对话框</h3><p>confirm(“显示的内容”)</p><p>选择确定返回true 选中否返回false</p><p>ui 模式下 confirm 使用需要加回调函数或promise</p><h3 id="3-dialogs-alert-title-content-callback"><a href="#3-dialogs-alert-title-content-callback" class="headerlink" title="3.dialogs.alert(title,content,callback)"></a>3.dialogs.alert(title,content,callback)</h3><p>title:标题</p><p>content:内容</p><p>callback:回调</p><p>也可做全局函数使用</p><h3 id="4-dialogs-confirm-title-content-callback"><a href="#4-dialogs-confirm-title-content-callback" class="headerlink" title="4.dialogs.confirm(title,content,callback)"></a>4.dialogs.confirm(title,content,callback)</h3><p>title:标题</p><p>content:内容</p><p>callback:回调</p><p>也可做全局函数使用</p><h3 id="5-dialogs-rawInput-title-prefill-callback"><a href="#5-dialogs-rawInput-title-prefill-callback" class="headerlink" title="5.dialogs.rawInput(title[,prefill,callback])"></a>5.dialogs.rawInput(title[,prefill,callback])</h3><p>获取用户输入，用户输入内容并点击确定后用户输入的内容会作为参数传给回调函数</p><p>也可做全局函数使用</p><h3 id="6-dialogs-select-title-items-callback"><a href="#6-dialogs-select-title-items-callback" class="headerlink" title="6.dialogs.select(title,items,callback)"></a>6.dialogs.select(title,items,callback)</h3><p>title:标题</p><p>item:字符串数组</p><p>callback:回调函数</p><p>该方法返回的是选中的元素在数组中的下标</p><p>如果用户取消选中，返回-1</p><h3 id="………-需要再查"><a href="#………-需要再查" class="headerlink" title="………..需要再查"></a>………..需要再查</h3>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++笔记</title>
    <link href="/2020/10/17/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98c++/"/>
    <url>/2020/10/17/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98c++/</url>
    
    <content type="html"><![CDATA[<h2 id="我的c-随手写"><a href="#我的c-随手写" class="headerlink" title="我的c++(随手写)"></a>我的c++(随手写)</h2><h2 id="关于输入输出流头文件"><a href="#关于输入输出流头文件" class="headerlink" title="关于输入输出流头文件"></a>关于输入输出流头文件</h2><p>#include <iostream>   i input  o output</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">获取用户输入并储存到某个变量<br>cin &gt;&gt; 变量<span class="hljs-number">1</span> &gt;&gt; 变量<span class="hljs-number">2</span> &gt;&gt; 变量<span class="hljs-number">3</span><br>向控制台输出<br>cout &lt;&lt; 输出<span class="hljs-number">1</span> &lt;&lt; 输出<span class="hljs-number">2</span> &lt;&lt; 输出<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="关于string头文件"><a href="#关于string头文件" class="headerlink" title="关于string头文件"></a>关于string头文件</h2><p>#include <string></p><h2 id="使用基本命名空间-std"><a href="#使用基本命名空间-std" class="headerlink" title="使用基本命名空间 std"></a>使用基本命名空间 std</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><h2 id="sizeof-输出某个变量或数据类型所占大小"><a href="#sizeof-输出某个变量或数据类型所占大小" class="headerlink" title="sizeof() 输出某个变量或数据类型所占大小"></a><code>sizeof</code>() 输出某个变量或数据类型所占大小</h2><h2 id="amp-取地址"><a href="#amp-取地址" class="headerlink" title="&amp; 取地址"></a>&amp; 取地址</h2><h2 id="endl-类似换行符-end-line-的缩写"><a href="#endl-类似换行符-end-line-的缩写" class="headerlink" title="endl 类似换行符   end line 的缩写"></a><code>endl</code> 类似换行符   end line 的缩写</h2><h2 id="函数的格式"><a href="#函数的格式" class="headerlink" title="函数的格式"></a>函数的格式</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">返回值类型 函数名(参数<span class="hljs-number">1</span>， 参数<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针 *"></a>指针 *</h2><p>指针用来记录变量的内存地址 通过&amp;变量名的方式给指针赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">例： <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-keyword">int</span> *p = &amp;a; 把变量a的地址赋值给指针p<br><br><span class="hljs-comment">//获取指针对应的内存中的地址 --&gt; 解引用</span><br>cout &lt;&lt; *p &lt;&lt; endl;  <span class="hljs-comment">//输出的是一个内存空间对应的值</span><br><span class="hljs-comment">//输出指针储存的地址。直接输出</span><br>cout &lt;&lt; p &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p>指向的内存地址为0</p><p>用途：用于初始化指针</p><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><p>指向不允许修改的内存地址编号</p><h3 id="常量指针"><a href="#常量指针" class="headerlink" title="常量指针"></a>常量指针</h3><p>常量指针指向可以改，值不能改</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">const int <span class="hljs-comment">* p = &amp;a;</span><br><span class="hljs-comment">*p = 20;</span>  × 错误操作<br>p = <span class="hljs-variable">&amp;c</span>;   √<br></code></pre></td></tr></table></figure><p>理解：指针用常量修饰，*是指针符号 即解引用*p不能改 -&gt;*p代表的是值</p><h3 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h3><p>指针常量 指向不可改 值可改</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">int <span class="hljs-comment">* const p = &amp;a;</span><br><span class="hljs-comment">*p = 20;</span>  √<br>p = <span class="hljs-variable">&amp;c</span>;  × 错误操作<br></code></pre></td></tr></table></figure><p>理解：const 修饰的是*后的p 即p不能改 -&gt;p代表的是内存地址，也就是指向</p><h3 id="常量指针常量"><a href="#常量指针常量" class="headerlink" title="常量指针常量"></a>常量指针常量</h3><p>指向和值都不可改</p><p>综上</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> * <span class="hljs-keyword">const</span> p;<br>*p = <span class="hljs-number">20</span>;  × 错误操作<br>p = &amp;c;  × 错误操作<br></code></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol><li><p>引用就是一个变量的别名</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">int</span> &amp;b = a;<br></code></pre></td></tr></table></figure></li></ol><ul><li>引用必须定义的时候初始化</li><li>引用在初始化后不可改变</li></ul><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> 名字&#123;<br>&#125;;<br>结构体里面可以写结构体套娃<br>类似类<br></code></pre></td></tr></table></figure><ul><li>结构体的默认访问权限是公共的</li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名</span>&#123;<br><br>​属性<br><br>​方法<br><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="类的权限修饰符"><a href="#类的权限修饰符" class="headerlink" title="类的权限修饰符"></a>类的权限修饰符</h3><ul><li><p>public 成员 类内可以访问 类外可以访问</p></li><li><p>protected 成员 类内可以访问 类外不可以访问</p></li><li><p>private 成员 类内可以访问 类外不可以访问</p></li></ul><h2 id="构造函数-与类名相同没有返回值的函数"><a href="#构造函数-与类名相同没有返回值的函数" class="headerlink" title="构造函数  与类名相同没有返回值的函数"></a>构造函数  与类名相同没有返回值的函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-function"><span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="析构函数-类名前加-的没有返回值的函数"><a href="#析构函数-类名前加-的没有返回值的函数" class="headerlink" title="析构函数 类名前加~的没有返回值的函数"></a>析构函数 类名前加~的没有返回值的函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-comment">//构造函数</span><br><span class="hljs-function"><span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-function"><span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="拷贝构造函数-参数为类对象的构造函数的重载"><a href="#拷贝构造函数-参数为类对象的构造函数的重载" class="headerlink" title="拷贝构造函数 参数为类对象的构造函数的重载"></a>拷贝构造函数 参数为类对象的构造函数的重载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-function"><span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><span class="hljs-comment">//拷贝构造函数</span><br><span class="hljs-function"><span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> Person *p</span>)</span>&#123;<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="关于三种构造函数的规则"><a href="#关于三种构造函数的规则" class="headerlink" title="关于三种构造函数的规则"></a>关于三种构造函数的规则</h2><ul><li>编译会默认提供并在对象创建的时候调用默认构造函数</li><li>手动创建有参构造函数后编译器不会创建默认构造函数，但会创建默认的拷贝构造函数</li><li>手动创建拷贝构造函数后不会创建其他函数了</li></ul><h2 id="构造函数的调用方法"><a href="#构造函数的调用方法" class="headerlink" title="构造函数的调用方法"></a>构造函数的调用方法</h2><ul><li>```<br>class Person{<pre><code class="hljs">Person()&#123;&#125;Person(int age)&#123;&#125;</code></pre>};<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>括号法<br><br><span class="hljs-code">  无参构造函数</span><br><br></code></pre></td></tr></table></figure>//调用<br>Person p1;<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>有参构造函数<br><br></code></pre></td></tr></table></figure>//有参调用<br>Person p2(18);<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>显示法<br><br><span class="hljs-code">  无参构造函数</span><br><br></code></pre></td></tr></table></figure>Person p3 = Person()<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>有参构造函数<br><br></code></pre></td></tr></table></figure>Person p4 = Person(18)<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>隐式转换法<br><br><span class="hljs-code">  无参构造方法</span><br><br></code></pre></td></tr></table></figure>Person p5;<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>有参构造韩素华<br><br></code></pre></td></tr></table></figure>Person p6 = 18;<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 函数初始化列表<br><br></code></pre></td></tr></table></figure>class Person{<br>public:<br>  Person(){  }<br>  //Person(): 变量名(值){<br>  //}<br>  Person():age(){  }<br>Public:<br>  int age;<br>};<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 友元（关键字friend） --&gt;允许别人访问你设置为private的属性<br><br></code></pre></td></tr></table></figure>//三种实现方式<br>/*<br>  1.全局函数做友元<br>  2.类做友元<br>  3.成员函数做友元</li></ul><p>*/ </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>在将要允许被访问的类中设置friend类<br><br>## 重载运算符<br><br>关键字operator<br><br>## 继承<br><br>继承语法<br><br><span class="hljs-keyword">class</span> 子类 : 继承方式 父类<br><br>子类 又称派生类<br><br>父类 又称基类<br><br>子类无法访问父类中private的成员<br><br>### 继承方式<br><br>![image<span class="hljs-number">-20200714210738080</span>](https:<span class="hljs-comment">//files.catbox.moe/rdx5ae.png)</span><br><br>### 虚继承<br><br>在派生类的继承方式加上virtual，父类称作虚基类<br><br>### 同名成员访问加作用域（基类类名::成员）<br><br>## 多态<br><br>基类通过指针或引用访问子类中的方法，实现多态 <br><br></code></pre></td></tr></table></figure><p>void talk(Animal &amp;animal){<br>    animal.speak();<br>}<br>animal是父类，传入子类对象，父类中的函数需要时虚函数，加virtual</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 纯虚函数和抽象类<br><br>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容<br><br><br><br>因此可以将虚函数改为**纯虚函数**<br><br><br><br>纯虚函数语法：`virtual 返回值类型 函数名 （参数列表）= <span class="hljs-number">0</span> ;`<br><br><br><br>当类中有了纯虚函数，这个类也称为==抽象类==<br><br><br><br>**抽象类特点**：<br><br> * 无法实例化对象<br> * 子类必须重写抽象类中的纯虚函数，否则也属于抽象类<br><br>## 文件操作<br><br>## STL<br><br>## vector容器(模板)<br><br></code></pre></td></tr></table></figure><p>引入头文件<br>#include <vector><br>创建<br>vector&lt;数据类型&gt; 变量;<br>添加数据<br>v.push_back(值);</p><p>访问数据的迭代器<br>vector&lt;数据类型&gt;::iterator begin = v.begin()<br>vector&lt;数据类型&gt;::iterator end = v.end()</p><pre><code class="hljs"></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svn 搭建</title>
    <link href="/2020/09/05/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84svn%E4%BB%93%E5%BA%93/"/>
    <url>/2020/09/05/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84svn%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="SVN搭建-服务器环境：Centos-7"><a href="#SVN搭建-服务器环境：Centos-7" class="headerlink" title="SVN搭建 服务器环境：Centos 7"></a>SVN搭建 服务器环境：Centos 7</h1><h2 id="服务器的网络配置"><a href="#服务器的网络配置" class="headerlink" title="服务器的网络配置"></a>服务器的网络配置</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">方法一、<br><br>　　<span class="hljs-number">1</span>、打开 vi <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-eth0（每个机子都可能不一样，但格式会是“ifcfg-eth数字”），把ONBOOT=no，改为ONBOOT=yes<br><br>　　<span class="hljs-number">2</span>、重启网络：service network restart<br><br>方法二、<br><br>　　<span class="hljs-number">1</span>、打开 vi <span class="hljs-regexp">/etc/</span>resolv.conf，增加 nameserver <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br><br>　　<span class="hljs-number">2</span>、重启网络: service network restart<br></code></pre></td></tr></table></figure><h3 id="1-安装svn"><a href="#1-安装svn" class="headerlink" title="1.安装svn"></a>1.安装svn</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span><span class="hljs-keyword">subversion </span>-y<br></code></pre></td></tr></table></figure><h3 id="2-创建仓库（也就是文件夹，用于存放上传的文件）"><a href="#2-创建仓库（也就是文件夹，用于存放上传的文件）" class="headerlink" title="2.创建仓库（也就是文件夹，用于存放上传的文件）"></a>2.创建仓库（也就是文件夹，用于存放上传的文件）</h3><p>mkdir</p><h3 id="3-初始化仓库"><a href="#3-初始化仓库" class="headerlink" title="3.初始化仓库"></a>3.初始化仓库</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">svnadmin <span class="hljs-keyword">create</span> 仓库路径<br></code></pre></td></tr></table></figure><h3 id="4-配置用户和服务相关"><a href="#4-配置用户和服务相关" class="headerlink" title="4.配置用户和服务相关"></a>4.配置用户和服务相关</h3><ul><li><p>添加用户</p><ol><li>在初始化好的仓库下，会有一些配置文件，进入conf目录</li><li>打开passwd 文件 添加内容  格式：  用户名=密码</li></ol></li><li><p>服务的权限配置</p><ol><li><p>同样是conf目录</p></li><li><p>打开svnserver.conf文件</p></li><li><p>几个重要的选项</p><ul><li><p>anon-access =值 匿名访问的权限 </p><p>值有none read  write分别对应  不允许 可读 可读可写</p></li><li><p>auth-access = 值 授权访问者的权限</p></li><li><p>password-db = 文件名   密码文件</p></li><li><p>authz-db=文件名 授权策略 不要轻易打开这个</p></li></ul></li></ol></li></ul><h3 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5.启动服务"></a>5.启动服务</h3><p>查看服务的状态  ps -ef|grep 服务名</p><p>启动svn</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff">svnserver -d -r 要在哪个目录启动svn<br><span class="hljs-deletion">-d 表示守护模式 进程不销毁  -r表示要开启服务的目录</span><br>daemonroot<br></code></pre></td></tr></table></figure><h3 id="6-关闭防火墙"><a href="#6-关闭防火墙" class="headerlink" title="6.关闭防火墙"></a>6.关闭防火墙</h3><p>关闭所有防火墙 iptables -F</p><p>查看防火墙  iptables -L</p>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node基本模块</title>
    <link href="/2020/08/15/Node/"/>
    <url>/2020/08/15/Node/</url>
    
    <content type="html"><![CDATA[<h2 id="1-引入模块require"><a href="#1-引入模块require" class="headerlink" title="1.引入模块require"></a>1.引入模块require</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(模块名)</span></span><br></code></pre></td></tr></table></figure><h2 id="2-http模块"><a href="#2-http模块" class="headerlink" title="2.http模块"></a>2.http模块</h2><h3 id="1-基操"><a href="#1-基操" class="headerlink" title="1.基操"></a>1.基操</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>引入<br>let http = require(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-regexp">//</span>创建服务<br>let server = http.createServer(()=&gt;&#123;<br><span class="hljs-regexp">//</span>服务器被访问会执行的回调<br>&#125;)<br><span class="hljs-regexp">//</span>设置当前服务监听的端口<br>server.listen(端口号)<br><br></code></pre></td></tr></table></figure><h3 id="2-回调函数的两个参数"><a href="#2-回调函数的两个参数" class="headerlink" title="2.回调函数的两个参数"></a>2.回调函数的两个参数</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">http.createServer((request,response)=&gt;&#123;<br><span class="hljs-regexp">//</span>request  用户发送的数据，服务器收到的数据<br><span class="hljs-regexp">//</span>response 服务器发送的数据，用户收到的数据<br><span class="hljs-regexp">//</span>用户请求的方式<br>request.method<br><span class="hljs-regexp">//</span>用户请求的地址<br>request.url<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="3-write-和-end"><a href="#3-write-和-end" class="headerlink" title="3.write 和 end"></a>3.write 和 end</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>编写给用户的响应内容<br>response.write(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br><span class="hljs-regexp">//</span>告诉用户相应的内容完了<br>response.end();<br></code></pre></td></tr></table></figure><h2 id="3-assert模块-断言"><a href="#3-assert模块-断言" class="headerlink" title="3.assert模块 断言"></a>3.assert模块 断言</h2><p>断言，就是用来判断条件的，不符合就类似抛出异常终止运行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assert</span><span class="hljs-params">(<span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;1不大于2哟&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><h2 id="4-Buffer-处理二进制文件"><a href="#4-Buffer-处理二进制文件" class="headerlink" title="4.Buffer-处理二进制文件"></a>4.Buffer-处理二进制文件</h2><h2 id="5-file-stream-fs模块"><a href="#5-file-stream-fs模块" class="headerlink" title="5.file stream (fs模块)"></a>5.file stream (fs模块)</h2><h3 id="readFile"><a href="#readFile" class="headerlink" title="readFile()"></a>readFile()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入模块</span><br><span class="hljs-keyword">let</span> fs  = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-comment">//读文件</span><br>fs.readFile(文件名,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">if</span>(err)&#123;<br><span class="hljs-comment">//没错的时候err为空</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">console</span>.log(data) <span class="hljs-comment">//输出的是个buffer类 16进制的数字</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="writeFile"><a href="#writeFile" class="headerlink" title="writeFile()"></a>writeFile()</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">fs.writeFile(<span class="hljs-string">&#x27;文件名&#x27;</span>,<span class="hljs-function"><span class="hljs-params">(err)</span>=&gt;</span>&#123;<br>回调函数<br>&#125;)<br></code></pre></td></tr></table></figure><p>追加写入 appendFile()</p><h2 id="6-crypto模块"><a href="#6-crypto模块" class="headerlink" title="6.crypto模块"></a>6.crypto模块</h2><p>md5 sha1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<br><span class="hljs-comment">//闯将crypto对象</span><br><span class="hljs-keyword">let</span> obj = crypto.createHash(<span class="hljs-string">&#x27;md5&#x27;</span>)<br><span class="hljs-comment">//添加数据</span><br>obj.update(<span class="hljs-string">&#x27;123456&#x27;</span>)<br><span class="hljs-comment">//打印</span><br><span class="hljs-built_in">console</span>.log(obj.digest(<span class="hljs-string">&#x27;hex&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="7-url和querystring"><a href="#7-url和querystring" class="headerlink" title="7.url和querystring"></a>7.url和querystring</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//映入包</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br><span class="hljs-keyword">const</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)<br><br><br><span class="hljs-keyword">let</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br><span class="hljs-comment">//当前服务器被访问时会触发改函数</span><br><span class="hljs-comment">//req 请求体</span><br><span class="hljs-comment">//res 响应体</span><br><span class="hljs-comment">//用url模块解析url  url转键值</span><br><span class="hljs-comment">// console.log(url.parse(req.url, true))</span><br><span class="hljs-comment">//用urL模块的几个重要参数</span><br><span class="hljs-comment">//pathname:例如   http://localhost/index/1.html 对应的parse后的pathname的值为/index/1.html</span><br><span class="hljs-comment">//path: 是当前访问文件的地址 不重要</span><br><span class="hljs-comment">//query： 里面包含的是get方式发送的一些数据</span><br><br><span class="hljs-comment">//用querystring模块解析url  数据转键值</span><br><span class="hljs-built_in">console</span>.log(querystring.parse(<span class="hljs-string">&quot;ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=aa&amp;rsv_pq=f80d982000063ffb&amp;rsv_t=6498LAZdRZjq9v4v0hs88kZItnCjDpT6UNBKr%2FF83%2F%2Bg4eiPURW2eQl9Iwc&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug2=0&amp;inputT=10&amp;rsv_sug4=10&quot;</span>));<br><span class="hljs-comment">//</span><br>res.write(<span class="hljs-string">&quot;aaa执行完毕&quot;</span>)<br>res.end()<br>&#125;);<br><span class="hljs-comment">//监听窗口</span><br>server.listen(<span class="hljs-number">81</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery 动画</title>
    <link href="/2020/08/01/6%E5%8A%A8%E7%94%BB/"/>
    <url>/2020/08/01/6%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-display"><a href="#1-display" class="headerlink" title="1.display"></a>1.display</h2><p>显示隐藏元素的方法：JQuery对象的show方法，参数一（可选）为显示时间，参数2（可选）为回调函数</p><p>隐藏元素的方法：JQuery对象的hide方法，参数一（可选）为显示时间，参数2（可选）为回调函数</p><p>包含隐藏与显示已经封装好的元素：$(selector).toggle(参数一，参数二)，参数一（可选）为显示时间，参数2（可选）为回调函数</p>]]></content>
    
    
    
    <tags>
      
      <tag>JQuery</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery 元素属性</title>
    <link href="/2020/08/01/4.JQuery%E5%AF%B9%E8%B1%A1%E4%B8%8A%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%92%8C%E8%8E%B7%E5%8F%96/"/>
    <url>/2020/08/01/4.JQuery%E5%AF%B9%E8%B1%A1%E4%B8%8A%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%92%8C%E8%8E%B7%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h2 id="1-设置属性"><a href="#1-设置属性" class="headerlink" title="1.设置属性"></a>1.设置属性</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">$<span class="hljs-comment">(selector)</span>.attr<span class="hljs-comment">(属性名，属性值)</span><br></code></pre></td></tr></table></figure><h2 id="2-获取属性"><a href="#2-获取属性" class="headerlink" title="2.获取属性"></a>2.获取属性</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">$<span class="hljs-comment">(selector)</span>.attr<span class="hljs-comment">(属性名)</span><br></code></pre></td></tr></table></figure><h2 id="3-移除属性"><a href="#3-移除属性" class="headerlink" title="3.移除属性"></a>3.移除属性</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">$(<span class="hljs-params">selector</span>)</span>.remove<span class="hljs-constructor">Attr(属性名)</span><br></code></pre></td></tr></table></figure><h2 id="4-form表单的操作"><a href="#4-form表单的操作" class="headerlink" title="4.form表单的操作"></a>4.form表单的操作</h2><h3 id="prop"><a href="#prop" class="headerlink" title="prop()"></a>prop()</h3><p>针对check、selected、disabled属性</p>]]></content>
    
    
    
    <tags>
      
      <tag>JQuery</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery 元素内容</title>
    <link href="/2020/08/01/5.%E8%8E%B7%E5%8F%96%E6%A0%87%E7%AD%BE%E9%87%8C%E7%9A%84%E5%86%85%E5%AE%B9/"/>
    <url>/2020/08/01/5.%E8%8E%B7%E5%8F%96%E6%A0%87%E7%AD%BE%E9%87%8C%E7%9A%84%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="1-获取value"><a href="#1-获取value" class="headerlink" title="1.获取value"></a>1.获取value</h2><p>调用JQuery对象的val方法</p><h2 id="2-获取文字（不包含标签名）"><a href="#2-获取文字（不包含标签名）" class="headerlink" title="2.获取文字（不包含标签名）"></a>2.获取文字（不包含标签名）</h2><p>调用JQuery对象的text方法</p><h2 id="3-获取文字（包含标签名）"><a href="#3-获取文字（包含标签名）" class="headerlink" title="3.获取文字（包含标签名）"></a>3.获取文字（包含标签名）</h2><p>调用JQuery对象的html方法</p>]]></content>
    
    
    
    <tags>
      
      <tag>JQuery</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery 选择器</title>
    <link href="/2020/07/29/1jQuery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2020/07/29/1jQuery%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、选择器"><a href="#一、选择器" class="headerlink" title="一、选择器"></a>一、选择器</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">基本：<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>、$(<span class="hljs-string">&quot;#id&quot;</span>): 根据给定的ID匹配一个元素。<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">2</span>、$(<span class="hljs-string">&quot;dom元素名&quot;</span>)：根据给定的元素名匹配所有元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">3</span>、$(<span class="hljs-string">&quot;.Class类名&quot;</span>): 根据给定的类匹配元素。<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">4</span>、$(<span class="hljs-string">&quot;*&quot;</span>) ：匹配所有元素。<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-number">5</span>、<span class="hljs-variable">$(</span><span class="hljs-string">&quot;dom元素.class类名&quot;</span>)：选择所有<span class="hljs-class"><span class="hljs-keyword">class</span>属性为指定类名的<span class="hljs-title">dom</span>元素。</span><br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">6</span>、$(<span class="hljs-string">&quot;.stripe tr&quot;</span>): 获取<span class="hljs-keyword">class</span>属性为<span class="hljs-symbol">stripe</span>的<span class="hljs-symbol">table</span>元素下的所有行<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">层级：<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>、$(<span class="hljs-string">&quot;ancestor descendant&quot;</span>):在给定的祖先元素下匹配所有的后代元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">2</span>、$(<span class="hljs-string">&quot;parent &gt; child&quot;</span>):在给定的父元素下匹配所有的子元素<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-number">3</span>、<span class="hljs-variable">$(</span><span class="hljs-string">&quot;prev + next&quot;</span>)<span class="hljs-symbol">:</span>匹配所有紧接在 prev 元素后的 <span class="hljs-keyword">next</span> 元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">4</span>、$(<span class="hljs-string">&quot;prev ~ siblings&quot;</span>):匹配 prev 元素之后的所有 siblings(同级) 元素<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">简单:</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>、$(<span class="hljs-string">&quot;tr:first&quot;</span>) 匹配找到的第一个元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">2</span>、$(<span class="hljs-string">&quot;tr:last&quot;</span>) 匹配找到的最后一个元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">3</span>、$(<span class="hljs-string">&quot;input:not(:checked)&quot;</span>) 去除所有与给定选择器匹配的元素<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4</span>、$(<span class="hljs-string">&quot;tr:even&quot;</span>) 匹配所有索引值为偶数的元素，从 <span class="hljs-number">0</span> 开始计数<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">5</span>、$(<span class="hljs-string">&quot;tr:odd&quot;</span>) 匹配所有索引值为奇数的元素，从 <span class="hljs-number">0</span> 开始计数<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">6</span>、$(<span class="hljs-string">&quot;tr:eq(1)&quot;</span>) 匹配一个给定索引值的元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">7</span>、$(<span class="hljs-string">&quot;tr:gt(0)&quot;</span>) 匹配所有大于给定索引值的元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">8</span>、$(<span class="hljs-string">&quot;tr:lt(2)&quot;</span>) 匹配所有小于给定索引值的元素<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">内容：<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>、$(<span class="hljs-string">&quot;div:contains(&#x27;John&#x27;)&quot;</span>) 匹配包含给定文本的元素<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">2</span>、<span class="hljs-symbol">$</span>(<span class="hljs-string">&quot;div:has(p)&quot;</span>) 匹配所有包含 p 元素的 <span class="hljs-built_in">div</span> 元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">3</span>、$(<span class="hljs-string">&quot;td:empty&quot;</span>) 查找所有不包含子元素或者文本的空元素<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">可见性：<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>、$(<span class="hljs-string">&quot;tr:visible&quot;</span>) 查找所有可见的 tr 元素<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-number">2</span>、$(<span class="hljs-string">&quot;tr:hidden&quot;</span>) 匹配所有的不可见元素，input 元素的 <span class="hljs-keyword">type</span> 属性为 <span class="hljs-string">&quot;hidden&quot;</span><span class="hljs-string">` `</span>的话也会被匹配到<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">属性：<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>、$(<span class="hljs-string">&quot;div[id]&quot;</span>) 查找所有含有 <span class="hljs-built_in">id</span> 属性的 <span class="hljs-keyword">div</span> 元素<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span>、$(<span class="hljs-string">&quot;input[name=&#x27;newsletter&#x27;]&quot;</span>) 查找所有 <span class="hljs-keyword">name</span> 属性是 newsletter 的 <span class="hljs-keyword">input</span> 元素<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span>、$(<span class="hljs-string">&quot;input[name!=&#x27;newsletter&#x27;]&quot;</span>) 查找所有 <span class="hljs-keyword">name</span> 属性不是 newsletter 的 <span class="hljs-keyword">input</span> 元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">4</span>、$(<span class="hljs-string">&quot;input[name^=&#x27;news&#x27;]&quot;</span>) 查找所有 name 以 <span class="hljs-string">&#x27;news&#x27;</span><span class="hljs-string">` `</span>开始的 input 元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">5</span>、$(<span class="hljs-string">&quot;input[name$=&#x27;letter&#x27;]&quot;</span>) 查找所有 name 以 <span class="hljs-string">&#x27;letter&#x27;</span><span class="hljs-string">` `</span>结尾的 input 元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">6</span>、$(<span class="hljs-string">&quot;input[name*=&#x27;man&#x27;]&quot;</span>) 查找所有 name 包含 <span class="hljs-string">&#x27;man&#x27;</span><span class="hljs-string">` `</span>的 input 元素<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">7</span>、<span class="hljs-variable">$</span>(<span class="hljs-string">&quot;input[id][name<span class="hljs-variable">$</span>=&#x27;man&#x27;]&quot;</span>) 找到所有含有 id 属性，并且它的 name 属性是以 <span class="hljs-built_in">man</span> 结尾的<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">子元素：<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-number">1</span>、nth-child(even)/<span class="hljs-symbol">:nth-child</span>(odd)/<span class="hljs-symbol">:nth-child</span>(<span class="hljs-number">3</span>n)/<span class="hljs-symbol">:nth-child</span>(<span class="hljs-number">2</span>)/<span class="hljs-symbol">:nth-child</span>(<span class="hljs-number">3</span>n+<span class="hljs-number">1</span>)/<span class="hljs-symbol">:nth-child</span>(<span class="hljs-number">3</span>n+<span class="hljs-number">2</span>) 匹配其父元素下的第N个子或奇偶元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">2</span>、$(<span class="hljs-string">&quot;ul li:first-child&quot;</span>) 在每个 ul 中查找第一个 li<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">3</span>、$(<span class="hljs-string">&quot;ul li:last-child&quot;</span>)  在每个 ul 中查找最后一个 li<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">4</span>、$(<span class="hljs-string">&quot;ul li:only-child&quot;</span>)  在 ul 中查找是唯一子元素的 li<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">表单：<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>、$(<span class="hljs-string">&quot;:input&quot;</span>) 查找所有的input元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">2</span>、$(<span class="hljs-string">&quot;text&quot;</span>)  匹配所有的单行文本框<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">3</span>、$(<span class="hljs-string">&quot;:password&quot;</span>) 匹配所有密码框<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">4</span>、$(<span class="hljs-string">&quot;radio&quot;</span>)  匹配所有单选按钮<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">5</span>、$(<span class="hljs-string">&quot;checkbox&quot;</span>) 匹配所有复选框<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">6</span>、$(<span class="hljs-string">&quot;submit&quot;</span>)  匹配所有提交按钮<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">7</span>、$(<span class="hljs-string">&quot;image&quot;</span>)  匹配所有图像域<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">8</span>、$(<span class="hljs-string">&quot;button&quot;</span>)  匹配所有按钮<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">9</span>、$(<span class="hljs-string">&quot;file&quot;</span>)   匹配所有文件域<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">10</span>、<span class="hljs-variable">$</span>(<span class="hljs-string">&quot;hidden&quot;</span>) 匹配所有不可见元素，或者<span class="hljs-built_in">type</span>为<span class="hljs-keyword">hidden</span>的元素<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">表单对象属性：<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">1</span>、<span class="hljs-symbol">$</span>(<span class="hljs-string">&quot;input:checked&quot;</span>) 匹配所有选中的被选中元素(复选框、单选框等，不包括select中的<span class="hljs-keyword">option</span>)<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">2</span>、$(<span class="hljs-string">&quot;input:enabled&quot;</span>) 匹配所有可用元素<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">3</span>、$(<span class="hljs-string">&quot;input:disabled&quot;</span>) 匹配所有不可用元素<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">04</span>、<span class="hljs-symbol">$</span>(<span class="hljs-string">&quot;select option:selected&quot;</span>) 匹配所有选中的<span class="hljs-keyword">option</span>元素<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JQuery</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery 操作DOM</title>
    <link href="/2020/07/29/3.%E6%93%8D%E4%BD%9CDOM/"/>
    <url>/2020/07/29/3.%E6%93%8D%E4%BD%9CDOM/</url>
    
    <content type="html"><![CDATA[<h1 id="1-创建新的元素"><a href="#1-创建新的元素" class="headerlink" title="1.创建新的元素"></a>1.创建新的元素</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>创建h1的JQuery对象 等同于 <span class="hljs-built_in">document</span>.createElement()<br><span class="hljs-keyword">var</span> h1 = $(<span class="hljs-string">&#x27;&lt;h1&gt;hello world&lt;/h1&gt;&#x27;</span>)<br><span class="hljs-number">2.</span>通过设置html的内容创建 等同于innerHTML<br>$(<span class="hljs-string">&#x27;#d1&#x27;</span>).html(<span class="hljs-string">&#x27;&lt;h1&gt;hello world&lt;/h1&gt;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="2-append-和appendTo-后面追加元素"><a href="#2-append-和appendTo-后面追加元素" class="headerlink" title="2.append() 和appendTo() 后面追加元素"></a>2.append() 和appendTo() 后面追加元素</h1><p>把通过1方法创建的元素追加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//追加方式1</span><br>$(<span class="hljs-string">&#x27;#d1&#x27;</span>).append(h1)<br><span class="hljs-comment">//追加方式2</span><br>h1.appendTo(<span class="hljs-string">&#x27;#d1&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="3-prepend-前面追加"><a href="#3-prepend-前面追加" class="headerlink" title="3.prepend() 前面追加"></a>3.prepend() 前面追加</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//追加到前面 在内容得最前面追加</span><br>$(<span class="hljs-string">&#x27;#d1&#x27;</span>).prepend(<span class="hljs-string">&#x27;&lt;h1&gt;早上好！&lt;/h1&gt;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="4-before"><a href="#4-before" class="headerlink" title="4.before()"></a>4.before()</h1><p>字面意思得插入/追加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//before</span><br>$(<span class="hljs-string">&#x27;#d1&#x27;</span>).before(<span class="hljs-string">&quot;&lt;h1&gt;中午好&lt;/h1&gt;&quot;</span>)<br>$(<span class="hljs-string">&#x27;#d1&#x27;</span>).before(<span class="hljs-string">&quot;&lt;h1&gt;晚上好&lt;/h1&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="5-after"><a href="#5-after" class="headerlink" title="5.after()"></a>5.after()</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//after</span><br>$(<span class="hljs-string">&#x27;#d1&#x27;</span>).after(<span class="hljs-string">&quot;&lt;h1&gt;夜猫子&lt;/h1&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="6-清空元素里的内容"><a href="#6-清空元素里的内容" class="headerlink" title="6.清空元素里的内容"></a>6.清空元素里的内容</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">方式一：<br><span class="hljs-comment">//清空内容</span><br>$(<span class="hljs-string">&#x27;#d1&#x27;</span>).empty()<br>$(<span class="hljs-string">&#x27;#d1&#x27;</span>).html(<span class="hljs-string">&#x27;&#x27;</span>)<br>方式二：<br><span class="hljs-comment">//删除整个元素</span><br>$(<span class="hljs-string">&#x27;#d1&#x27;</span>).remove()<br></code></pre></td></tr></table></figure><h1 id="7-复制元素"><a href="#7-复制元素" class="headerlink" title="7.复制元素"></a>7.复制元素</h1><p>调用clone方法</p>]]></content>
    
    
    
    <tags>
      
      <tag>JQuery</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery 样式</title>
    <link href="/2020/07/29/2.%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F/"/>
    <url>/2020/07/29/2.%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-修改单个样式-css方法"><a href="#1-修改单个样式-css方法" class="headerlink" title="1.修改单个样式 css方法"></a>1.修改单个样式 css方法</h2><p>获取jQuery对象，调用css方法，传入键值对修改</p><p>例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;div&#x27;</span>).css(<span class="hljs-string">&#x27;background&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-修改多个样式-css方法"><a href="#2-修改多个样式-css方法" class="headerlink" title="2.修改多个样式 css方法"></a>2.修改多个样式 css方法</h2><p>获取jQuery对象，调用css方法，传入对象</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$(<span class="hljs-string">&#x27;div&#x27;</span>)<span class="hljs-selector-class">.css</span>(&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>,<br><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>,<br><span class="hljs-attribute">background</span>:red<br>&#125;)<br><span class="hljs-comment">//当属性由多个单词构成时，给键名传字符串or去掉-</span><br>例如<br>$(<span class="hljs-string">&#x27;div&#x27;</span>)<span class="hljs-selector-class">.css</span>(&#123;<br>fontSize:<span class="hljs-string">&quot;30px&quot;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="3-获取单个样式的值-css方法"><a href="#3-获取单个样式的值-css方法" class="headerlink" title="3.获取单个样式的值 css方法"></a>3.获取单个样式的值 css方法</h2><p>获取jQuery对象，调用css方法，传入一个属性名，返回值是该属性的值</p><h2 id="4-添加某个类addClass-‘类名’"><a href="#4-添加某个类addClass-‘类名’" class="headerlink" title="4.添加某个类addClass(‘类名’)"></a>4.添加某个类addClass(‘类名’)</h2><p>获取jQuery对象，调用addClass方法，传入一个类名</p><h2 id="5-判断某对象是否存在某一个类-hasClass"><a href="#5-判断某对象是否存在某一个类-hasClass" class="headerlink" title="5.判断某对象是否存在某一个类 hasClass()"></a>5.判断某对象是否存在某一个类 hasClass()</h2><p>获取jQuery对象，调用hasClass方法，传入一个类名 返回值是布尔类型</p><h2 id="6-移除某个类-removeClass-‘类名’"><a href="#6-移除某个类-removeClass-‘类名’" class="headerlink" title="6.移除某个类 removeClass(‘类名’)"></a>6.移除某个类 removeClass(‘类名’)</h2><p>获取jQuery对象，调用removeClass方法，传入一个类名</p><h2 id="7-实现有某个类就删除某个类，反之添加某个类，集456大成"><a href="#7-实现有某个类就删除某个类，反之添加某个类，集456大成" class="headerlink" title="7.实现有某个类就删除某个类，反之添加某个类，集456大成"></a>7.实现有某个类就删除某个类，反之添加某个类，集456大成</h2><p>获取jQuery对象，调用toggleClass方法，传入一个类名</p>]]></content>
    
    
    
    <tags>
      
      <tag>JQuery</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2020/06/15/php%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2020/06/15/php%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-字符串长度-strlen-string-a-返回字符串的长度，以字符记"><a href="#1-字符串长度-strlen-string-a-返回字符串的长度，以字符记" class="headerlink" title="1.字符串长度 strlen(string a) 返回字符串的长度，以字符记"></a>1.字符串长度 strlen(string a) 返回字符串的长度，以字符记</h2><h2 id="2-单词计数-str-word-count-字符串-对字符串进行计数"><a href="#2-单词计数-str-word-count-字符串-对字符串进行计数" class="headerlink" title="2.单词计数  str_word_count(字符串) 对字符串进行计数"></a>2.单词计数  str_word_count(字符串) 对字符串进行计数</h2><h3 id="3-字符串反转-strrev-字符串"><a href="#3-字符串反转-strrev-字符串" class="headerlink" title="3.字符串反转 strrev(字符串)"></a>3.字符串反转 strrev(字符串)</h3><h3 id="4-检索指定的文本或字符"><a href="#4-检索指定的文本或字符" class="headerlink" title="4.检索指定的文本或字符"></a>4.检索指定的文本或字符</h3><ul><li><p> strpos(字符串) 找到返回字符下标位置 否则返回false 从0开始  查找的是第一次出现的位置</p></li><li><p>strrpos(字符串) 查找字符串在另一字符串中最后一次出现的位置。</p></li><li><p>strrchr() 函数查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符。</p></li></ul><h3 id="5-替换文本-str-replace-“要被替换的字符”，“用来替换的字符”，“目标字符串”"><a href="#5-替换文本-str-replace-“要被替换的字符”，“用来替换的字符”，“目标字符串”" class="headerlink" title="5.替换文本 str_replace(“要被替换的字符”，“用来替换的字符”，“目标字符串”)"></a>5.替换文本 str_replace(“要被替换的字符”，“用来替换的字符”，“目标字符串”)</h3><h3 id="6-substr-string，-开始下标，-截取长度-开始下标可以为负数"><a href="#6-substr-string，-开始下标，-截取长度-开始下标可以为负数" class="headerlink" title="6.substr(string， 开始下标， 截取长度) 开始下标可以为负数"></a>6.substr(string， 开始下标， 截取长度) 开始下标可以为负数</h3><h3 id="7-strpos-string-目標字符-，從左往右搜索，返回第一個目標的下標位置"><a href="#7-strpos-string-目標字符-，從左往右搜索，返回第一個目標的下標位置" class="headerlink" title="7.strpos(string, 目標字符)，從左往右搜索，返回第一個目標的下標位置"></a>7.strpos(string, 目標字符)，從左往右搜索，返回第一個目標的下標位置</h3><h3 id="8-strrops-string-要查找的字符-從右往左返回第一個符合的下標位置"><a href="#8-strrops-string-要查找的字符-從右往左返回第一個符合的下標位置" class="headerlink" title="8.strrops(string,要查找的字符) 從右往左返回第一個符合的下標位置"></a>8.strrops(string,要查找的字符) 從右往左返回第一個符合的下標位置</h3>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css 笔记</title>
    <link href="/2020/06/04/css/"/>
    <url>/2020/06/04/css/</url>
    
    <content type="html"><![CDATA[<h2 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h2><p>select 放在表单里要添加name属性 option选项<del>要</del>不用添加value属性，option里的就是value值</p><h2 id="主流浏览器及其内核"><a href="#主流浏览器及其内核" class="headerlink" title="主流浏览器及其内核"></a>主流浏览器及其内核</h2><table><thead><tr><th>IE</th><th>trident</th></tr></thead><tbody><tr><td>Firefox</td><td>Gecko</td></tr><tr><td>Google</td><td>webkit/blink</td></tr><tr><td>Safari</td><td>webkit</td></tr><tr><td>Opera</td><td>presto</td></tr></tbody></table><h2 id="1-引入css"><a href="#1-引入css" class="headerlink" title="1.引入css"></a>1.引入css</h2><p>①行间样式 在标签里的style属性直接写</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> style=<span class="hljs-string">&quot;width:100px;&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>②页面级css  在head标签里写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>③引入外部css文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;相对路径&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h2 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h2><p>①id选择器</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">#<span class="hljs-symbol">id</span>&#123;css代码&#125; 一个元素只能有一个<span class="hljs-symbol">id</span>，一个<span class="hljs-symbol">id</span>对应一个元素<br></code></pre></td></tr></table></figure><p>②类选择器</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">html 端 一个标签中的多个<span class="hljs-keyword">class</span>写法<br>&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">demo1</span> <span class="hljs-symbol">demo2</span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">css端</span><br><span class="xml">.类名</span><span class="hljs-template-variable">&#123;css代码&#125;</span><span class="xml">  一颗类可对应多个元素</span><br></code></pre></td></tr></table></figure><p>③标签选择器</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">标签名</span><span class="hljs-template-variable">&#123;css代码&#125;</span><span class="xml">  会选出所有的同一类标签</span><br></code></pre></td></tr></table></figure><p>④通配符选择器</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*&#123;css代码&#125;  *</span>代表所有、任意的<br></code></pre></td></tr></table></figure><p>⑤属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">通过标签的属性选择  有该属性的都被选中<br><span class="hljs-selector-attr">[属性名]</span>/<span class="hljs-selector-attr">[属性名=值]</span><br></code></pre></td></tr></table></figure><p>3.选择器优先级</p><p>！important才是老大</p><p>①行间样式 &gt; id选择器</p><p>②id选择器优先级 &gt; 类选择器</p><p>③类选择器 &gt; 标签选择器</p><p>④标签选择器 &gt; 通配符*</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">注：类选择器与属性选择器优先级相同 看先后顺序 后来者居上 后面的生效<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">！important &gt; 行间样式 &gt; <span class="hljs-built_in">id</span> &gt; <span class="hljs-built_in">class</span> | 属性选择器 &gt; 标签选择器 &gt; 通配符*<br></code></pre></td></tr></table></figure><h2 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h2><p>在css代码中写到属性的后面，该属性优先级会变得最高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">例：<br><span class="hljs-selector-tag">div</span>&#123;<span class="hljs-attribute">background</span>:red<span class="hljs-meta">!important</span>;&#125; <span class="hljs-comment">/*该优先级变得最高*/</span><br></code></pre></td></tr></table></figure><h2 id="css权重"><a href="#css权重" class="headerlink" title="css权重"></a>css权重</h2><table><thead><tr><th>选择器</th><th>权重值（256进制）</th></tr></thead><tbody><tr><td>！important</td><td>Infinity</td></tr><tr><td>行间样式</td><td>1000</td></tr><tr><td>id</td><td>100</td></tr><tr><td>class|属性|伪类</td><td>10</td></tr><tr><td>标签|伪元素</td><td>1</td></tr><tr><td>通配符</td><td>0</td></tr></tbody></table><p>每个选择器的权重是每一排选择器的权重之和</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cal">例如 ： #<span class="hljs-keyword">div</span> <span class="hljs-keyword">div</span> &#123;&#125; --&gt;权重为 <span class="hljs-number">100</span> + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="父子选择器"><a href="#父子选择器" class="headerlink" title="父子选择器"></a>父子选择器</h2><p>类似多重嵌套, 有多个层次 ，每个层次的选择器可以各不相同</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">demo1</span>&quot;&gt;<br>&lt;<span class="hljs-symbol">span</span>&gt;<br>&lt;<span class="hljs-symbol">em</span>&gt;&lt;<span class="hljs-symbol">em</span>&gt;<br>&lt;<span class="hljs-symbol">span</span>&gt;<br>&lt;<span class="hljs-symbol">em</span>&gt;&lt;/<span class="hljs-symbol">em</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">选择上面的<span class="hljs-selector-tag">em</span>标签<br><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span> <span class="hljs-selector-tag">em</span>&#123;<br><br>&#125;或<br><span class="hljs-selector-class">.demo1</span> <span class="hljs-selector-tag">span</span> <span class="hljs-selector-tag">em</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>父子选择器不一定要直接的父子关系，间接也可以</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">em</span>&#123;&#125;  //解析 <span class="hljs-selector-tag">div</span>下的所有<span class="hljs-selector-tag">em</span><br></code></pre></td></tr></table></figure><h3 id="直接子元素选择器"><a href="#直接子元素选择器" class="headerlink" title="直接子元素选择器"></a>直接子元素选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">em</span> <span class="hljs-selector-tag">div</span>下的一级<span class="hljs-selector-tag">em</span> 只搜索<span class="hljs-selector-tag">div</span>儿子层次下的<span class="hljs-selector-tag">em</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">遍历父子选择器从右向左<br></code></pre></td></tr></table></figure><h2 id="并列选择器"><a href="#并列选择器" class="headerlink" title="并列选择器"></a>并列选择器</h2><p>不能加空格，标签选择器需放前面</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br>&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">demo</span>&quot;&gt;<span class="hljs-symbol">2</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">p</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">demo</span>&quot;&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">要求 <span class="hljs-number">2</span>变色<br>用到并列选择器<br>div.demo&#123;<span class="hljs-regexp">//</span>理解 又是div而且有demo类<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">em</span>, <br><span class="hljs-selector-tag">strong</span>, <br><span class="hljs-selector-tag">span</span>&#123;<br><br>&#125;  选择到标签为<span class="hljs-selector-tag">em</span> <span class="hljs-selector-tag">strong</span> <span class="hljs-selector-tag">span</span>的标签，即选择多个标签<br>分组选择器不会覆盖其他的<br></code></pre></td></tr></table></figure><h2 id="css属性"><a href="#css属性" class="headerlink" title="css属性"></a>css属性</h2><h3 id="font-size-字体大小"><a href="#font-size-字体大小" class="headerlink" title="font-size 字体大小"></a>font-size 字体大小</h3><p>默认是16px 设置的是高度</p><h3 id="font-weight-加粗"><a href="#font-weight-加粗" class="headerlink" title="font-weight 加粗"></a>font-weight 加粗</h3><p>font-weight的值</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">lighter <span class="hljs-attribute">normal</span> bold bolder 一次增大 100 200 -900 依次增大<br>600是bold<br></code></pre></td></tr></table></figure><h3 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style 字体风格"></a>font-style 字体风格</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-style</span>:italic; 斜体<br></code></pre></td></tr></table></figure><h3 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family 字体"></a>font-family 字体</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">font-family</span>:arial; <span class="hljs-comment">//乔布斯字体</span><br></code></pre></td></tr></table></figure><h3 id="color-设置字体颜色"><a href="#color-设置字体颜色" class="headerlink" title="color 设置字体颜色"></a>color 设置字体颜色</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">设置值的三种方式<br><span class="hljs-number">1.</span>英文单词 <br><span class="hljs-number">2.</span>颜色代码 <span class="hljs-attr">#16</span>进制<br><span class="hljs-number">3.</span>颜色函数 rgb<span class="hljs-comment">(255,255,255)</span>;<br></code></pre></td></tr></table></figure><h3 id="border-边框"><a href="#border-边框" class="headerlink" title="border 边框"></a>border 边框</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">border</span> 粗细 样式 颜色 //粗细为px 样式为 solid实体 dotted点状虚线 dashed条状虚线<br><span class="hljs-built_in">border</span>:<span class="hljs-built_in">border</span>-<span class="hljs-built_in">width</span> <span class="hljs-built_in">border</span>-<span class="hljs-built_in">style</span> <span class="hljs-built_in">border</span>-<span class="hljs-built_in">color</span><br>可以单独设置<br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">border</span>-left-<span class="hljs-built_in">color</span><br><span class="hljs-built_in">border</span>-left-<span class="hljs-built_in">width</span><br><span class="hljs-built_in">border</span>-left-<span class="hljs-built_in">style</span><br><span class="hljs-built_in">border</span>-top-<span class="hljs-built_in">color</span><br>当边框达到最大时会有三角形<br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">透明色： <span class="hljs-built_in">transparent</span><br></code></pre></td></tr></table></figure><h3 id="text-align-文本对齐方式"><a href="#text-align-文本对齐方式" class="headerlink" title="text-align 文本对齐方式"></a>text-align 文本对齐方式</h3><p>三个值 left center right</p><h3 id="line-height-行高"><a href="#line-height-行高" class="headerlink" title="line-height 行高"></a>line-height 行高</h3><p>单行文本所占高度 当这个值等于容器高度时，该容器内单行文本垂直居中</p><h3 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent 首行缩进"></a>text-indent 首行缩进</h3><p>单位 em 例如 text-indent:2em;缩进两个</p><p>em = 1 X font-size</p><h3 id="del标签-带有删除线"><a href="#del标签-带有删除线" class="headerlink" title="del标签 带有删除线"></a>del标签 带有删除线</h3><h3 id="text-decoration-文本装饰"><a href="#text-decoration-文本装饰" class="headerlink" title="text-decoration 文本装饰"></a>text-decoration 文本装饰</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">删除线 <span class="hljs-built_in">text</span>-decoration:line-<span class="hljs-keyword">through</span><br>下划线 <span class="hljs-built_in">text</span>-decoration:underline<br>上划线 <span class="hljs-built_in">text</span>-decoration:overline<br></code></pre></td></tr></table></figure><h3 id="cursor-鼠标移入样式"><a href="#cursor-鼠标移入样式" class="headerlink" title="cursor 鼠标移入样式"></a>cursor 鼠标移入样式</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">移上去是小手 <span class="hljs-built_in">cursor</span>:pointer<br>变成小问号 <span class="hljs-built_in">cursor</span>:<span class="hljs-keyword">help</span><br></code></pre></td></tr></table></figure><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>鼠标移入会加上该样式。移出会取消<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><p>任意一个标签都有伪元素，每一个元素诞生的时候在逻辑最前的位置和在逻辑的最后的位置各有一个伪元素，注意，这也是一个元素，可以对他进行操作，伪元素是行级元素，元素跟伪元素是父子关系</p><h3 id="css选择伪元素"><a href="#css选择伪元素" class="headerlink" title="css选择伪元素"></a>css选择伪元素</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">标签名::<span class="hljs-keyword">before</span>&#123;<br>选中的是逻辑的最前的位置<br>&#125;<br>标签名::<span class="hljs-keyword">after</span>&#123;<br>选中的是逻辑上最后的位置<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="伪元素的属性"><a href="#伪元素的属性" class="headerlink" title="伪元素的属性"></a>伪元素的属性</h3><ol><li>content :”显示的内容”  必须有content伪元素才生效</li><li>display:inline-block;</li><li>width:</li><li>height</li><li>background</li><li>其他元素有的他也有</li></ol><h2 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h2><h3 id="1-行级元素-内联元素-inline"><a href="#1-行级元素-内联元素-inline" class="headerlink" title="1.行级元素 内联元素  inline"></a>1.行级元素 内联元素  inline</h3><p>内容决定所占位置，不可以通过css改变宽高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span> <span class="hljs-selector-tag">strong</span> <span class="hljs-selector-tag">em</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">del</span><br></code></pre></td></tr></table></figure><h3 id="2-块级元素-block"><a href="#2-块级元素-block" class="headerlink" title="2.块级元素  block"></a>2.块级元素  block</h3><p>独占一行，可以css改宽高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">form</span> <span class="hljs-selector-tag">address</span><br></code></pre></td></tr></table></figure><h3 id="3-行级块元素-inline-block"><a href="#3-行级块元素-inline-block" class="headerlink" title="3.行级块元素 inline-block"></a>3.行级块元素 inline-block</h3><p>内容决定大小，可以改变宽高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">图片<span class="hljs-selector-tag">img</span>标签可以只设置高或者宽，会自动按图片等比例缩放<br></code></pre></td></tr></table></figure><p>都可以通过display属性转换</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">凡是带有<span class="hljs-keyword">inline</span>的都有文字特性<br></code></pre></td></tr></table></figure><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="盒子三大部分"><a href="#盒子三大部分" class="headerlink" title="盒子三大部分"></a>盒子三大部分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">盒子壁 <span class="hljs-attribute">border</span><br><br>内边距 <span class="hljs-attribute">padding</span><br><br>盒子内容 <span class="hljs-attribute">width</span> + <span class="hljs-attribute">height</span><br><br>外边距 <span class="hljs-attribute">margin</span><br></code></pre></td></tr></table></figure><h3 id="padding-内边距"><a href="#padding-内边距" class="headerlink" title="padding 内边距"></a>padding 内边距</h3><p>padding 上 右 下 左</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq">也可以<br>padding-<span class="hljs-built_in">left</span><br>padding-<span class="hljs-built_in">top</span><br>pading-<span class="hljs-built_in">right</span><br>padding-<span class="hljs-built_in">bottom</span><br></code></pre></td></tr></table></figure><h3 id="margin-外边距和内边距的都差不多"><a href="#margin-外边距和内边距的都差不多" class="headerlink" title="margin 外边距和内边距的都差不多"></a>margin 外边距和内边距的都差不多</h3><h5 id="width-100-2"><a href="#width-100-2" class="headerlink" title="width 100   + 2"></a>width 100   + 2</h5><p>height 100 + 2</p><h3 id="position-定位"><a href="#position-定位" class="headerlink" title="position 定位"></a>position 定位</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attribute">position</span>:absolute 绝对定位<br><br><span class="hljs-attribute">left</span>:距离左边的距离】<br><br><span class="hljs-attribute">top</span>距离上边的距离<br><br><span class="hljs-attribute">right</span> 距离右边的距离<br><br><span class="hljs-attribute">bottom</span> 距离底部的距离<br></code></pre></td></tr></table></figure><h2 id="层模型"><a href="#层模型" class="headerlink" title="层模型"></a>层模型</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">position</span>:absolute;<br><br>当一个元素有绝对定位时，他就脱离了原来的层面，跑到上面去了。之前的层面就空了，其他元素可乘虚而入<br>脱离原来位置进行定位<br>absolute  定位相当于上一个有定位的元素<br>absolute 相对于最近的有定位（绝对、相对定位都行）的父级进行定位，如果没有相当于文档定位<br>可通过绝对定位，然后<span class="hljs-attribute">left</span> <span class="hljs-attribute">right</span> 居中<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">position:<span class="hljs-built_in">relative</span><br>当一个元素有绝对定位时，他就脱离了原来的层面，跑到上面去了,其他元素不能乘虚而入<br>保留原来位置进行定位<br><span class="hljs-built_in">relative</span> 只相当于原来的位置进行<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">用relative做参照物，absolute做定位<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">position:fixed  固定定位<br></code></pre></td></tr></table></figure><h2 id="margin塌陷"><a href="#margin塌陷" class="headerlink" title="margin塌陷"></a>margin塌陷</h2><p>margin-top属性bug</p><p>在父子元素中，子元素使用margin-top时无效果，原因，子元素此时相对的margin-top是浏览器而非父级元素</p><h3 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h3><p> 手动为父级元素加上margin-top（不推荐使用）</p><h3 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h3><p>bfc 语法</p><p>block format context  块级格式化上下文</p><p>如何触发一个盒子的bfc</p><ol><li>position:absolute;</li><li>display:inline-block;</li><li>float:left;</li><li>overflow:hidden;  溢出部分隐藏</li></ol><h2 id="margin合并问题"><a href="#margin合并问题" class="headerlink" title="margin合并问题"></a>margin合并问题</h2><p>两个兄弟块级元素之间margin合并问题</p><p>即margin-bottom和margin-top属性值会重合</p><h3 id="解决办法1（不推荐）"><a href="#解决办法1（不推荐）" class="headerlink" title="解决办法1（不推荐）"></a>解决办法1（不推荐）</h3><p>加个父级元素 然后触发bfc</p><h3 id="解决办法2"><a href="#解决办法2" class="headerlink" title="解决办法2"></a>解决办法2</h3><p>把其中一个值调大</p><h2 id="浮动模型-float"><a href="#浮动模型-float" class="headerlink" title="浮动模型 float"></a>浮动模型 float</h2><p><img src="C:\Users\ZXY\AppData\Roaming\Typora\typora-user-images\image-20200405132309982.png" alt="image-20200405132309982"></p><p>看不到就分层</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>clear:both;  –&gt;必须是块级元素才生效，才能用</p><p>原理：通过添加一个没有浮动的元素撑开父元素</p><p>清楚浮动可在伪元素内加</p><p><img src="C:\Users\ZXY\AppData\Roaming\Typora\typora-user-images\image-20200405162628895.png" alt="image-20200405162628895"></p><h2 id="溢出文字，用…表示"><a href="#溢出文字，用…表示" class="headerlink" title="溢出文字，用…表示"></a>溢出文字，用…表示</h2><h3 id="1-单行文本"><a href="#1-单行文本" class="headerlink" title="1.单行文本"></a>1.单行文本</h3><p>三件套</p><p>①取消换行功能  white-space:nowrap;</p><p>②隐藏溢出  overflow:hidden;</p><p>③溢出的文字用…表示  text-overflow:ellipsis;</p><h3 id="2-多行文本"><a href="#2-多行文本" class="headerlink" title="2.多行文本"></a>2.多行文本</h3><p>只做隐藏溢出，不做打点显示？</p><h2 id="用图片做背景"><a href="#用图片做背景" class="headerlink" title="用图片做背景"></a>用图片做背景</h2><h3 id="1-引入代码"><a href="#1-引入代码" class="headerlink" title="1.引入代码"></a>1.引入代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">图片的地址</span>);<br></code></pre></td></tr></table></figure><h3 id="2-设置图片大小"><a href="#2-设置图片大小" class="headerlink" title="2.设置图片大小"></a>2.设置图片大小</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">background-size:宽度大小 高度大小;  <span class="hljs-comment">//设置背景图片的大小</span><br></code></pre></td></tr></table></figure><p>当设置图片小于背景大小时，图片会以重复出现的形势铺满整个屏幕，即background-repeat的值为repeat，这也是默认值</p><p>当设置该值为no-repeat时，图片只显示一张，不会平铺出现。</p><h3 id="3-background-repeat"><a href="#3-background-repeat" class="headerlink" title="3.background-repeat"></a>3.background-repeat</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">主要有四个值<br><span class="hljs-number">1.</span><span class="hljs-keyword">repeat</span>  铺满整个背景大小<br><span class="hljs-number">2.</span><span class="hljs-keyword">no</span>-<span class="hljs-keyword">repeat</span> 不平铺<br><span class="hljs-number">3.</span><span class="hljs-keyword">repeat</span>-x  x轴方向平铺<br><span class="hljs-number">4.</span><span class="hljs-keyword">repeat</span>-y y轴方向平铺<br></code></pre></td></tr></table></figure><h3 id="4-调整背景图片的位置"><a href="#4-调整背景图片的位置" class="headerlink" title="4.调整背景图片的位置"></a>4.调整背景图片的位置</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">background-position: x y;  xy为坐标<br></code></pre></td></tr></table></figure><p>神奇的表达</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">background</span>-<span class="hljs-built_in">position</span>: left <span class="hljs-built_in">center</span>;<br>  左中     位置就在左中<br></code></pre></td></tr></table></figure><h2 id="网络不好logo也能跳转"><a href="#网络不好logo也能跳转" class="headerlink" title="网络不好logo也能跳转"></a>网络不好logo也能跳转</h2><p>两种方案</p><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">加文本缩进把文字搞到图片大小外面，取消换行，隐藏文字<br></code></pre></td></tr></table></figure><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">通过把设置背景图片的容器<span class="hljs-attribute">height</span>设置为<span class="hljs-number">0</span>，在设置<span class="hljs-attribute">padding-top</span>来放背景图片<br></code></pre></td></tr></table></figure><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p>行级元素只能嵌套行级元素</p><p>块级元素可以嵌套任何元素</p><ul><li><p>p里面不能嵌套块级元素</p></li><li><p>a标签不能嵌套a标签</p></li><li><p>一个行级元素或具有文本属性的元素，一旦在元素外面添加元素，默认是底部对齐，一旦元素内添加了文字，那外面的文字就会对齐里面的文字</p></li><li><p>调整对齐线</p></li><li><p>vertical-algin:;值为px</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日期与时间</title>
    <link href="/2020/06/01/%E6%97%A5%E6%9C%9F%E4%B8%8E%E6%97%B6%E9%97%B4/"/>
    <url>/2020/06/01/%E6%97%A5%E6%9C%9F%E4%B8%8E%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="一、设置时区"><a href="#一、设置时区" class="headerlink" title="一、设置时区"></a>一、设置时区</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">date_default_timezone_set(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>)  <span class="hljs-comment">//设置时区</span><br></code></pre></td></tr></table></figure><h3 id="二、获取当前Unix时间戳"><a href="#二、获取当前Unix时间戳" class="headerlink" title="二、获取当前Unix时间戳"></a>二、获取当前Unix时间戳</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">time()<br></code></pre></td></tr></table></figure><h3 id="三、获取指定时间的Unix时间戳"><a href="#三、获取指定时间的Unix时间戳" class="headerlink" title="三、获取指定时间的Unix时间戳"></a>三、获取指定时间的Unix时间戳</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">mktime(小时,分钟,秒,月,日,年)  <span class="hljs-comment">//时分秒月日年 参数将被设为当前本地日期和时间的当前值</span><br></code></pre></td></tr></table></figure><h3 id="四、从Unix时间取得时间日期信息-date函数"><a href="#四、从Unix时间取得时间日期信息-date函数" class="headerlink" title="四、从Unix时间取得时间日期信息 date函数"></a>四、从Unix时间取得时间日期信息 date函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">date(&#x27;放你要的日期格式&#x27;,&#x27;时间戳&#x27;)//时间戳自动转当前时间 第二个参数默认是当前的<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs subunit">格式符<br>Y 四位数的年份<br>y 两位数的年份<br>m 月份-例如<span class="hljs-string">-01</span><br>d 日<span class="hljs-string">-01</span> 02<br>G 小时，24小时制<br>g 小时，12小时制<br>i 分钟 有前导零的分钟<br>s 秒<br>D 星期中的第几天，文本表示，3 个字母 Mon 到 Sun<br></code></pre></td></tr></table></figure><h3 id="五、获取Unix时间戳和微秒数"><a href="#五、获取Unix时间戳和微秒数" class="headerlink" title="五、获取Unix时间戳和微秒数"></a>五、获取Unix时间戳和微秒数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">microtime</span><span class="hljs-params">()</span></span> 函数 返回当前Unix时间戳和微秒数<br>可以用来计算时间差<br></code></pre></td></tr></table></figure><h3 id="六、四舍五入round"><a href="#六、四舍五入round" class="headerlink" title="六、四舍五入round()"></a>六、四舍五入round()</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">round</span></span>(要四舍五入的数，<span class="hljs-variable">int</span>类型保留小数点后几位)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise</title>
    <link href="/2020/05/11/promise/"/>
    <url>/2020/05/11/promise/</url>
    
    <content type="html"><![CDATA[<h2 id="1-同步和异步"><a href="#1-同步和异步" class="headerlink" title="1.同步和异步"></a>1.同步和异步</h2><p>同步代码：放在主线程中，立即执行</p><p>异步代码：例如定时器、网络请求等，遇到异步代码会先扔到任务队列中，等到同步代码执行完毕后再轮询任务队列，执行异步代码</p><h2 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2.Promise"></a>2.Promise</h2><p> promise里的普通代码也是同步运行的</p><p> 定时器等都是异步操作，需等同步代码执行完毕后再执行</p><h2 id="3-Promise的微任务"><a href="#3-Promise的微任务" class="headerlink" title="3.Promise的微任务"></a>3.Promise的微任务</h2><p>微任务的执行要优先于宏任务（promise外的异步操作都会被扔到宏任务队列中）</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3 弹性盒子</title>
    <link href="/2020/05/11/css3%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/"/>
    <url>/2020/05/11/css3%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h2 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h2><p>弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。</p><p>弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。</p><p>弹性容器内包含了一个或多个弹性子元素。</p><p><strong>注意：</strong> 弹性容器外及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局。</p><p>弹性子元素通常在弹性盒子内一行显示。默认情况每个容器只有一行。</p><p>以下元素展示了弹性子元素在一行内显示，从左到右:</p><h4 id="修改默认排序方向-direction属性-默认从左到右"><a href="#修改默认排序方向-direction属性-默认从左到右" class="headerlink" title="修改默认排序方向 direction属性 默认从左到右"></a>修改默认排序方向 direction属性 默认从左到右</h4><p>从右到左 direction:rt1;   //rt1(right-to-left)</p><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p><code>flex-direction</code> 属性指定了弹性子元素在父容器中的位置。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">flex-direction: <span class="hljs-keyword">row</span> | <span class="hljs-keyword">row</span>-<span class="hljs-keyword">reverse</span> | <span class="hljs-keyword">column</span> | <span class="hljs-keyword">column</span>-<span class="hljs-keyword">reverse</span> //任选其一<br></code></pre></td></tr></table></figure><p><code>flex-direction</code>的值有:</p><ul><li>row：横向从左到右排列（左对齐），默认的排列方式。</li><li>row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面。</li><li>column：纵向排列。</li><li>column-reverse：反转纵向排列，从后往前排，最后一项排在最上面。</li></ul><h3 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h3><p>内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。</p><p>justify-content 语法如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">justify-content: flex-start | flex-<span class="hljs-keyword">end</span> | center | <span class="hljs-literal">space</span>-<span class="hljs-keyword">between</span> | <span class="hljs-literal">space</span>-<span class="hljs-keyword">around</span><br></code></pre></td></tr></table></figure><p>各个值解析:</p><ul><li><p>flex-start：</p><p>弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。</p></li><li><p>flex-end：</p><p>弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。</p></li><li><p>center：</p><p>弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。</p></li><li><p>space-between：</p><p>弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。</p></li><li><p>space-around：</p><p>弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。</p></li></ul><h3 id="align-items-属性"><a href="#align-items-属性" class="headerlink" title="align-items 属性"></a>align-items 属性</h3><p><code>align-items</code> 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">align-items: flex-start | <span class="hljs-type">flex</span>-<span class="hljs-keyword">end</span> | <span class="hljs-type">center</span> | <span class="hljs-type">baseline</span> | <span class="hljs-type">stretch</span><br></code></pre></td></tr></table></figure><p>各个值解析:</p><ul><li>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</li><li>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</li><li>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</li><li>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</li><li>stretch：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</li></ul><p>以下实例演示了 <code>stretch(默认值)</code> 的使用:</p><h2 id="flex-wrap-属性"><a href="#flex-wrap-属性" class="headerlink" title="flex-wrap 属性"></a>flex-wrap 属性</h2><p><strong>flex-wrap</strong> 属性用于指定弹性盒子的子元素换行方式。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">flex-wrap: nowrap|<span class="hljs-type">wrap</span>|<span class="hljs-type">wrap</span>-reverse|<span class="hljs-type">initial</span>|<span class="hljs-type">inherit</span>;<br></code></pre></td></tr></table></figure><p>各个值解析:</p><ul><li><strong>nowrap</strong> - 默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器。</li><li><strong>wrap</strong> - 弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行</li><li><strong>wrap-reverse</strong> -反转 wrap 排列。</li></ul><h3 id="align-content-属性-行也就是一行弹性盒子元素"><a href="#align-content-属性-行也就是一行弹性盒子元素" class="headerlink" title="align-content 属性 行也就是一行弹性盒子元素"></a>align-content 属性 行也就是一行弹性盒子元素</h3><p><code>align-content</code> 属性用于修改 <code>flex-wrap</code> 属性的行为。类似于 <code>align-items</code>, 但它不是设置弹性子元素的对齐，而是设置各个行的对齐。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">align-content: flex-start | <span class="hljs-type">flex</span>-<span class="hljs-keyword">end</span> | <span class="hljs-type">center</span> | <span class="hljs-type">space</span>-between | <span class="hljs-type">space</span>-around | <span class="hljs-type">stretch</span><br></code></pre></td></tr></table></figure><p>各个值解析:</p><ul><li><code>stretch</code> - 默认。各行将会伸展以占用剩余的空间。</li><li><code>flex-start</code> - 各行向弹性盒容器的起始位置堆叠。</li><li><code>flex-end</code> - 各行向弹性盒容器的结束位置堆叠。</li><li><code>center</code> -各行向弹性盒容器的中间位置堆叠。</li><li><code>space-between</code> -各行在弹性盒容器中平均分布。</li><li><code>space-around</code> - 各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。</li></ul><h3 id="弹性子元素属性"><a href="#弹性子元素属性" class="headerlink" title="弹性子元素属性"></a>弹性子元素属性</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">order</span></span>: <br></code></pre></td></tr></table></figure><p>各个值解析:</p><ul><li><integer>：用整数值来定义排列顺序，数值小的排在前面。可以为负值。</li></ul><p><code>order</code> 属性设置弹性容器内弹性子元素的属性:</p><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>设置”margin”值为”auto”值，自动获取弹性容器中剩余的空间。所以设置垂直方向margin值为”auto”，可以使弹性子元素在弹性容器的两上轴方向都完全居中。</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p><code>align-self</code> 属性用于设置弹性元素自身在侧轴（纵轴）方向上的对齐方式。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">align-self: <span class="hljs-built_in">auto</span> | <span class="hljs-type">flex</span>-start | <span class="hljs-type">flex</span>-<span class="hljs-keyword">end</span> | <span class="hljs-type">center</span> | <span class="hljs-type">baseline</span> | <span class="hljs-type">stretch</span><br></code></pre></td></tr></table></figure><p>各个值解析:</p><ul><li>auto：如果’align-self’的值为’auto’，则其计算值为元素的父元素的’align-items’值，如果其没有父元素，则计算值为’stretch’。</li><li>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</li><li>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</li><li>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</li><li>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</li><li>stretch：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</li></ul><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code> 属性用于指定弹性子元素如何分配空间。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">flex: <span class="hljs-built_in">auto</span> | <span class="hljs-type">initial</span> | <span class="hljs-type">none</span> | <span class="hljs-type">inherit</span> |  <span class="hljs-type">[ flex</span>-grow ] |<span class="hljs-type">| [ flex</span>-shrink ] |<span class="hljs-type">| [ flex</span>-basis ]<br></code></pre></td></tr></table></figure><p>各个值解析:</p><ul><li>auto: 计算值为 1 1 auto</li><li>initial: 计算值为 0 1 auto</li><li>none：计算值为 0 0 auto</li><li>inherit：从父元素继承</li><li>[ flex-grow ]：定义弹性盒子元素的扩展比率。</li><li>[ flex-shrink ]：定义弹性盒子元素的收缩比率。</li><li>[ flex-basis ]：定义弹性盒子元素的默认基准值。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es6新增</title>
    <link href="/2020/05/02/js%20Es6/"/>
    <url>/2020/05/02/js%20Es6/</url>
    
    <content type="html"><![CDATA[<h2 id="变量-赋值"><a href="#变量-赋值" class="headerlink" title="变量/赋值"></a>变量/赋值</h2><ol><li>var 可以重复赋值 修改 没有块级作用域</li><li>let 变量 不可重复赋值 有块级作用域</li><li>const 常量 不可重复赋值 不可修改</li></ol><ul><li><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>let [a,b,c,d] = [1,2,3,4]</p><p>let {a,b,c,d} = {a:1,b:2,c:3,d:4}</p><h4 id="两个注意点"><a href="#两个注意点" class="headerlink" title="两个注意点"></a>两个注意点</h4><ol><li>左右两边一致，得是个东西 里 [] = [] {} = {}</li><li>定义赋值必须同步完成</li></ol></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1-箭头函数"><a href="#1-箭头函数" class="headerlink" title="1.箭头函数"></a>1.箭头函数</h3><ul><li>function关键字可以省略，参数用（）括起来</li><li>当且仅当 只有一个参数时，（）可以省略，仅有一条语句而且是return时，{}可以省略</li></ul><h3 id="2-默认参数"><a href="#2-默认参数" class="headerlink" title="2.默认参数"></a>2.默认参数</h3><p>如果没有参数传进来。则有默认参数</p><p>function(a=1){}</p><h3 id="3-参数展开"><a href="#3-参数展开" class="headerlink" title="3.参数展开"></a>3.参数展开</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(a,b,v,...args)</span>=&gt;&#123;ley<br><span class="hljs-comment">//接受剩余参数，args是一个数组</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br>||<br><br>...arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>相当于遍历了<br></code></pre></td></tr></table></figure><h2 id="数组-json"><a href="#数组-json" class="headerlink" title="数组/json"></a>数组/json</h2><h3 id="1-map-映射"><a href="#1-map-映射" class="headerlink" title="1.map() 映射"></a>1.map() 映射</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1= [<span class="hljs-number">34</span>,<span class="hljs-number">65</span>,<span class="hljs-number">76</span>,<span class="hljs-number">66</span>] =&gt; [<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>] <span class="hljs-comment">//进来个数一样，出去个数一样</span><br><span class="hljs-keyword">let</span> arr2 = arr1.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;<br><span class="hljs-keyword">if</span>(item&gt;<span class="hljs-number">60</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;)<br><span class="hljs-comment">//arr2 = [false,true,true,true]</span><br><span class="hljs-comment">//箭头函数简写</span><br><span class="hljs-keyword">let</span> arr2 = arr1.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt;= <span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure><h3 id="2-filter-过滤（true要false不要）"><a href="#2-filter-过滤（true要false不要）" class="headerlink" title="2.filter 过滤（true要false不要）"></a>2.filter 过滤（true要false不要）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">5</span>,<span class="hljs-number">67</span>,<span class="hljs-number">2</span>] <span class="hljs-comment">//要求，要奇数</span><br><span class="hljs-keyword">let</span> arr2 = arr1.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item%<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="3-foreach-遍历"><a href="#3-foreach-遍历" class="headerlink" title="3.foreach 遍历"></a>3.foreach 遍历</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">5</span>,<span class="hljs-number">67</span>,<span class="hljs-number">2</span>]<br><span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>arr1.foreach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>sum+=item<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-reduce-减少-汇总-进去一堆出来一个"><a href="#4-reduce-减少-汇总-进去一堆出来一个" class="headerlink" title="4.reduce  减少 汇总 进去一堆出来一个"></a>4.reduce  减少 汇总 进去一堆出来一个</h3>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cookie 和 session</title>
    <link href="/2020/04/30/cookies%E5%92%8Cseesion/"/>
    <url>/2020/04/30/cookies%E5%92%8Cseesion/</url>
    
    <content type="html"><![CDATA[<h2 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">setcookie</span><span class="hljs-params">(key,value,savetime)</span></span><br></code></pre></td></tr></table></figure><h2 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">setcookie</span><span class="hljs-params">(key,‘’,过期time)</span></span><br></code></pre></td></tr></table></figure><h2 id="连接session"><a href="#连接session" class="headerlink" title="连接session"></a>连接session</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">session_start</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h2 id="设置session"><a href="#设置session" class="headerlink" title="设置session"></a>设置session</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$_SESSION[<span class="hljs-string">&#x27;key&#x27;</span>] = value<br></code></pre></td></tr></table></figure><h2 id="删除session"><a href="#删除session" class="headerlink" title="删除session"></a>删除session</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">session_destory</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bootstrap</title>
    <link href="/2020/04/29/bootstrap4%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"/>
    <url>/2020/04/29/bootstrap4%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关于容器的宽度类"><a href="#1-关于容器的宽度类" class="headerlink" title="1.关于容器的宽度类"></a>1.关于容器的宽度类</h2><ol><li><p>固定宽度 .container </p></li><li><p>全屏宽度 .container-fluid</p></li></ol><h2 id="2-网格类-按一行12列来的"><a href="#2-网格类-按一行12列来的" class="headerlink" title="2.网格类 按一行12列来的"></a>2.网格类 按一行12列来的</h2><p>.col-针对所有设备</p><p>.col-sm -屏幕宽度等于或于576px</p><p>.col-md- 屏幕宽度等于或大于768px的设备</p><p>.col-lg -屏幕宽度等于或大于992px的</p><p>.col-xl-屏幕宽度大于等于或1200px的</p><h3 id="row下的垂直对齐方式"><a href="#row下的垂直对齐方式" class="headerlink" title="row下的垂直对齐方式"></a>row下的垂直对齐方式</h3><p>1.一行对齐 align-items-方向 （方向取值有：start、center、end）</p><p>2.单个容器对齐方式 align-self-方向 （方向取值同上）</p><h3 id="row下的水平对齐方式"><a href="#row下的水平对齐方式" class="headerlink" title="row下的水平对齐方式"></a>row下的水平对齐方式</h3><p>1.justify-content-方向     方向取值（start 左对齐、center 居中对齐、end右对齐 between 在两侧（平均分配两边的空白空间）、around…… ）</p><h3 id="改变row下容器的显示排序"><a href="#改变row下容器的显示排序" class="headerlink" title="改变row下容器的显示排序"></a>改变row下容器的显示排序</h3><p>排第一 order-first</p><p>指定排在n列 order-n</p><h2 id="3-卡片（面板）"><a href="#3-卡片（面板）" class="headerlink" title="3.卡片（面板）"></a>3.卡片（面板）</h2><h3 id="卡片基操"><a href="#卡片基操" class="headerlink" title="卡片基操"></a>卡片基操</h3><p>.card类用于创建一个卡片</p><p>.card-header 创建卡片的头部</p><p>.card-body 创建卡片的内容</p><p>.card-footer 创建卡片的底部</p><h3 id="颜色类"><a href="#颜色类" class="headerlink" title="颜色类"></a>颜色类</h3><p>Bootstrap 4 提供了多种卡片的背景颜色类： <strong>.bg-primary</strong>, <strong>.bg-success</strong>, <strong>.bg-info</strong>, <strong>.bg-warning</strong>, <strong>.bg-danger</strong>, <strong>.bg-secondary</strong>, <strong>.bg-dark</strong> 和 <strong>.bg-light</strong>。</p><h3 id="标题文本和链接"><a href="#标题文本和链接" class="headerlink" title="标题文本和链接"></a>标题文本和链接</h3><p>我们可以在头部元素上使用 <strong>.card-title</strong> 类来设置卡片的标题 。 <strong>.card-text</strong> 类用于设置卡片正文的内容。 <strong>.card-link</strong> 类用于给链接设置颜色。</p><h3 id="图片卡片"><a href="#图片卡片" class="headerlink" title="图片卡片"></a>图片卡片</h3><p>我们可以给 img标签添加 <strong>.card-img-top</strong>（图片在文字上方） 或 <strong>.card-img-bottom</strong>（图片在文字下方 来设置图片卡片：</p><p>如果图片要设置为背景，可以使用 <strong>.card-img-overlay</strong> 类:</p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><ol><li>.btn可以创建一个按钮，</li><li>btn-outline-颜色 创建一个border颜色线</li><li>btn-lg 按钮变大</li><li>btn-block 创建一个超大按钮</li><li>disabled属性显示禁用状态</li><li>按钮群组 btn-group 大小：btn-group-sm 变小, 默认水平显示 </li><li>btn-group-vertical 垂直显示</li></ol><h2 id="carousel-幻灯片"><a href="#carousel-幻灯片" class="headerlink" title="carousel 幻灯片"></a>carousel 幻灯片</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3 渐变</title>
    <link href="/2020/04/29/css3%E6%B8%90%E5%8F%98/"/>
    <url>/2020/04/29/css3%E6%B8%90%E5%8F%98/</url>
    
    <content type="html"><![CDATA[<h2 id="多列属性-column"><a href="#多列属性-column" class="headerlink" title="多列属性 column"></a>多列属性 column</h2><p><img src="https://files.catbox.moe/61cjqx.png" alt="image-20200429141301027"></p><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><p><img src="https://files.catbox.moe/cftoii.png" alt="image-20200429142439454"></p><p>color-stop1 渐变到color-stop2</p><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><p><img src="https://files.catbox.moe/mri4qu.png" alt="image-20200429142600818"></p><h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><p><img src="https://files.catbox.moe/q70mxq.png" alt="image-20200429143653243"></p><h4 id="两种形状-椭圆或圆"><a href="#两种形状-椭圆或圆" class="headerlink" title="两种形状 椭圆或圆"></a>两种形状 椭圆或圆</h4><h2 id="css按钮"><a href="#css按钮" class="headerlink" title="css按钮"></a>css按钮</h2><p><img src="https://files.catbox.moe/odgoku.png" alt="image-20200429144811802"></p><p><img src="https://files.catbox.moe/v51cin.png" alt="image-20200429144839876"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件操作</title>
    <link href="/2020/04/27/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/04/27/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="一、判断普通文件和目录"><a href="#一、判断普通文件和目录" class="headerlink" title="一、判断普通文件和目录"></a>一、判断普通文件和目录</h1><h2 id="1-判断是不是文件-is-file"><a href="#1-判断是不是文件-is-file" class="headerlink" title="1.判断是不是文件 is_file()"></a>1.判断是不是文件 is_file()</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">is_file</span><span class="hljs-params">(路径地址)</span></span><br></code></pre></td></tr></table></figure><h2 id="2-判断是不是目录is-dir"><a href="#2-判断是不是目录is-dir" class="headerlink" title="2.判断是不是目录is_dir()"></a>2.判断是不是目录is_dir()</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">is_dir</span><span class="hljs-params">(路径地址)</span></span><br></code></pre></td></tr></table></figure><h1 id="二、文件的属性"><a href="#二、文件的属性" class="headerlink" title="二、文件的属性"></a>二、文件的属性</h1><h2 id="1-判断文件夹或文件是否存在"><a href="#1-判断文件夹或文件是否存在" class="headerlink" title="1.判断文件夹或文件是否存在"></a>1.判断文件夹或文件是否存在</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">file_exists</span><span class="hljs-params">(路径地址)</span></span><br></code></pre></td></tr></table></figure><h2 id="2-取得普通文件的大小，不能检测目录"><a href="#2-取得普通文件的大小，不能检测目录" class="headerlink" title="2.取得普通文件的大小，不能检测目录"></a>2.取得普通文件的大小，不能检测目录</h2><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">filesize</span></span>(目标文件)</span><br></code></pre></td></tr></table></figure><h2 id="3-获取文件的创建时间"><a href="#3-获取文件的创建时间" class="headerlink" title="3.获取文件的创建时间"></a>3.获取文件的创建时间</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">filectime</span><span class="hljs-params">(路径地址)</span></span> <span class="hljs-comment">//返回的是一个时间戳</span><br></code></pre></td></tr></table></figure><h2 id="4-获取文件修改时间"><a href="#4-获取文件修改时间" class="headerlink" title="4.获取文件修改时间"></a>4.获取文件修改时间</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">filemtime</span><span class="hljs-params">(目标路径)</span></span> <span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><h2 id="5-获取文件上次访问时间"><a href="#5-获取文件上次访问时间" class="headerlink" title="5.获取文件上次访问时间"></a>5.获取文件上次访问时间</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">fileatime</span><span class="hljs-params">(目标路径)</span></span><br></code></pre></td></tr></table></figure><h2 id="6-给出文件信息"><a href="#6-给出文件信息" class="headerlink" title="6.给出文件信息"></a>6.给出文件信息</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">stat</span><span class="hljs-params">(目标路径)</span></span><br></code></pre></td></tr></table></figure><h1 id="三、目录的基本操作"><a href="#三、目录的基本操作" class="headerlink" title="三、目录的基本操作"></a>三、目录的基本操作</h1><h2 id="1-FILE"><a href="#1-FILE" class="headerlink" title="1.FILE_"></a>1.<em>FILE</em>_</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">返回当前文件的完整路径<br></code></pre></td></tr></table></figure><h2 id="2-basename获取文件名"><a href="#2-basename获取文件名" class="headerlink" title="2.basename获取文件名"></a>2.<code>basename</code>获取文件名</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">basename(_FILE_); <span class="hljs-regexp">//</span>获取当前的文件名<br></code></pre></td></tr></table></figure><h2 id="3-dirname-获取目录名"><a href="#3-dirname-获取目录名" class="headerlink" title="3.dirname()获取目录名"></a>3.<code>dirname()</code>获取目录名</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">dirname</span><span class="hljs-params">(_FILE_)</span></span> <span class="hljs-comment">//返回目录名</span><br>可嵌套<br></code></pre></td></tr></table></figure><h2 id="4-pathinfo-获取文件路径信息"><a href="#4-pathinfo-获取文件路径信息" class="headerlink" title="4.pathinfo()获取文件路径信息"></a>4.<code>pathinfo()</code>获取文件路径信息</h2><p>返回的是一个数组，包含各种信息</p><h2 id="5-opendir-打开目录句柄"><a href="#5-opendir-打开目录句柄" class="headerlink" title="5.opendir()打开目录句柄"></a>5.<code>opendir()</code>打开目录句柄</h2><p>返回值为资源类型,传参为路径</p><h2 id="6-readdir-根据句柄读取文件"><a href="#6-readdir-根据句柄读取文件" class="headerlink" title="6.readdir()根据句柄读取文件"></a>6.<code>readdir()</code>根据句柄读取文件</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">readdir</span><span class="hljs-params">(opendir(_FILE_)</span></span>),找到文件会返回文件名否则返回false 可以根据文件名打印出所有文件<br></code></pre></td></tr></table></figure><h2 id="7-rewinddir-倒回目录句柄"><a href="#7-rewinddir-倒回目录句柄" class="headerlink" title="7.rewinddir()倒回目录句柄"></a>7.<code>rewinddir()</code>倒回目录句柄</h2><p>回到最初的状态</p><h2 id="8-closedir-关闭句柄"><a href="#8-closedir-关闭句柄" class="headerlink" title="8.closedir()关闭句柄"></a>8.<code>closedir()</code>关闭句柄</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">closedir</span><span class="hljs-params">(句柄资源)</span></span><br></code></pre></td></tr></table></figure><h2 id="9-新建目录"><a href="#9-新建目录" class="headerlink" title="9.新建目录"></a>9.新建目录</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mkdir</span><span class="hljs-params">(新建目录名)</span></span>  <span class="hljs-comment">//返回值为布尔类型 新建目录返回true，否则返回false098</span><br></code></pre></td></tr></table></figure><h2 id="10-删除空目录rmdir"><a href="#10-删除空目录rmdir" class="headerlink" title="10.删除空目录rmdir()"></a>10.删除空目录<code>rmdir()</code></h2><h2 id="11-列出指定路径和目录"><a href="#11-列出指定路径和目录" class="headerlink" title="11.列出指定路径和目录"></a>11.列出指定路径和目录</h2><h1 id="四、文件的基本操作"><a href="#四、文件的基本操作" class="headerlink" title="四、文件的基本操作"></a>四、文件的基本操作</h1><h2 id="1-打开文件或url"><a href="#1-打开文件或url" class="headerlink" title="1.打开文件或url"></a>1.打开文件或<code>url</code></h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">fopen</span><span class="hljs-params">(路劲地址，打开文件的方式)</span></span><br></code></pre></td></tr></table></figure><h2 id="2-读取文件"><a href="#2-读取文件" class="headerlink" title="2.读取文件"></a>2.读取文件</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">fread</span><span class="hljs-params">(句柄资源，读取的长度（字节）)</span></span><br></code></pre></td></tr></table></figure><h2 id="3-获取一行"><a href="#3-获取一行" class="headerlink" title="3.获取一行"></a>3.获取一行</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">fgets</span><span class="hljs-params">(句柄)</span></span><br></code></pre></td></tr></table></figure><h2 id="4-测试文件指针是否到了文件结束的位置"><a href="#4-测试文件指针是否到了文件结束的位置" class="headerlink" title="4.测试文件指针是否到了文件结束的位置"></a>4.测试文件指针是否到了文件结束的位置</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">feof</span><span class="hljs-params">(文件句柄)</span></span> 返回值为布尔值  true为指针到达结束位置<br></code></pre></td></tr></table></figure><h2 id="5-fwrite-写入"><a href="#5-fwrite-写入" class="headerlink" title="5.fwrite()写入"></a>5.fwrite()写入</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>.先打开文件 <span class="hljs-selector-tag">fopen</span>(文件名，<span class="hljs-string">&#x27;r+&#x27;</span>);模式改为可读写 <span class="hljs-selector-tag">a</span>+<br><span class="hljs-selector-tag">2</span><span class="hljs-selector-class">.fwrite</span>(句柄，<span class="hljs-string">&#x27;写入的内容&#x27;</span>); 返回值写入的字节数<br></code></pre></td></tr></table></figure><h2 id="6-指定指针-fseek"><a href="#6-指定指针-fseek" class="headerlink" title="6.指定指针 fseek()"></a>6.指定指针 fseek()</h2><h2 id="7-rewind-重置指针"><a href="#7-rewind-重置指针" class="headerlink" title="7.rewind()重置指针"></a>7.rewind()重置指针</h2><h2 id="8-文件锁定flock"><a href="#8-文件锁定flock" class="headerlink" title="8.文件锁定flock()"></a>8.文件锁定flock()</h2><p>同一时间只能一个人修改</p><h2 id="延时操作-sleep"><a href="#延时操作-sleep" class="headerlink" title="延时操作 sleep()"></a>延时操作 sleep()</h2><h2 id="9-关闭文件句柄-fclose"><a href="#9-关闭文件句柄-fclose" class="headerlink" title="9.关闭文件句柄 fclose()"></a>9.关闭文件句柄 fclose()</h2><h2 id="10-file"><a href="#10-file" class="headerlink" title="10.file()"></a>10.file()</h2><p>把文件读入数组中，传参传的是路径，一行为数组的一部分</p><h2 id="11-拷贝文件-copy"><a href="#11-拷贝文件-copy" class="headerlink" title="11.拷贝文件 copy()"></a>11.拷贝文件 copy()</h2><h2 id="12-删除文件-unlink"><a href="#12-删除文件-unlink" class="headerlink" title="12.删除文件 unlink()"></a>12.删除文件 unlink()</h2><h2 id="13-file-get-content"><a href="#13-file-get-content" class="headerlink" title="13.file_get_content()"></a>13.file_get_content()</h2><p>把文件内容写入一个字符串中方，返回的是一个字符串，为文件内容,可以传url地址</p><h2 id="14-字符串写入文件中"><a href="#14-字符串写入文件中" class="headerlink" title="14.字符串写入文件中"></a>14.字符串写入文件中</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">file_push_contents</span><span class="hljs-params">(路径，要写的内容)</span></span><br></code></pre></td></tr></table></figure><h2 id="15-rename-重命名"><a href="#15-rename-重命名" class="headerlink" title="15.rename()重命名"></a>15.rename()重命名</h2><h2 id="16-readfile"><a href="#16-readfile" class="headerlink" title="16.readfile()"></a>16.readfile()</h2><h1 id="五、文件上传"><a href="#五、文件上传" class="headerlink" title="五、文件上传"></a>五、文件上传</h1><p>上传的文件默认放在一个默认的目录，把这个临时目录的文件移动到指定目录</p><p>上传methon设置为post</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">&lt;form <span class="hljs-function"><span class="hljs-keyword">method</span>=&quot;<span class="hljs-title">post</span>&quot; <span class="hljs-title">enctype</span>=&quot;<span class="hljs-title">multipart</span>/<span class="hljs-title">formdata</span>&quot; &gt; </span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\ZXY\AppData\Roaming\Typora\typora-user-images\image-20200407214646199.png" alt="image-20200407214646199"></p><h2 id="1-FILES-多维数组-用于储存与文件上传有关的信息"><a href="#1-FILES-多维数组-用于储存与文件上传有关的信息" class="headerlink" title="1.$_FILES 多维数组 用于储存与文件上传有关的信息"></a>1.$_FILES 多维数组 用于储存与文件上传有关的信息</h2><h2 id="2-is-uploaded-file-文件临时路径"><a href="#2-is-uploaded-file-文件临时路径" class="headerlink" title="2.is_uploaded_file(文件临时路径)"></a>2.is_uploaded_file(文件临时路径)</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">判断是否通过<span class="hljs-keyword">http</span> <span class="hljs-built_in">post</span>上传 返回布尔值<br></code></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">临时路径保存在$<span class="hljs-variable">_FILES</span>中  $<span class="hljs-variable">_FILES</span>[这里是<span class="hljs-built_in">name</span>][tmp_name]<br></code></pre></td></tr></table></figure><h2 id="3-move-uploaded-file-将文件上传到新位置"><a href="#3-move-uploaded-file-将文件上传到新位置" class="headerlink" title="3.move_uploaded_file()将文件上传到新位置"></a>3.move_uploaded_file()将文件上传到新位置</h2><h1 id="六、文件下载"><a href="#六、文件下载" class="headerlink" title="六、文件下载"></a>六、文件下载</h1><p>第一步是设置header,里面需要填写文件mime类型,怎获取呢,通过fileinfo扩展</p><h2 id="1-需要fileinfo扩展"><a href="#1-需要fileinfo扩展" class="headerlink" title="1.需要fileinfo扩展"></a>1.需要fileinfo扩展</h2><h1 id="！！中文路径使用basename需要设置区域"><a href="#！！中文路径使用basename需要设置区域" class="headerlink" title="！！中文路径使用basename需要设置区域"></a>！！中文路径使用basename需要设置区域</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">setlocale</span>(LC_ALL, <span class="hljs-string">&#x27;zh_CN.UTF8&#x27;</span>);  <br></code></pre></td></tr></table></figure><p>header(“Content-Type:”);</p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3 过渡、动画</title>
    <link href="/2020/04/27/css%E8%BF%87%E6%B8%A1/"/>
    <url>/2020/04/27/css%E8%BF%87%E6%B8%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h3><p>transition:发生改变的元素， 发生的时间</p><h4 id="延迟-transition-delay"><a href="#延迟-transition-delay" class="headerlink" title="延迟 transition-delay"></a>延迟 transition-delay</h4><h4 id="持续时间-translation-duration"><a href="#持续时间-translation-duration" class="headerlink" title="持续时间 translation-duration"></a>持续时间 translation-duration</h4><h4 id="改变速率-transition-timing-function"><a href="#改变速率-transition-timing-function" class="headerlink" title="改变速率 transition-timing-function:"></a>改变速率 transition-timing-function:</h4><p>取值：ease-in ease……</p><h2 id="css动画"><a href="#css动画" class="headerlink" title="css动画"></a>css动画</h2><h3 id="keyframs-关键帧"><a href="#keyframs-关键帧" class="headerlink" title="@keyframs 关键帧"></a>@keyframs 关键帧</h3><p><img src="https://files.catbox.moe/ydcmf9.png" alt="image-20200427085144379"></p><p><img src="https://files.catbox.moe/y38lxb.png" alt="image-20200427085406228"></p><p><img src="https://files.catbox.moe/spfhx8.png" alt="image-20200427085651816"></p><p><img src="https://files.catbox.moe/vzgaki.png" alt="image-20200427085856703"></p><p><img src="https://files.catbox.moe/70ip6j.png" alt="image-20200427090037960"></p><h3 id="动画的绑定-animation-绑定"><a href="#动画的绑定-animation-绑定" class="headerlink" title="动画的绑定 animation 绑定"></a>动画的绑定 animation 绑定</h3><p><img src="https://files.catbox.moe/ys9j1t.png" alt="image-20200427090542247"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3 边框、变形</title>
    <link href="/2020/04/26/css%E6%A1%86/"/>
    <url>/2020/04/26/css%E6%A1%86/</url>
    
    <content type="html"><![CDATA[<h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><p><img src="C:\Users\ZXY\AppData\Roaming\Typora\typora-user-images\image-20200426083936629.png" alt="image-20200426083936629"></p><p>设置box-sizing:border-box.width,height 为整个盒子的padding border之和</p><h2 id="content-box-反之"><a href="#content-box-反之" class="headerlink" title="content-box 反之"></a>content-box 反之</h2><h2 id="transform-移动"><a href="#transform-移动" class="headerlink" title="transform 移动"></a>transform 移动</h2><p><img src="https://files.catbox.moe/hub7k4.png" alt="image-20200426085027705"></p><h2 id="scale-缩放-skew-倾斜"><a href="#scale-缩放-skew-倾斜" class="headerlink" title="scale 缩放 skew 倾斜"></a>scale 缩放 skew 倾斜</h2><p><img src="https://files.catbox.moe/wopjyz.png" alt="image-20200426085115962"></p><p><img src="https://files.catbox.moe/9osgij.png" alt="image-20200426085332973"></p><h2 id="运用·"><a href="#运用·" class="headerlink" title="运用·"></a>运用·</h2><p><img src="https://files.catbox.moe/og4chh.png" alt="image-20200426090447333"></p><h3 id="设置3D效果"><a href="#设置3D效果" class="headerlink" title="设置3D效果"></a>设置3D效果</h3>]]></content>
    
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>盒模型</title>
    <link href="/2020/04/24/%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%96%B0%E5%A2%9E/"/>
    <url>/2020/04/24/%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%96%B0%E5%A2%9E/</url>
    
    <content type="html"><![CDATA[<p><img src="https://files.catbox.moe/aeefc4.png" alt="image-20200424110302913"></p><p><img src="https://files.catbox.moe/3kberd.png" alt="image-20200424111222170"></p><p>/左边是水平半径</p><p>/右边是垂直半径</p><h3 id="阴影的6个参数"><a href="#阴影的6个参数" class="headerlink" title="阴影的6个参数"></a>阴影的6个参数</h3><p><img src="https://files.catbox.moe/ifqjt4.png" alt="image-20200424112029903"></p><h3 id="border-image"><a href="#border-image" class="headerlink" title="border-image"></a>border-image</h3><h3 id="调整宽高resize"><a href="#调整宽高resize" class="headerlink" title="调整宽高resize"></a>调整宽高resize</h3><p>resize: both; 调整宽高/h…… 宽/ v……高</p><h3 id="outline-边框线"><a href="#outline-边框线" class="headerlink" title="outline 边框线"></a>outline 边框线</h3>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3字体</title>
    <link href="/2020/04/24/%E5%AD%97%E4%BD%93/"/>
    <url>/2020/04/24/%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h2 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a>@font-face</h2><p>用法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@font-face</span>&#123;<br><span class="hljs-attribute">font</span>-famaril：<br><span class="hljs-attribute">src</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="阴影-text-shadow"><a href="#阴影-text-shadow" class="headerlink" title="阴影 text-shadow"></a>阴影 text-shadow</h2><p>值</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">h-<span class="hljs-keyword">shadow </span>垂直的<br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">text</span>-shadow:<span class="hljs-number">2</span>px <span class="hljs-number">2</span>px 颜色;  水平方向 垂直方向<br></code></pre></td></tr></table></figure><h2 id="文字隐藏-text-overflow"><a href="#文字隐藏-text-overflow" class="headerlink" title="文字隐藏 text-overflow"></a>文字隐藏 text-overflow</h2><p>text-overflow:elipsis 省略号显示</p><p>overflow:hidden  隐藏溢出</p><h3 id="允许换行-word-wrap"><a href="#允许换行-word-wrap" class="headerlink" title="允许换行 word-wrap"></a>允许换行 word-wrap</h3><p>word-wrap:break-work 换成两行  /normal 有-号时换行 /keep-all</p><h3 id="不允许换行"><a href="#不允许换行" class="headerlink" title="不允许换行"></a>不允许换行</h3><p>white-space:nowrap 取消换行</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3新增背景属性</title>
    <link href="/2020/04/17/css%E8%83%8C%E6%99%AF/"/>
    <url>/2020/04/17/css%E8%83%8C%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="background-clip-背景剪切"><a href="#background-clip-背景剪切" class="headerlink" title="background-clip  背景剪切"></a>background-clip  背景剪切</h2><p>取值如下</p><ol><li>border-box ; 背景boder算起  默认值</li><li>padding-box； 背景padding算起 </li><li>content-box; 背景从有内容的算起</li></ol><h2 id="background-origin-绘制背景图片即背景图片从哪开始"><a href="#background-origin-绘制背景图片即背景图片从哪开始" class="headerlink" title="background-origin  绘制背景图片即背景图片从哪开始"></a>background-origin  绘制背景图片即背景图片从哪开始</h2><ol><li>border-box ; </li><li>padding-box； 默认值</li><li>content-box; </li></ol><h2 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h2><p><img src="https://files.catbox.moe/lyyy3c.png" alt="image-20200420091357435"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3新增选择器</title>
    <link href="/2020/04/17/css3%E6%96%B0%E5%A2%9E%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2020/04/17/css3%E6%96%B0%E5%A2%9E%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">用~连接 <span class="hljs-selector-tag">h2</span>~<span class="hljs-selector-tag">p</span> --&gt; <span class="hljs-selector-tag">h2</span>和<span class="hljs-selector-tag">p</span>有同一个父元素，会选择<span class="hljs-selector-tag">h2</span>后面的<span class="hljs-selector-tag">p</span>标签<br></code></pre></td></tr></table></figure><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span>+<span class="hljs-selector-tag">p</span>&#123;&#125; 意为选择<span class="hljs-selector-tag">h2</span>后的一个<span class="hljs-selector-tag">p</span>标签 注：<span class="hljs-selector-tag">h2</span> 和 <span class="hljs-selector-tag">p</span> 需再同一个父元素下<br></code></pre></td></tr></table></figure><p><img src="https://files.catbox.moe/e00lq6.png" alt="image-20200417103918912"></p><p><img src="https://files.catbox.moe/n3tfiz.png" alt="image-20200417104250446"></p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p><img src="https://files.catbox.moe/7dk55q.png" alt="image-20200417104815709"></p><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p><img src="https://files.catbox.moe/g7lggb.png" alt="image-20200417110522705"></p><p><img src="https://files.catbox.moe/pfhbix.png" alt="image-20200417111015440"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">::selection</span> 鼠标拖动后选中的内容触发<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2020/04/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/04/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="php中的正则"><a href="#php中的正则" class="headerlink" title="php中的正则"></a><code>php</code>中的正则</h2><h3 id="一、正则表达式语法规则"><a href="#一、正则表达式语法规则" class="headerlink" title="一、正则表达式语法规则"></a>一、正则表达式语法规则</h3><p>描述了一类字符串的特征，然后通过这个特征可以配合一些特定的函数，来完成对字符串更加复杂的一系列操作！</p><p>对其他的字符串进行匹配、查找、替换即分割操作</p><p>这类字符串的特征是由一个或多个</p><p>1.普通字符（例a-z）；</p><p>2.元字符(有特殊功能的字符比如*、 +、 ？等)</p><p>等组成的一个<code>字符串</code></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">例如 <span class="hljs-comment">&#x27;/a/&#x27;，a就是普通字符，/是定界符（表示正则表达式的开始或结束）</span><br></code></pre></td></tr></table></figure><h3 id="二、与正则配合的函数"><a href="#二、与正则配合的函数" class="headerlink" title="二、与正则配合的函数"></a>二、与正则配合的函数</h3><h4 id="preg-match-all-按指顶的正则表达式，在给定的字符串中进行搜索，匹配到符合特征的部分提取出来-全局"><a href="#preg-match-all-按指顶的正则表达式，在给定的字符串中进行搜索，匹配到符合特征的部分提取出来-全局" class="headerlink" title="preg_match_all()按指顶的正则表达式，在给定的字符串中进行搜索，匹配到符合特征的部分提取出来 全局"></a><code>preg_match_all()</code>按指顶的正则表达式，在给定的字符串中进行搜索，匹配到符合特征的部分提取出来 全局</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">preg_match_all, 数组) <span class="hljs-regexp">//</span>没找到返回<span class="hljs-number">0</span>，找到的返回找到符合规则的个数<br>把找到的结果数据放到数组参数里，是一个二维数组<br></code></pre></td></tr></table></figure><h3 id="三、定界符"><a href="#三、定界符" class="headerlink" title="三、定界符"></a>三、定界符</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># ！ &#123;&#125; | / 都可以做定界符</span><br></code></pre></td></tr></table></figure><h3 id="四、普通字符"><a href="#四、普通字符" class="headerlink" title="四、普通字符"></a>四、普通字符</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">a-z A-Z <span class="hljs-number">0</span>-<span class="hljs-number">9</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-regexp">//</span>使用单双引号需要转义<br></code></pre></td></tr></table></figure><h3 id="五、元字符"><a href="#五、元字符" class="headerlink" title="五、元字符"></a>五、元字符</h3><p>注意是一个字符，规则推荐用双引号</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\d</span> 匹配任意一个<span class="hljs-number">0</span>-<span class="hljs-number">9</span>的数字 等价[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]  例如  <span class="hljs-string">&#x27;/te\dst/&#x27;</span>  匹配 te0st....te9st<br><span class="hljs-string">\D</span> 匹配任意一个除了<span class="hljs-number">0</span>-<span class="hljs-number">9</span>以外的字符 等价[^<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]  例如 <span class="hljs-string">&#x27;/\Dest/&#x27;</span> 匹配 aest……Zest<br><span class="hljs-string">\s</span> 匹配任意一个空白字符 比如换行符、换页符、回车符、制表符 例如 <span class="hljs-string">&quot;/te\s/&quot;</span> 匹配te后面有一个空白字符的<br><span class="hljs-string">\S</span> 匹配除空白字符以外的任何一个字符<br><span class="hljs-string">\w</span> 匹配任意一个数字或字母或下滑线<br><span class="hljs-string">\W</span> 匹配任意一个除数字、字母、下滑线以外的任意一个字符<br>.  匹配除换行符以外的任意一个字符<br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs excel">* 匹配<span class="hljs-number">0</span>次、或<span class="hljs-number">1</span>次、或多次前面的一个字符 放在*前面的一个字符可以出现<span class="hljs-number">0</span>次，也可以出现<span class="hljs-number">1</span>次，也可以出现多次<br>例：&#x27;/te*st/&#x27; 中的e可以出现一次多次或者不出现<br>+ 匹配一次或多次前面的字符 +代表前面的字符出现一次或者多次，但是不能不出现 会匹配不到<br>？匹配<span class="hljs-number">0</span>次或<span class="hljs-number">1</span>次前面的字符<br>&#123;<span class="hljs-built_in">n</span>&#125; 表示前面的字符恰好出现<span class="hljs-built_in">n</span>次<br>&#123;<span class="hljs-built_in">n</span>,&#125; 表示前面的字符不少于<span class="hljs-built_in">n</span>次 即&gt;=<span class="hljs-built_in">n</span>次<br>&#123;<span class="hljs-built_in">n</span>,m&#125; 匹配至少出现<span class="hljs-built_in">n</span>次，至多出现m次<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">配合使用<br>与.配合使用  <span class="hljs-regexp">/t.&#123;3&#125;st/</span>  相当于三个点 ...<br>与*配合使用  <span class="hljs-regexp">/t.*st/</span> <span class="hljs-number">0</span>个<span class="hljs-number">1</span>个或多个. <br>.*配合成为贪婪匹配 尽可能匹配多的，有多的不会匹配少的 后面加个?变成懒惰匹配<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>懒惰匹配 t.*?st  由前往后看，.*是一个整体，匹配除换行符外的字符 也就是一个字符，？表示匹配零次获一次<br>如果*？表示是一段字符的话，那么？就表示我只要这段字符一次<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">^或者\A 匹配字符串的开始位置 表示所要查找的字符串中必须以^后面的字符开头<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;gdjatestjdks&quot;</span>; <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;/test/&#x27;</span>; preg_match_all(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>) 此时可以匹配到<span class="hljs-built_in">test</span><br>当把re改成 <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;/^test/&#x27;</span>;时，就匹配不到，匹配以t开头的字符串<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$或</span>\Z 匹配字符串的开始位置 和上面差不多<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less">| 表示或 匹配两个或多个模式 放多个匹配模式<br><span class="hljs-selector-attr">[]</span> 匹配方括号中的任意一个字符<br>^除了<span class="hljs-selector-attr">[]</span>中的其他字符 取反<br>() 将括号作为一个整体以便将其中内容获取到，在正则表达式中，可以使用圆括号来将某一段括起来，在圆括号的后面，我们可以使用\\数字来代表圆括号部分所分配到的内容  该数字表示的是哪个圆括号，从<span class="hljs-selector-tag">1</span>开始<br></code></pre></td></tr></table></figure><h3 id="六、模式修正符（可多个搭配使用）"><a href="#六、模式修正符（可多个搭配使用）" class="headerlink" title="六、模式修正符（可多个搭配使用）"></a>六、模式修正符（可多个搭配使用）</h3><p>模式修正符在正则表达式定界符之后使用，可以调整正则表达式的解释，扩展正则表达式在匹配、替换等操作是的某些功能，增强正则表达式的处理能力</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">i 在和模式匹配的时候不区分大小写<br>m 多行匹配 需要字符串中必须有<span class="hljs-string">\n</span> 或 ^或$<br>使用条件 <span class="hljs-number">1.</span>目标字符串中必须包含<span class="hljs-string">&quot;\n&quot;</span>，匹配有<span class="hljs-string">\n</span><br>在字符串中出现<span class="hljs-string">\n就表示新的一行开始</span><br><span class="hljs-number">2.</span>正则表达式中必须要出现^或$<br>s如果设定了次修正符，那么.将匹配所有的字符包括换行符<br>U 禁止贪婪匹配<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html本地存储</title>
    <link href="/2020/04/13/html5%E6%95%B0%E6%8D%AE%E5%82%A8%E5%AD%98/"/>
    <url>/2020/04/13/html5%E6%95%B0%E6%8D%AE%E5%82%A8%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="web储存-Web-Strorage）"><a href="#web储存-Web-Strorage）" class="headerlink" title="web储存(Web Strorage）"></a>web储存(Web Strorage）</h2><p>web storage 是window对象的子对象可以通过window.localStorage或window.seesionStorage来访问，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">例如 <br> <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = window<span class="hljs-selector-class">.localStorage</span><br> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.href</span> = <span class="hljs-string">&#x27;值&#x27;</span><span class="hljs-comment">//href是键。后面的是值</span><br>访问储存的值通过localStorage<span class="hljs-selector-class">.href</span> 来取得出存储的值<br></code></pre></td></tr></table></figure><h3 id="seesionStorage"><a href="#seesionStorage" class="headerlink" title="seesionStorage"></a>seesionStorage</h3><p><img src="https://files.catbox.moe/iugk3u.png" alt="image-20200413090844575"></p><p><img src="https://files.catbox.moe/ifxeke.png" alt="image-20200413091757794"></p><p>通过getItem循环可以遍历所有key值</p>]]></content>
    
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svg</title>
    <link href="/2020/04/12/svg/"/>
    <url>/2020/04/12/svg/</url>
    
    <content type="html"><![CDATA[<h2 id="一、引入svg"><a href="#一、引入svg" class="headerlink" title="一、引入svg"></a>一、引入svg</h2><ol><li>使用img标签，只能导入静态图片</li><li>使用embed标签，是要引入一些文件，可以使用脚本</li><li>object标签  不可使用脚本</li><li>使用ifame</li></ol><p><img src="https://files.catbox.moe/2z61ph.png" alt="image-20200412172238751"></p><p>填充颜色默认是黑色</p><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><p><img src="https://files.catbox.moe/xlr1sx.png" alt="image-20200412172527198"></p><p>x,y是相对svg标签位置的坐标</p><p>rx.ry是圆角，成正比，意思也就是一段圆弧的长度，越长积极再固定的宽度上他就必须越圆才行</p><p>fill是填充颜色</p><h3 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h3><p>stroke是边框颜色 stroke-width是边框宽度</p><p><img src="https://files.catbox.moe/tshrgh.png" alt="image-20200412173256322"></p><p>cx cy圆心坐标</p><h3 id="椭圆"><a href="#椭圆" class="headerlink" title="椭圆"></a>椭圆</h3><p><img src="https://files.catbox.moe/hlvvhd.png" alt="image-20200412173603659"></p><p>cx cy 中心点坐标</p><p>rx  x方向的半径</p><p>ry y方向的半径</p><p>当rx = ry时，是一个圆</p><h3 id="画直线"><a href="#画直线" class="headerlink" title="画直线"></a>画直线</h3><p><img src="https://files.catbox.moe/pldu93.png" alt="image-20200412173902320"></p><p>stoke 必填参数</p><p>x1 y1 起始点</p><p>x2 y2 结束点</p><p>stroke-dasharray 画虚线的数组，画五个像素空15个像素</p><p>stroke-dashoffset 向左移</p><h3 id="折线-polyline-结束点不会连接起始点"><a href="#折线-polyline-结束点不会连接起始点" class="headerlink" title="折线 polyline 结束点不会连接起始点"></a>折线 polyline 结束点不会连接起始点</h3><p><img src="https://files.catbox.moe/v0rcez.png" alt="image-20200412175340099"></p><p>points里面各个点的坐标</p><p>坐标用逗号分隔，坐标与坐标之间用空格分隔</p><h3 id="polygon结束点会连接起始点"><a href="#polygon结束点会连接起始点" class="headerlink" title="polygon结束点会连接起始点"></a>polygon结束点会连接起始点</h3><p><img src="C:\Users\ZXY\AppData\Roaming\Typora\typora-user-images\image-20200412175915120.png" alt="image-20200412175915120"></p><p>fill–rule填充规则 evenodd 是奇偶性，任意一个点向外做射线，看与边框的交点数，偶数被认为是在外部，不填充，反之是奇数，填充</p><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p><img src="https://files.catbox.moe/i7v0bo.png" alt="image-20200412180600445"></p><p>m    起始点</p><p>l    结束点</p><p>q</p><p>c 曲线</p><p>关闭</p><p>用d属性指定路径</p><p>A椭圆半径</p><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><p><img src="https://files.catbox.moe/d8w7k4.png" alt="image-20200412181036284"></p><p>xy左上标 tspan</p>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canvas</title>
    <link href="/2020/04/12/canvas/"/>
    <url>/2020/04/12/canvas/</url>
    
    <content type="html"><![CDATA[<h1 id="canvas标签"><a href="#canvas标签" class="headerlink" title="canvas标签"></a>canvas标签</h1><p>用来画图的标签</p><p>获得画图对象的方法</p><p>canvas标签.getContext（‘2d’）  获得一个2d对象</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">对象.fillStyle 填充属性 设置或返回用于填充绘画的颜色、渐变或模式。<br>strokeStyle 描绘边框<br>fill<span class="hljs-constructor">Rect(<span class="hljs-params">x1</span>,<span class="hljs-params">y1</span>,<span class="hljs-params">x2</span>,<span class="hljs-params">y2</span>)</span>  画一个矩形x1,y1为左上角坐标，x2y2为右下角坐标  <br></code></pre></td></tr></table></figure><h2 id="画一条线"><a href="#画一条线" class="headerlink" title="画一条线"></a>画一条线</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">先用move<span class="hljs-constructor">To(<span class="hljs-params">x</span>,<span class="hljs-params">y</span>)</span>确定起点 line<span class="hljs-constructor">To(<span class="hljs-params">x</span>,<span class="hljs-params">y</span>)</span>确定终点<br>stroke<span class="hljs-literal">()</span>方法： stroke<span class="hljs-literal">()</span> 方法会实际地绘制出通过 move<span class="hljs-constructor">To()</span> 和 line<span class="hljs-constructor">To()</span> 方法定义的路径。默认颜色是黑色。<br></code></pre></td></tr></table></figure><h3 id="context-arc-x-y-r-sAngle-eAngle-counterclockwise"><a href="#context-arc-x-y-r-sAngle-eAngle-counterclockwise" class="headerlink" title="*context*.arc(x,y,r,sAngle,eAngle,counterclockwise);"></a><code>*context*.arc</code>(<em>x,y,r,<code>sAngle</code>,<code>eAngle,</code>counterclockwise</em>);</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">arc</span>()方法 <span class="hljs-variable">x</span>，<span class="hljs-variable">y</span>圆心的坐标，<span class="hljs-variable">r</span>是圆的半径，<span class="hljs-variable">sAngle</span>起始角的位置，<span class="hljs-variable">eAngle</span>是结束角 <span class="hljs-variable">counter</span>是顺时针还是逆时针 <span class="hljs-variable"><span class="hljs-literal">false</span></span>顺时针，<span class="hljs-variable"><span class="hljs-literal">true</span></span>是逆时针</span><br></code></pre></td></tr></table></figure><h2 id="beginPath"><a href="#beginPath" class="headerlink" title="beginPath()"></a><code>beginPath</code>()</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">beginPath</span><span class="hljs-params">()</span></span>起始一条路径，或重置当前路径。<br></code></pre></td></tr></table></figure><h2 id="closePath"><a href="#closePath" class="headerlink" title="closePath()"></a><code>closePath</code>()</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">close<span class="hljs-constructor">Path()</span>创建从当前点回到起始点的路径。<br>跟<span class="hljs-keyword">begin</span><span class="hljs-constructor">Path()</span>搭配使用会有意想不到的效果<br></code></pre></td></tr></table></figure><h2 id="创建线性渐变"><a href="#创建线性渐变" class="headerlink" title="创建线性渐变"></a>创建线性渐变</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">create<span class="hljs-constructor">LinearGradient(<span class="hljs-params">x1</span>,<span class="hljs-params">y1</span>,<span class="hljs-params">x2</span>,<span class="hljs-params">y2</span>)</span> <span class="hljs-number">1</span>为渐变开始坐标，<span class="hljs-number">2</span>为渐变结束坐标<br>add<span class="hljs-constructor">ColorStop(<span class="hljs-params">stop</span>,<span class="hljs-params">color</span>)</span>方法规定渐变对象中的位置和颜色<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>stop</em></td><td align="left">介于 0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置。</td></tr><tr><td align="left"><em>color</em></td><td align="left">在 <em>stop</em> 位置显示的 <a href="https://www.runoob.com/cssref/css-colors-legal.html">CSS 颜色值</a>。</td></tr></tbody></table><h2 id="指定线性渐变填充"><a href="#指定线性渐变填充" class="headerlink" title="指定线性渐变填充"></a>指定线性渐变填充</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fillStyle</span><br></code></pre></td></tr></table></figure><h2 id="创建放射渐变"><a href="#创建放射渐变" class="headerlink" title="创建放射渐变"></a>创建放射渐变</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">createRadialGradient</span>(x<span class="hljs-number">1</span>,y<span class="hljs-number">1</span>,r<span class="hljs-number">1</span>,x<span class="hljs-number">2</span>,y<span class="hljs-number">2</span>,r<span class="hljs-number">2</span>)   <span class="hljs-number">1</span>是开始时，<span class="hljs-number">2</span>是结束时<br></code></pre></td></tr></table></figure><h2 id="save-保存当前的信息"><a href="#save-保存当前的信息" class="headerlink" title="save() 保存当前的信息"></a>save() 保存当前的信息</h2><h2 id="restore-回到上次保存的存档"><a href="#restore-回到上次保存的存档" class="headerlink" title="restore() 回到上次保存的存档"></a>restore() 回到上次保存的存档</h2><h3 id="drawimage-对引入图片的剪切缩放，会按缩放的比例缩放，"><a href="#drawimage-对引入图片的剪切缩放，会按缩放的比例缩放，" class="headerlink" title="drawimage()对引入图片的剪切缩放，会按缩放的比例缩放，"></a>drawimage()对引入图片的剪切缩放，会按缩放的比例缩放，</h3><p>例如·50到25，会缩小一半</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>img</em></td><td align="left">规定要使用的图像、画布或视频。</td></tr><tr><td align="left"><em>sx</em></td><td align="left">可选。开始剪切的 x 坐标位置。</td></tr><tr><td align="left"><em>sy</em></td><td align="left">可选。开始剪切的 y 坐标位置。</td></tr><tr><td align="left"><em>swidth</em></td><td align="left">可选。被剪切图像的宽度。</td></tr><tr><td align="left"><em>sheight</em></td><td align="left">可选。被剪切图像的高度。</td></tr><tr><td align="left"><em>x</em></td><td align="left">在画布上放置图像的 x 坐标位置。</td></tr><tr><td align="left"><em>y</em></td><td align="left">在画布上放置图像的 y 坐标位置。</td></tr><tr><td align="left"><em>width</em></td><td align="left">可选。要使用的图像的宽度。（伸展或缩小图像）</td></tr><tr><td align="left"><em>height</em></td><td align="left">可选。要使用的图像的高度。（伸展或缩小图像）</td></tr></tbody></table><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>font属性 设置字体有关的属性</p><p>textAlign 对其方式 star left 水平靠左</p><p>textbaseline 垂直方向 </p><p>填充文本 fillText(文本，x,y) //x y是坐标</p><p>描文本线 strikeText()</p><h2 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h2><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/tags/canvas-drawimage.html">drawImage()</a></td><td align="left">向画布上绘制图像、画布或视频。</td></tr></tbody></table><h2 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h2><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/tags/canvas-imagedata-width.html">width</a></td><td align="left">返回 ImageData 对象的宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/canvas-imagedata-height.html">height</a></td><td align="left">返回 ImageData 对象的高度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/canvas-imagedata-data.html">data</a></td><td align="left">返回一个对象，其包含指定的 ImageData 对象的图像数据。</td></tr></tbody></table><p>data对象储存的是每个像素点储存的是rgba颜色</p><p>getimageDate 方法返回的是一个一维数组，里面放的是data数据</p>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>h5video</title>
    <link href="/2020/03/27/%E9%9F%B3%E9%A2%91%E6%96%87%E4%BB%B6/"/>
    <url>/2020/03/27/%E9%9F%B3%E9%A2%91%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、video"><a href="#一、video" class="headerlink" title="一、video"></a>一、video</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less">视频播放▶ 调用<span class="hljs-selector-tag">play</span>()方法可实现视频播放<br>视频暂停⏸ 调用<span class="hljs-selector-tag">pause</span>()方法<br>声音的关闭打开 <span class="hljs-selector-tag">video</span>的<span class="hljs-selector-tag">muted</span>属性 通过取反<span class="hljs-selector-tag">muted</span>属性可实现<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">onPlaying</span>=<span class="hljs-string">&quot;v_palying()&quot;</span> <br><span class="hljs-attribute">onPause</span>=<span class="hljs-string">&quot;v_pause()&quot;</span><br><span class="hljs-attribute">onLoadStart</span>=<span class="hljs-string">&quot;v_loadstart();&quot;</span><br><span class="hljs-attribute">onEnded</span>=<span class="hljs-string">&quot;v_ended();&quot;</span><br>视频播放 暂停 加载 结束事件<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">获取视频当前播放到哪了<br><span class="hljs-selector-tag">video</span>有个currentTime属性可以获得<br>获取视频时间总长度<br><span class="hljs-selector-tag">video</span>有个duration属性可以获得<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">检查视频是否已暂停：<br><span class="hljs-attribute">myVid</span>=document.getElementById(<span class="hljs-string">&quot;video1&quot;</span>)<span class="hljs-comment">;</span><br>alert(myVid.paused)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GD库处理图像</title>
    <link href="/2020/03/26/GD%E5%BA%93%E5%A4%84%E7%90%86%E5%9B%BE%E5%83%8F/"/>
    <url>/2020/03/26/GD%E5%BA%93%E5%A4%84%E7%90%86%E5%9B%BE%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="php通过GD库处理图像"><a href="#php通过GD库处理图像" class="headerlink" title="php通过GD库处理图像"></a>php通过GD库处理图像</h1><h2 id="创建一个图像的四个基本步骤"><a href="#创建一个图像的四个基本步骤" class="headerlink" title="创建一个图像的四个基本步骤"></a>创建一个图像的四个基本步骤</h2><p>1.创建图像</p><p>2.绘制图像</p><p>3.输出图像</p><h1 id="制作验证码"><a href="#制作验证码" class="headerlink" title="制作验证码"></a>制作验证码</h1><h2 id="随机数rand-min-max"><a href="#随机数rand-min-max" class="headerlink" title="随机数rand(min,max)"></a>随机数rand(min,max)</h2><h2 id="一、创建图像"><a href="#一、创建图像" class="headerlink" title="一、创建图像"></a>一、创建图像</h2><p>1.创建新的图像</p><p>新建一个真彩色图像</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">imagecreatetruecolor(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)  <span class="hljs-comment">//创建需要的宽和高</span><br></code></pre></td></tr></table></figure><h2 id="二、绘制图像"><a href="#二、绘制图像" class="headerlink" title="二、绘制图像"></a>二、绘制图像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">1.imagecolorallocate(resource,int $red, int $green, int $blye)  //分配颜色 第一个是放要分配颜色的图像，后面三个是RGB  相当于色板<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">2.</span> 区域填充  iagefill(resoutce, <span class="hljs-built_in">int</span> $x, <span class="hljs-built_in">int</span> $y, $color)  //$color 是上面调制好的颜色<br></code></pre></td></tr></table></figure><h2 id="三、输出图像"><a href="#三、输出图像" class="headerlink" title="三、输出图像"></a>三、输出图像</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">1.</span>imagejpeg<span class="hljs-comment">(创建好的图片,文件名/路径,)</span> <span class="hljs-comment">//以jpeg格式输出到浏览器或者文件中</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">输出图像前得加<span class="hljs-selector-tag">header</span>(<span class="hljs-string">&quot;Content-type:image/jpge&quot;</span>) 告诉浏览器这是图像<br></code></pre></td></tr></table></figure><h2 id="四、释放资源"><a href="#四、释放资源" class="headerlink" title="四、释放资源"></a>四、释放资源</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">imagedestroy</span><span class="hljs-params">(resource)</span></span>  销毁图像 把资源放进去<br></code></pre></td></tr></table></figure><h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">imagerectangle</span>(resource, x<span class="hljs-number">1</span>, y<span class="hljs-number">1</span>, x<span class="hljs-number">2</span>, y<span class="hljs-number">2</span>) //x<span class="hljs-number">1</span>是左上角坐标，x<span class="hljs-number">2</span>是右下角坐标<br></code></pre></td></tr></table></figure><h2 id="画一个单一像素"><a href="#画一个单一像素" class="headerlink" title="画一个单一像素"></a>画一个单一像素</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">imagesetpixel(<span class="hljs-variable">$image</span>, <span class="hljs-variable">$x</span>, <span class="hljs-variable">$y</span>, <span class="hljs-variable">$color</span>);<span class="hljs-comment">//image为要画得图片，xy为该像素的坐标</span><br></code></pre></td></tr></table></figure><h2 id="画一条线条"><a href="#画一条线条" class="headerlink" title="画一条线条"></a>画一条线条</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 0">imageline(resoure,x1, y1, x2, y2,$color)  //x1,y2为坐标1，x2,y2为坐标2，两点之间会连线1<br></code></pre></td></tr></table></figure><h2 id="画一行字符串"><a href="#画一行字符串" class="headerlink" title="画一行字符串"></a>画一行字符串</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">imagestring(resource,font,x,y,<span class="hljs-keyword">string</span> s, color) <span class="hljs-comment">//xy为字符串左上角坐标，font为字体样式，s 为字符串</span><br></code></pre></td></tr></table></figure><h2 id="向图像写入文本"><a href="#向图像写入文本" class="headerlink" title="向图像写入文本"></a>向图像写入文本</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">imagettftext(resource,<span class="hljs-keyword">size</span>,字体倾斜的角度，x, y, <span class="hljs-keyword">color</span>,<span class="hljs-keyword">string</span>) <span class="hljs-number">202</span><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><h1 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h1><h2 id="打开图片"><a href="#打开图片" class="headerlink" title="打开图片"></a>打开图片</h2><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">imagecreateformjpeg</span>(图片路径);</span><br><span class="hljs-function">记得输出图片是<span class="hljs-title">imagejpeg</span>()</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">输出图像的宽度 imagesx<br>输出图像的高度 imagesy<br></code></pre></td></tr></table></figure><h2 id="取得truetype字体的文本范围"><a href="#取得truetype字体的文本范围" class="headerlink" title="取得truetype字体的文本范围"></a>取得<code>truetype</code>字体的文本范围</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">imagettfbox</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>h5新增表单元素</title>
    <link href="/2020/03/25/h5%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/"/>
    <url>/2020/03/25/h5%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="https://files.catbox.moe/2du1pq.png" alt="image-20200323101933930"></p><h4 id="multiple属性-select标签中多选"><a href="#multiple属性-select标签中多选" class="headerlink" title="multiple属性 select标签中多选"></a>multiple属性 select标签中多选</h4><p><img src="https://files.catbox.moe/0hsnqw.png" alt="image-20200325150428816"></p><p><img src="https://files.catbox.moe/h0r7yi.png" alt="image-20200325150523572"></p><h3 id="表单新增元素"><a href="#表单新增元素" class="headerlink" title="表单新增元素"></a>表单新增元素</h3><p><img src="https://files.catbox.moe/v97hou.png" alt="image-20200325150648849"></p><p><img src="https://files.catbox.moe/1dhi8x.png" alt="image-20200325150713654"></p><p><img src="https://files.catbox.moe/ds4jss.png" alt="image-20200325150800967"></p><p><img src="https://files.catbox.moe/7j6a1z.png" alt="image-20200325150823306"></p><p><img src="https://files.catbox.moe/laapue.png" alt="image-20200325150937772"></p><p><img src="https://files.catbox.moe/1s1h62.png" alt="image-20200325151045953"></p><p><img src="https://files.catbox.moe/6nbr69.png" alt="image-20200325151117917"></p><p><img src="https://files.catbox.moe/eyp21i.png" alt="image-20200325151130068"></p>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云函数</title>
    <link href="/2020/03/23/node.js/"/>
    <url>/2020/03/23/node.js/</url>
    
    <content type="html"><![CDATA[<h1 id="云开发与Nodejs"><a href="#云开发与Nodejs" class="headerlink" title="云开发与Nodejs"></a>云开发与<code>Nodejs</code></h1><p>云函数的运行环境是 <code>Node.js</code>，我们可以在云函数中使用<code>Nodejs</code>内置模块以及使用 <code>npm</code> 安装第三方依赖来帮助我们更快的开发。借助于一些优秀的开源项目，避免了我们重复造轮子，相比于小程序端，能够大大扩展云函数的使用</p><h4 id="云函数与Nodejs"><a href="#云函数与Nodejs" class="headerlink" title="云函数与Nodejs"></a>云函数与<code>Nodejs</code></h4><p>由于云函数与<code>Nodejs</code>息息相关，需要我们对云函数与Node的模块以及<code>Nodejs</code>的一些基本知识有一些基本的了解。下面只介绍一些基础的概念，如果你想详细深入了解，建议去翻阅一下<code>Nodejs</code>的官方技术文档：</p><p><strong>技术文档：</strong><a href="http://nodejs.cn/api/">Nodejs API 中文技术文档</a></p><h4 id="node-js内置模块"><a href="#node-js内置模块" class="headerlink" title="node.js内置模块"></a><code>node.js</code>内置模块</h4><p><code>Nodejs</code>的常用内置模块以及功能如下所示，这些模块都是可以在云函数里直接使用的：</p><ul><li><code>**fs</code> 模块**：文件目录的创建、删除、查询以及文件的读取和写入，下面的<code>createReadStream</code>方法类似于读取文件，</li><li><strong>path 模块：</strong>提供了一些用于处理文件路径的<code>API</code></li><li><code>**url</code>模块：**用于处理与解析 URL</li><li><strong><code>http</code>模块：</strong>用于创建一个能够处理和响应 <code>http</code> 响应的服务</li><li><code>querystring</code>模块：解析查询字符串</li><li><strong>until模块</strong> ：提供用于解析和格式化 URL 查询字符串的实用工具；</li><li><strong>net模块：</strong>用于创建基于流的 TCP 或 <code>IPC</code> 的服务器</li><li><code>crypto</code>模块：提供加密功能，包括对 <code>OpenSSL</code> 的哈希、<code>HMAC</code>、加密、解密、签名、以及验证功能的一整套封装</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">在云函数中使用HTTP请求访问第三方服务可以不受域名限制，即不需要像小程序端一样，要将域名添加到request合法域名里；也不受<span class="hljs-keyword">http</span>和<span class="hljs-keyword">https</span>的限制，没有域名只有IP都是可以的，所以云函数可以应用的场景非常多，即能方便的调用第三方服务，也能够充当一个功能复杂的完整应用的后端。不过需要注意的是，云函数是部署在云端，有些局域网等终端通信的业务只能在小程序里进行。<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">常用变量<br><br><span class="hljs-built_in">module</span>、<span class="hljs-built_in">exports</span>、<span class="hljs-built_in">require</span><br><br><span class="hljs-built_in">require</span>用于引入模块、  <span class="hljs-built_in">JSON</span>、或本地文件。 可以从  node_modules 引入模块，可以使用相对路径（例如  ./、）引入本地模块或 <span class="hljs-built_in">JSON</span> 文件，路径会根据 <br>__dirname<br> 定义的目录名或当前工作目录进行处理。<br><br>node模块化遵循的是commonjs规范，CommonJs定义的模块分为: 模块标识(<span class="hljs-built_in">module</span>)、模块导出(<span class="hljs-built_in">exports</span>) 、模块引用(<span class="hljs-built_in">require</span>)。<br><br>在node中，一个文件即一个模块，使用<span class="hljs-built_in">exports</span>和<span class="hljs-built_in">require</span>来进行处理。<br><br><span class="hljs-built_in">exports</span>表示该模块运行时生成的导出对象。如果按确切的文件名没有找到模块，则 Node.js 会尝试带上  .js、  .json 或  .node 拓展名再加载。 .js 文件会被解析为 JavaScript 文本文件，  .json 文件会被解析为 <span class="hljs-built_in">JSON</span> 文本文件。  .node 文件会被解析为通过  process.dlopen() 加载的编译后的插件模块。以  <span class="hljs-string">&#x27;/&#x27;</span> 为前缀的模块是文件的绝对路径。 例如，  <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;/home/marco/foo.js&#x27;</span>) 会加载  /home/marco/foo.js 文件。以  <span class="hljs-string">&#x27;./&#x27;</span> 为前缀的模块是相对于调用  <span class="hljs-built_in">require</span>() 的文件的。 也就是说，  circle.js 必须和  foo.js 在同一目录下以便于  <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./circle&#x27;</span>) 找到它。<br><br><span class="hljs-built_in">module</span>.exports 用于指定一个模块所导出的内容，即可以通过  <span class="hljs-built_in">require</span>() 访问的内容。<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入本地模块：</span><br><span class="hljs-keyword">const</span> myLocalModule = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./path/myLocalModule&#x27;</span>);<br> <br><span class="hljs-comment">// 引入 JSON 文件：</span><br><span class="hljs-keyword">const</span> jsonData = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./path/filename.json&#x27;</span>);<br> <br><span class="hljs-comment">// 引入 node_modules 模块或 Node.js 内置模块：</span><br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">第三方模块<br><br>Nodejs有 <span class="hljs-built_in">npm</span>官网地址<br><br>Nodejs库推荐：awesome Nodejs<br><br>当没有以  <span class="hljs-string">&#x27;/&#x27;</span>、  <span class="hljs-string">&#x27;./&#x27;</span> 或  <span class="hljs-string">&#x27;../&#x27;</span> 开头来表示文件时，这个模块必须是一个核心模块或加载自  node_modules 目录，比如wx-server-sdk就加载自node_modules文件夹：<br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="Lodash实用工具库"><a href="#Lodash实用工具库" class="headerlink" title="Lodash实用工具库"></a><code>Lodash</code>实用工具库</h4><p><a href="https://www.lodashjs.com/">Lodash中文文档</a></p><p><code>Lodash</code>是一个一致性、模块化、高性能的 JavaScript <strong>实用工具库</strong>，通过降低 array、number、objects、string 等数据类型的使用难度从而让 JavaScript 变得更简单。<code>Lodash</code> 的模块化方法非常适用于：遍历 array、object 和 string；对值进行操作和检测；创建符合功能的函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">使用开发者工具新建一个云函数，比如lodash，然后在<span class="hljs-keyword">package</span>.json增加lodash最新版latest的依赖：<br><br>    <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;lodash&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span><br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="moment时间处理"><a href="#moment时间处理" class="headerlink" title="moment时间处理"></a>moment时间处理</h4><p>开发小程序时经常需要格式化时间、处理相对时间、日历时间以及时间的多语言问题，这个时候就可以使用比较流行的<code>momentjs</code>了。</p><p><strong>技术文档：</strong><a href="https://momentjs.com/">moment官方文档</a>、<a href="http://momentjs.cn/">moment中文文档</a></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs livescript">使用开发者工具新建一个云函数，比如moment，然后在package.json增加moment最新版latest的依赖：<br><br>    <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;moment&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span><br>        &#125;<br>在index.js里的代码修改为如下，我们将moment区域设置为中国，将时间格式化为 十二月 <span class="hljs-number">23</span>日 <span class="hljs-number">2019</span>, <span class="hljs-number">4</span>:<span class="hljs-number">13</span>:<span class="hljs-number">29</span> 下午的样式以及相对时间多少分钟前：<br><br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>    <span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;moment&quot;</span>);<br>    cloud.init(&#123;<br>        env: cloud.DYNAMIC_CURRENT_ENV,<br>      &#125;)<br>    <span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>        moment.locale(<span class="hljs-string">&#x27;zh-cn&#x27;</span>);<br>        time1 = moment().format(<span class="hljs-string">&#x27;MMMM Do YYYY, h:mm:ss a&#x27;</span>);<br>        time2 = moment().startOf(<span class="hljs-string">&#x27;hour&#x27;</span>).fromNow();<br>        <span class="hljs-keyword">return</span>  &#123; time1,time2&#125;<br>    &#125;<br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br><span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;moment&quot;</span>);<br>cloud.init(&#123;<br>    env: cloud.DYNAMIC_CURRENT_ENV,<br>  &#125;)<br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>    moment.locale(<span class="hljs-string">&#x27;zh-cn&#x27;</span>);<br>    time1 = moment().format(<span class="hljs-string">&#x27;MMMM Do YYYY, h:mm:ss a&#x27;</span>);<br>    time2 = moment().startOf(<span class="hljs-string">&#x27;hour&#x27;</span>).fromNow();<br>    <span class="hljs-keyword">return</span>  &#123; time1,time2&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不过云函数中的时区为 <code>UTC+0</code>，不是 <code>UTC+8</code>，格式化得到的时间和在国内的时间是有8个小时的时间差的，我们可以给小时数+8，也可以修改时区。云函数修改时区我们可以使用timezone依赖（和moment是同一个开源作者）。</p><p><strong>技术文档：</strong><a href="https://momentjs.com/timezone/">timezone技术文档</a></p><p>在<code>package.json</code><strong>增加</strong>moment-timezone最新版latest的依赖，然后修改上面相应的代码即可，使用起来非常方便：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moment-timezone&#x27;</span>);<br>time1 = moment().tz(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>).format(<span class="hljs-string">&#x27;MMMM Do YYYY, h:mm:ss a&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="获取公网IP"><a href="#获取公网IP" class="headerlink" title="获取公网IP"></a>获取公网IP</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livescript">获取公网IP<br>有时我们希望能够获取到服务器的公网IP，比如用于IP地址的白名单，或者想根据IP查询到服务器所在的地址，ipify就是一个免费好用的依赖，通过它我们也可以获取到云函数所在服务器的公网IP。<br><br>技术文档：ipify Github地址<br><br>使用开发者工具新建一个getip的云函数，然后输入以下代码，并在package.json的”dependencies”里新增 <span class="hljs-string">&quot;ipify&quot;</span>:<span class="hljs-string">&quot;latest&quot;</span> ，即最新版的ipify依赖：<br><br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br><span class="hljs-keyword">const</span> ipify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ipify&#x27;</span>);<br>cloud.init(&#123;<br>  env: cloud.DYNAMIC_CURRENT_ENV,<br>&#125;)<br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> ipify(&#123; useIPv6: <span class="hljs-literal">false</span> &#125;)<br>&#125;<br>然后右键getip云函数根目录，选择在终端中打开，输入<span class="hljs-built_in">npm</span> install安装依赖，之后上传并部署所有文件。我们可以在小程序端调用这个云函数，就可以得到云函数服务器的公网IP，这个IP是随机而有限的几个，反复调用getip，就能够穷举所有云函数所在服务器的ip了。<br><br>可能你会在使用云函数连接数据库或者用云函数来建微信公众号的后台时需要用到IP白名单，我们可以把这些ip都添加到白名单里面，这样云函数就可以做很多事情啦。<br></code></pre></td></tr></table></figure><h4 id="buffer文件流"><a href="#buffer文件流" class="headerlink" title="buffer文件流"></a>buffer文件流</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>cloud.init(&#123;<br>  env: cloud.DYNAMIC_CURRENT_ENV,<br>&#125;)<br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> fileID = <span class="hljs-string">&#x27;cloud://xly-xrlur.786c-xly-xrlur-1300446086/cloudbase/1576500614167-520.png&#x27;</span><br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> cloud.downloadFile(&#123;<br>    fileID: fileID,<br>  &#125;)<br>  <span class="hljs-keyword">const</span> buffer = res.fileContent<br>  <span class="hljs-keyword">return</span> buffer.toString(<span class="hljs-string">&#x27;base64&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getServerImg</span><span class="hljs-params">()</span></span>&#123;<br>    wx<span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.callFunction</span>(&#123;<br>      name: <span class="hljs-string">&#x27;downloadimg&#x27;</span>,<br>      success: res =&gt; &#123;<br>        console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&quot;云函数返回的数据&quot;</span>,res.result)<br>        this<span class="hljs-selector-class">.setData</span>(&#123;<br>          <span class="hljs-selector-tag">img</span>:res<span class="hljs-selector-class">.result</span><br>        &#125;)<br>      &#125;,<br>      fail: err =&gt; &#123;<br>        console<span class="hljs-selector-class">.error</span>(<span class="hljs-string">&#x27;云函数调用失败：&#x27;</span>, err)<br>      &#125;<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200px&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:image/jpeg;base64,</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">img</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="图像处理sharp"><a href="#图像处理sharp" class="headerlink" title="图像处理sharp"></a>图像处理sharp</h4><p>sharp是一个高速图像处理库，可以很方便的实现图片编辑操作，如裁剪、格式转换、旋转变换、滤镜添加、图片合成（如添加水印）、图片拼接等，支持<code>JPEG</code>, <code>PNG</code>, <code>WebP</code>, TIFF, <code>GIF</code> 和 <code>SVG</code>格式。在云函数端使用sharp来处理图片，而云存储则可以作为服务端和小程序端来传递图片的桥梁。</p><p><strong>技术文档：</strong><a href="https://sharp.pixelplumbing.com/en/stable/">sharp官方技术文档</a></p><p>使用开发者工具新建一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br>cloud.init(&#123;<br>    <span class="hljs-attr">env</span>: cloud.DYNAMIC_CURRENT_ENV,<br>&#125;)<br><span class="hljs-keyword">const</span> sharp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sharp&#x27;</span>);<br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>    <span class="hljs-comment">//这里换成自己的fileID，也可以在小程序端上传文件之后，把fileID传进来event.fileID</span><br>    <span class="hljs-keyword">const</span> fileID = <span class="hljs-string">&#x27;cloud://xly-xrlur.786c-xly-xrlur-1300446086/1572315793628-366.png&#x27;</span><br> <br>    <span class="hljs-comment">//要用云函数处理图片，需要先下载图片，返回的图片类型为Buffer</span><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> cloud.downloadFile(&#123;<br>      <span class="hljs-attr">fileID</span>: fileID,<br>    &#125;)<br>    <span class="hljs-keyword">const</span> buffer = res.fileContent  <br> <br>    <span class="hljs-comment">//sharp对图片进行处理之后，保存为output.png，也可以直接保存为Buffer</span><br>    <span class="hljs-keyword">await</span> sharp(buffer).rotate().resize(<span class="hljs-number">200</span>).toFile(<span class="hljs-string">&#x27;output.png&#x27;</span>)<br> <br>    <span class="hljs-comment">// 云函数读取模块目录下的图片，并上传到云存储</span><br>    <span class="hljs-keyword">const</span> fileStream = <span class="hljs-keyword">await</span> fs.createReadStream(path.join(__dirname, <span class="hljs-string">&#x27;output.png&#x27;</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> cloud.uploadFile(&#123;<br>        <span class="hljs-attr">cloudPath</span>: <span class="hljs-string">&#x27;sharpdemo.jpg&#x27;</span>,<br>        <span class="hljs-attr">fileContent</span>: fileStream,<br>    &#125;)  <br>&#125;<br>也可以让sharp不需要先toFile转成图片，而是直接转成Buffer，这样就可以直接作为参数传给fileContent上传到云存储，如：<br><br>    <span class="hljs-keyword">const</span> buffer2 = <span class="hljs-keyword">await</span> sharp(buffer).rotate().resize(<span class="hljs-number">200</span>).toBuffer();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> cloud.uploadFile(&#123;<br>            <span class="hljs-attr">cloudPath</span>: <span class="hljs-string">&#x27;sharpdemo2.jpg&#x27;</span>,<br>            <span class="hljs-attr">fileContent</span>: buffer2,<br>        &#125;)<br></code></pre></td></tr></table></figure><h4 id="连接数据库MySQL"><a href="#连接数据库MySQL" class="headerlink" title="连接数据库MySQL"></a>连接数据库<code>MySQL</code></h4><p><strong>公网连接数据库MySQL</strong></p><p>技术文档：<a href="https://sequelize.org/master/">Sequelize</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">const sequelize = new Sequelize(<span class="hljs-string">&#x27;database&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>,  &#123;<br>  host: <span class="hljs-string">&#x27;localhost&#x27;</span>,    <span class="hljs-regexp">//</span>数据库地址,默认本机<br>  port:<span class="hljs-string">&#x27;3306&#x27;</span>,<br>  dialect: <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>  pool: &#123;   <span class="hljs-regexp">//</span>连接池设置<br>    max: <span class="hljs-number">5</span>, <span class="hljs-regexp">//</span>最大连接数<br>    min: <span class="hljs-number">0</span>, <span class="hljs-regexp">//</span>最小连接数<br>    idle: <span class="hljs-number">10000</span><br>  &#125;,<br> &#125;);<br></code></pre></td></tr></table></figure><p>**私有网络连接``MySQL<code>**</code></p><p>默认情况下，云开发的函数部署在<strong>公共网络</strong>中，只可以访问公网。如果开发者需要访问腾讯云的 <code>**Redis</code>、<code>TencentDB</code>、<code>CVM</code>、Kafka** 等资源，需要建立<strong>私有网络</strong>来确保<strong>数据安全及连接安全</strong>。</p><p>**连接数据库``Redis<code>**</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>cloud.init(&#123;<br>    <span class="hljs-attr">env</span>: cloud.DYNAMIC_CURRENT_ENV,<br>  &#125;)<br><span class="hljs-keyword">const</span> Redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ioredis&#x27;</span>)<br><span class="hljs-keyword">const</span> redis = <span class="hljs-keyword">new</span> Redis(&#123;<br>  <span class="hljs-attr">port</span>: <span class="hljs-number">6379</span>,<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;10.168.0.15&#x27;</span>, <br>  <span class="hljs-attr">family</span>: <span class="hljs-number">4</span>, <br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;CloudBase2018&#x27;</span>,<br>  <span class="hljs-attr">db</span>: <span class="hljs-number">0</span>,<br>&#125;)<br> <br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> wxContext = cloud.getWXContext()<br>    <span class="hljs-keyword">const</span> cacheKey = wxContext.OPENID<br>    <span class="hljs-keyword">const</span> cache = <span class="hljs-keyword">await</span> redis.get(cacheKey) <br>    <span class="hljs-keyword">if</span> (!cache) &#123;<br>      <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> resolve(<span class="hljs-built_in">Math</span>.random()), <span class="hljs-number">2000</span>)<br>      &#125;)<br>      redis.set(cacheKey, result, <span class="hljs-string">&#x27;EX&#x27;</span>, <span class="hljs-number">3600</span>)<br>      <span class="hljs-keyword">return</span> result<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> cache<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h4><h4 id="二维码qrcode"><a href="#二维码qrcode" class="headerlink" title="二维码qrcode"></a>二维码qrcode</h4><p><strong>技术文档：</strong><a href="https://github.com/soldair/node-qrcode">node-qrcode Github地址</a></p><h4 id="邮件处理"><a href="#邮件处理" class="headerlink" title="邮件处理"></a>邮件处理</h4><p>技术文档：<a href="https://github.com/nodemailer/nodemailer">Nodemailer Github地址</a>、<a href="https://nodemailer.com/about/">Nodemailer官方文档</a></p><p>使用开发者工具创建一个云函数，比如<code>nodemail</code>，然后在<code>package.json</code>增加<code>nodemailer</code>最新版latest的依赖：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;nodemailer&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span><br> &#125;<br></code></pre></td></tr></table></figure><p>发送邮件服务器：<code>smtp.qq.com</code>，使用<code>SSL</code>，端口号465或587</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs awk">const cloud = require(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>cloud.init(&#123;<br>  env: cloud.DYNAMIC_CURRENT_ENV,<br>&#125;)<br>exports.main = async (event, context) =&gt; &#123;<br>  const nodemailer = require(<span class="hljs-string">&quot;nodemailer&quot;</span>);<br>  let transporter = nodemailer.createTransport(&#123;<br>    host: <span class="hljs-string">&quot;smtp.qq.com&quot;</span>, <span class="hljs-regexp">//</span>SMTP服务器地址<br>    port: <span class="hljs-number">465</span>, <span class="hljs-regexp">//</span>端口号，通常为<span class="hljs-number">465</span>，<span class="hljs-number">587</span>，<span class="hljs-number">25</span>，不同的邮件客户端端口号可能不一样<br>    secure: true, <span class="hljs-regexp">//</span>如果端口是<span class="hljs-number">465</span>，就为true;如果是<span class="hljs-number">587</span>、<span class="hljs-number">25</span>，就填false<br>    auth: &#123;<br>      user: <span class="hljs-string">&quot;344169902@qq.com&quot;</span>,  <span class="hljs-regexp">//</span>你的邮箱账号<br>      pass: <span class="hljs-string">&quot;你的QQ邮箱授权码&quot;</span>   <span class="hljs-regexp">//</span>邮箱密码，QQ的需要是独立授权码<br>    &#125;<br>  &#125;);<br> <br>  let message = &#123;<br>    from: <span class="hljs-string">&#x27;来自李东bbsky &lt;344169902@qq.com&gt;&#x27;</span>,   <span class="hljs-regexp">//</span>你的发件邮箱<br>    to: <span class="hljs-string">&#x27;你要发送给谁&#x27;</span>, <span class="hljs-regexp">//</span>你要发给谁<br>    <span class="hljs-regexp">//</span> cc:<span class="hljs-string">&#x27;&#x27;</span>,  支持cc 抄送<br>    <span class="hljs-regexp">//</span> bcc: <span class="hljs-string">&#x27;&#x27;</span>, 支持bcc 密送<br>    subject: <span class="hljs-string">&#x27;欢迎大家参与云开发技术训练营活动&#x27;</span>,<br> <br>    <span class="hljs-regexp">//</span>支持text纯文字，html代码<br>    text: <span class="hljs-string">&#x27;欢迎大家&#x27;</span>,<br>    html:<br>      <span class="hljs-string">&#x27;&lt;p&gt;&lt;b&gt;你好：&lt;/b&gt;&lt;img src=&quot;https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg&quot;/&gt;&lt;/p&gt;&#x27;</span> +<br>      <span class="hljs-string">&#x27;&lt;p&gt;欢迎欢迎&lt;br/&gt;&lt;/p&gt;&#x27;</span>,<br>    attachments: [  <span class="hljs-regexp">//</span>支持多种附件形式，可以是String, Buffer或Stream<br>      &#123;<br>        filename: <span class="hljs-string">&#x27;image.png&#x27;</span>,<br>        content: Buffer.from(<br>          <span class="hljs-string">&#x27;iVBORw0KGgoAAAANSUhEUgAAABAAAAAQAQMAAAAlPW0iAAAABlBMVEUAAAD/&#x27;</span> +<br>          <span class="hljs-string">&#x27;//+l2Z/dAAAAM0lEQVR4nGP4/5/h/1+G/58ZDrAz3D/McH8yw83NDDeNGe4U&#x27;</span> +<br>          <span class="hljs-string">&#x27;g9C9zwz3gVLMDA/A6P9/AFGGFyjOXZtQAAAAAElFTkSuQmCC&#x27;</span>,<br>          <span class="hljs-string">&#x27;base64&#x27;</span><br>        ),<br>      &#125;,<br>    ]<br>  &#125;;<br> <br>  let res = await transporter.sendMail(message);<br>  return res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Excel文档处理"><a href="#Excel文档处理" class="headerlink" title="Excel文档处理"></a>Excel文档处理</h4><p>Excel是存储数据比较常见的格式，那如何让云函数拥有读写Excel文件的能力呢？我们可以在Github上搜索关键词“Node Excel”，去筛选Star比较多，条件比较契合的。</p><p>Github地址：<a href="https://github.com/mgcrea/node-xlsx">node-xlsx</a></p><p>使用开发者工具新建一个云函数，在package.json里添加latest最新版的node-xlsx：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;wx-server-sdk&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span>,<br>  <span class="hljs-string">&quot;node-xlsx&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span><br>&#125;<br>读取云存储的Excel文件<br><br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>    cloud.init(&#123;<br>      <span class="hljs-attr">env</span>: cloud.DYNAMIC_CURRENT_ENV,<br>    &#125;)<br>    <br>    <span class="hljs-keyword">const</span> xlsx = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-xlsx&#x27;</span>);<br>    <span class="hljs-keyword">const</span> db = cloud.database()<br>    <br>    <span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>      <span class="hljs-keyword">const</span> fileID = <span class="hljs-string">&#x27;cloud://xly-xrlur.786c-xly-xrlur-1300446086/china.csv&#x27;</span><br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> cloud.downloadFile(&#123;<br>        <span class="hljs-attr">fileID</span>: fileID,<br>      &#125;)<br>      <span class="hljs-keyword">const</span> buffer = res.fileContent<br>    <br>      <span class="hljs-keyword">const</span> tasks = [] <br>      <span class="hljs-keyword">var</span> sheets = xlsx.parse(buffer); <br>      sheets.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sheet</span>) </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> rowId <span class="hljs-keyword">in</span> sheet[<span class="hljs-string">&#x27;data&#x27;</span>]) &#123;<br>          <span class="hljs-built_in">console</span>.log(rowId);<br>          <span class="hljs-keyword">var</span> row = sheet[<span class="hljs-string">&#x27;data&#x27;</span>][rowId]; <br>          <span class="hljs-keyword">if</span> (rowId &gt; <span class="hljs-number">0</span> &amp;&amp; row) &#123; <br>            <span class="hljs-keyword">const</span> promise = db.collection(<span class="hljs-string">&#x27;chinaexcel&#x27;</span>)<br>              .add(&#123;<br>                <span class="hljs-attr">data</span>: &#123;<br>                  <span class="hljs-attr">city</span>: row[<span class="hljs-number">0</span>], <br>                  <span class="hljs-attr">province</span>: row[<span class="hljs-number">1</span>], <br>                  <span class="hljs-attr">city_area</span>: row[<span class="hljs-number">2</span>], <br>                  <span class="hljs-attr">builtup_area</span>: row[<span class="hljs-number">3</span>],<br>                  <span class="hljs-attr">reg_pop</span>: row[<span class="hljs-number">4</span>],<br>                  <span class="hljs-attr">resident_pop</span>: row[<span class="hljs-number">5</span>],<br>                  <span class="hljs-attr">gdp</span>: row[<span class="hljs-number">6</span>]<br>                &#125;<br>              &#125;)<br>            tasks.push(promise)<br>          &#125;<br>        &#125;<br>      &#125;);<br>    <br>      <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(tasks).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> res<br>      &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> err<br>      &#125;)<br>      <span class="hljs-keyword">return</span> result<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="将数据库里的数据保存为CSV"><a href="#将数据库里的数据保存为CSV" class="headerlink" title="将数据库里的数据保存为CSV"></a>将数据库里的数据保存为CSV</h4><p><strong>技术文档：</strong><a href="https://github.com/zemirco/json2csv">json2CSV</a></p><h4 id="HTTP处理"><a href="#HTTP处理" class="headerlink" title="HTTP处理"></a><code>HTTP</code>处理</h4><p>got、<code>superagent</code>、request、<code>axios</code>、request-promise</p><blockquote><p>尽管云函数的<code>Nodejs</code>版本比较低（目前为8.9），但绝大多数模块我们都可以使用<code>Nodejs</code> 12或13的环境来测试，不过有时候也要留意有些模块不支持8.9，比如got 10.0.1以上的版本。</p></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs livescript">node中，http模块也可作为客户端使用（发送请求），第三方模块request对其使用方法进行了封装，操作更方便！所以来介绍一下request模块<br><br>get请求<br><br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>    cloud.init(&#123;<br>      env: cloud.DYNAMIC_CURRENT_ENV,<br>    &#125;)<br>    <span class="hljs-keyword">const</span> rp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;request-promise&#x27;</span>)<br>    <span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>      <span class="hljs-keyword">const</span> options = &#123;<br>        url: <span class="hljs-string">&#x27;https://news-at.zhihu.com/api/4/news/latest&#x27;</span>,<br>        json: <span class="hljs-literal">true</span>,<br>        method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>      &#125;;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> rp(options)<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>结合文件流</strong></p><p>request(‘<a href="https://www.jmjc.tech/public/home/img/flower.png&#39;).pipe(fs.createWriteStream(&#39;./flower.png&#39;)">https://www.jmjc.tech/public/home/img/flower.png&#39;).pipe(fs.createWriteStream(&#39;./flower.png&#39;)</a>) <em>// 下载文件到本地</em></p><h4 id="加解密Crypto"><a href="#加解密Crypto" class="headerlink" title="加解密Crypto"></a>加解密<code>Crypto</code></h4><p><code>crypto</code>模块是<code>nodejs</code>的核心模块之一，它提供了安全相关的功能，包含对 <code>OpenSSL</code> 的哈希、<code>HMAC、</code>加密、解密、签名、以及验证功能的一整套封装。由于<code>crypto</code>模块是内置模块，我们引入它是无需下载，就可以直接引入。</p><p>使用开发者工具新建一个云函数，比如<code>crypto</code>，在<code>index.js</code>里输入以下代码，我们来了解一下<code>crypto</code>支持哪些加密算法，并以<code>MD5</code>加密为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>cloud.init(&#123;<br>    <span class="hljs-attr">env</span>: cloud.DYNAMIC_CURRENT_ENV,<br>&#125;)<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> hashes = crypto.getHashes(); <span class="hljs-comment">//获取crypto支持的加密算法种类列表</span><br> <br>    <span class="hljs-comment">//md5 加密 CloudBase2020 返回十六进制</span><br>    <span class="hljs-keyword">var</span> md5 = crypto.createHash(<span class="hljs-string">&#x27;md5&#x27;</span>);<br>    <span class="hljs-keyword">var</span> message = <span class="hljs-string">&#x27;CloudBase2020&#x27;</span>;<br>    <span class="hljs-keyword">var</span> digest = md5.update(message, <span class="hljs-string">&#x27;utf8&#x27;</span>).digest(<span class="hljs-string">&#x27;hex&#x27;</span>);   <br> <br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;crypto支持的加密算法种类&quot;</span>:hashes,<br>        <span class="hljs-string">&quot;md5加密返回的十六进制&quot;</span>:digest<br>    &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>将云函数部署之后调用从返回的结果我们可以了解到，云函数<code>crypto</code>模块支持46种加密算法。</p><h4 id="发短信"><a href="#发短信" class="headerlink" title="发短信"></a>发短信</h4><p>“qcloudsms_js”: “^0.1.1”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br><span class="hljs-keyword">const</span> QcloudSms = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;qcloudsms_js&quot;</span>)<br><span class="hljs-keyword">const</span> appid = <span class="hljs-number">1400284950</span> <span class="hljs-comment">// 替换成您申请的云短信 AppID 以及 AppKey</span><br><span class="hljs-keyword">const</span> appkey = <span class="hljs-string">&quot;a33b602345f3bb866f040303ac6f98ca&quot;</span><br><span class="hljs-keyword">const</span> templateId = <span class="hljs-number">472078</span> <span class="hljs-comment">// 替换成您所申请模板 ID</span><br><span class="hljs-keyword">const</span> smsSign = <span class="hljs-string">&quot;统计小助理&quot;</span> <span class="hljs-comment">// 替换成您所申请的签名</span><br> <br>cloud.init()<br> <br><span class="hljs-comment">// 云函数入口函数</span><br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/*单发短信示例为完整示例，更多功能请直接替换以下代码*/</span><br>  <span class="hljs-keyword">var</span> qcloudsms = QcloudSms(appid, appkey);<br>  <span class="hljs-keyword">var</span> ssender = qcloudsms.SmsSingleSender();<br>  <span class="hljs-keyword">var</span> params = [<span class="hljs-string">&quot;1234&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>];<br>  <span class="hljs-comment">// 获取发送短信的手机号码</span><br>  <span class="hljs-keyword">var</span> mobile = event.mobile<br>  <span class="hljs-comment">// 获取手机号国家/地区码</span><br>  <span class="hljs-keyword">var</span> nationcode = event.nationcode<br>  ssender.sendWithParam(nationcode, mobile, templateId, params, smsSign, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, res, resData</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">/*设置请求回调处理, 这里只是演示，您需要自定义相应处理逻辑*/</span><br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;err: &quot;</span>, err);<br>      reject(&#123; err &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      resolve(&#123; <span class="hljs-attr">res</span>: res.req, resData &#125;)<br>    &#125;<br>  &#125;<br>  );<br> <br>&#125;)<br></code></pre></td></tr></table></figure><p>使用开发者工具</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vim">wx.cloud.callFunction(&#123;<br>  name: <span class="hljs-string">&#x27;sendphone&#x27;</span>,<br>  dat<span class="hljs-variable">a:</span> &#123;<br>    // mobile: <span class="hljs-string">&#x27;13217922526&#x27;</span>,<br>    mobile: <span class="hljs-string">&#x27;18565678773&#x27;</span>,<br>    nationcode: <span class="hljs-string">&#x27;86&#x27;</span><br>  &#125;,<br>  succes<span class="hljs-variable">s:</span> <span class="hljs-keyword">res</span> =&gt; &#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;[云函数] [sendsms] 调用成功&#x27;</span>)<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>)<br>  &#125;,<br>  fai<span class="hljs-variable">l:</span> err =&gt; &#123;<br>    console.error(<span class="hljs-string">&#x27;[云函数] [sendsms] 调用失败&#x27;</span>, err)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Node</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序云开发</title>
    <link href="/2020/03/23/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91/"/>
    <url>/2020/03/23/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="小程序云开发笔记"><a href="#小程序云开发笔记" class="headerlink" title="小程序云开发笔记"></a>小程序云开发笔记</h1><h2 id="day6调用云函数的接口："><a href="#day6调用云函数的接口：" class="headerlink" title="day6调用云函数的接口："></a><code>day6</code>调用云函数的接口：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs wx">wx.cloud.callFunction(&#123;&#125;)<br>参数说明 类型  必填     说明<br>name  String 是 要调用的云函数名<br>dataObject否传递给云函数的参数<br>config Object  否       可以覆盖wx.cloud.ini 文件配置<br>successFunction否返回云函数调用的返回结果<br>failFunction否接口调用失败的回调函数<br>completeFunction否接口调用结束的回调函数（调用成功、失败都会执行）<br></code></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span> 参数 <span class="hljs-keyword">data</span>参数是一个对象，里面放的是调用云函数时传给云函数的参数。即调用云函数时所需要的参数 ，还有wx.cloud.callFunction()里的res就是调用云函数时的返回值</span><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">config 对象定义<br>字段 env 使用的环境 ID，填写后忽略 init 指定的环境<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">success返回参数/promise返回结果说明：<br>参数类型说明最低版本<br>errMsg<span class="hljs-keyword">String</span>通用返回结果<br>result<span class="hljs-keyword">String</span>云函数返回的结果<br>requestID<span class="hljs-keyword">String</span>云函数执行 ID，可用于在控制台查找日志<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">fail</span>返回参数说明<br>字段说明数据类型<br>errCode错误码Number<br>errMsg错误信息，格式 apiName:<span class="hljs-keyword">fail</span> msg<span class="hljs-built_in">String</span><br></code></pre></td></tr></table></figure><h3 id="云开发服务端的API"><a href="#云开发服务端的API" class="headerlink" title="云开发服务端的API"></a>云开发服务端的<code>API</code></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getWXContext</span><span class="hljs-params">()</span></span><br>字段含义字段存在条件最低版本<br>OPENID小程序用户 openid小程序端调用云函数时<br>APPID小程序 AppID小程序端调用云函数时<br>UNIONID小程序用户 unionid小程序端调用云函数，并且满足 unionid 获取条件时<br>ENV云函数所在环境的 ID无<span class="hljs-number">0.6</span>.<span class="hljs-number">0</span><br>SOURCE调用来源（云函数本次运行是被什么触发）无<span class="hljs-number">0.7</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">SOURCE 值跟随调用链条传递，会表示调用链路情况（用英文逗号分隔），比如小程序调用云函数 <span class="hljs-selector-tag">A</span>，再在云函数 <span class="hljs-selector-tag">A</span> 内调用云函数 <span class="hljs-selector-tag">B</span>，则 <span class="hljs-selector-tag">A</span> 获得的 SOURCE 为 wx_client， <span class="hljs-selector-tag">B</span> 内获得的 SOURCE 为 wx_client,scf（微信小程序调用，然后云函数调用）。<br><br>SOURCE 的枚举类型：<br><br>SOURCE 值含义<br>wx_devtools微信 IDE 调用<br>wx_client微信小程序调用<br>wx_http微信 HTTP API 调用<br>wx_unknown微信未知来源调用<br>scf云函数调用云函数<br>其他非微信端触发<br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">注意事项<br>请不要在 <span class="hljs-built_in">exports</span>.main 外使用 getWXContext，此时尚没有调用上下文，无法获取得到信息。<br></code></pre></td></tr></table></figure><h3 id="json格式"><a href="#json格式" class="headerlink" title="json格式"></a><code>json</code>格式</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">res.result是对象，而<span class="hljs-type">JSON</span>.stringify(res.result)是<span class="hljs-type">json</span>格式， <span class="hljs-type">JSON</span>.stringify() 方法是将一个JavaScript值(对象或者数组)转换为一个 <span class="hljs-type">JSON</span>字符串，因为对象如果直接渲染到页面是会显示 [<span class="hljs-keyword">object</span> <span class="hljs-keyword">Object</span>]的。<br></code></pre></td></tr></table></figure><h3 id="wx-cloud方法"><a href="#wx-cloud方法" class="headerlink" title="wx.cloud方法"></a><code>wx.cloud</code>方法</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">CloudID: ƒ () <span class="hljs-regexp">//</span>用于云调用获取开放数据<br>callFunction: ƒ () <span class="hljs-regexp">//</span>调用云函数<br>database: ƒ () <span class="hljs-regexp">//</span>获取数据库的引用<br>deleteFile: ƒ () <span class="hljs-regexp">//</span>从云存储空间删除文件<br>downloadFile: ƒ () <span class="hljs-regexp">//</span>从云存储空间下载文件<br>getTempFileURL: ƒ () <span class="hljs-regexp">//</span>用云文件 ID 换取真实链接<br>init: ƒ ()  <span class="hljs-regexp">//</span>初始化云开发能力<br>uploadFile: ƒ () <span class="hljs-regexp">//</span>上传文件至云存储空间<br></code></pre></td></tr></table></figure><h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a><code>async和await</code></h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">在wx-server-sdk中不再兼容success、fail、complete回调，只会返回<span class="hljs-built_in">Promise</span>。在云函数中也经常会需要处理一些异步操作，在异步操作完成后再返回结果给到调用方，我们可以通过在云函数中返回一个  <span class="hljs-built_in">Promise</span> 的方法来实现。<span class="hljs-built_in">Promise</span>表示异步操作返回的结果。在新建的云函数里会看到下面这样的一个语句（有 <span class="hljs-keyword">async</span>）<br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">async</span>表示函数里有异步操作，<span class="hljs-keyword">async</span>函数的返回值是一个 <span class="hljs-built_in">Promise</span> 对象。在后面还会遇到 <span class="hljs-keyword">await</span>，表示紧跟在它后面的表达式需要等待结果；以及promise对象的<span class="hljs-keyword">then</span>()方法（有点类似于success回调函数），和<span class="hljs-keyword">catch</span>()方法（有点类似于fail回调函数），这些我们以后会经常遇到，先理解不了也没有关系，大家在书写时推荐云函数使用上面的写法就对了。<br></code></pre></td></tr></table></figure><h3 id="云函数的注意事项"><a href="#云函数的注意事项" class="headerlink" title="云函数的注意事项"></a>云函数的注意事项</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>在云函数部署并上传到云端之后，更新里面的文件比如<span class="hljs-keyword">index</span>.js、config.json，建议右键点击更新好的文件（不是云函数目录）选择云函数增量上传：更新文件，不建议通过上传并部署所有文件的方式，否则在几分钟内会出现云函数调用失败的情况；<br><span class="hljs-number">2.</span>删除一个云函数之后，不建议再新建一个同名的云函数并上传部署，否则在十多分钟内会出现云函数调用失败的情况，建议换一个云函数名，比如<span class="hljs-keyword">login</span>换成<span class="hljs-keyword">user</span>，在小程序端使用 wx.cloud.callFunction(&#123;<span class="hljs-type">name</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;)调用云函数时把<span class="hljs-type">name</span>的值换成<span class="hljs-keyword">user</span>就可以了<br><span class="hljs-number">3.</span>调用云函数时，我们还可以在开发者工具调试面板的NetWork标签查看调用云函数的情况。<br></code></pre></td></tr></table></figure><h3 id="组件获取用户信息对比"><a href="#组件获取用户信息对比" class="headerlink" title="组件获取用户信息对比"></a>组件获取用户信息对比</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">&lt;button <span class="hljs-keyword">open</span>-<span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">&quot;getUserInfo&quot;</span> bindgetuserinfo=<span class="hljs-string">&quot;getUserInfomation&quot;</span>&gt; 点击获取用户信息 &lt;/button&gt;<br>重点时<span class="hljs-keyword">open</span>-<span class="hljs-class"><span class="hljs-keyword">type</span>和<span class="hljs-title">bindgetuserinfo</span>事件</span><br></code></pre></td></tr></table></figure><h3 id="wx-cloud-uploadFile"><a href="#wx-cloud-uploadFile" class="headerlink" title="wx.cloud.uploadFile"></a><code>wx.cloud.uploadFile</code></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">wx<span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.uploadFile</span><br>将本地资源上传至云存储空间，如果上传至同一路径则是覆盖写<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">字段说明数据类型默认值必填<br>cloudPath云存储路径，命名限制见文件名命名限制String-Y<br>filePath要上传文件资源的路径String-Y<br>headerHTTP 请求 Header, header 中不能设置 RefererObject-N<br>config配置Object-N<br><span class="hljs-keyword">success</span>成功回调<br>fail失败回调<br>complete结束回调<br></code></pre></td></tr></table></figure><h3 id="小程序调用数据库"><a href="#小程序调用数据库" class="headerlink" title="小程序调用数据库"></a>小程序调用数据库</h3><ul><li><p>```<br>先使用wx.cloud.database()获取数据库的引用（相当于连接数据库）</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```<br>  再使用db.collection()获取集合的引用；<br></code></pre></td></tr></table></figure></li><li><p>```<br>再通过Collection.get来获取集合里的记录.</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  <br><br>## `day7`之一  云数据库入门<br><br>`运数据库就是一个数据库了，只需要往里面添加表(集合)即可，不用再创建数据库`<br><br></code></pre></td></tr></table></figure><p>云数据库                 MySQL数据库        Excel文件<br>数据库database         数据库 database     工作簿<br>集合 collection        表 table                工作表<br>字段field            数据列column          数据表的每一列<br>记录 record/doc        记录row             数据表除开第一行的每一行</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 数据库中的创建者，根据`openid`区分<br><br></code></pre></td></tr></table></figure><p>auth.openid  </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 查询集合里的记录<br><br></code></pre></td></tr></table></figure><p>const db = wx.cloud.database()  //获取数据库的引用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>const _ = db.command  //获取数据库查询及更新指令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>db.collection(“china”) //获取集合china的引用<br>  .where({           //查询的条件指令where</p><pre><code class="hljs">  gdp: _.gt(3000) //查询筛选条件, gt表示字段需大于指定值</code></pre><p>  })<br>  .field({            //显示哪些字段 true 显示false不显示</p><pre><code class="hljs">  _id: false,  city: true,  province: true,  gdp:true</code></pre><p>  })<br>  .orderBy(‘gdp’, ‘desc’) //参数一为要排序的字段，参数二为排序方式desc降序 asc 升序<br>  .skip(0)            //跳过多少个记录(常用于分页)，0表示这里不跳过<br>  .limit(10)            //限制显示多少条记录，这里为10<br>  .get()                //获取根据查询条件筛选后的集合数据<br>  .then(res =&gt; {        //then 执行成功后的执行的函数 传递的参数为函数 可以传两个</p><pre><code class="hljs">  console.log(res.data)</code></pre><p>  })<br>  .catch(res =&gt;{        //catch 执行失败后执行的参数 传递的参数的类型为函数</p><pre><code class="hljs">  console.error(err)</code></pre><p>  })</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>大家可以留意一下数据查询的链式写法，wx.cloud.database().collection(‘数据库名’).where().get().then().catch()，前半部分是数据查询时对对象的引用和方法的调用；后半部分是Promise对象的方法，Promise对象是get()的返回值。写的时候为了让结构更加清晰，我们做了换行处理，写在同一行也是可以的。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 构建查询条件的<span class="hljs-number">5</span>个方法<br><br></code></pre></td></tr></table></figure><p>在上面的案例中，就包含了构建查询条件的五个方法： Collection.where()、 Collection.field()、 Collection.orderBy()、 Collection.skip()、 Collection.limit()，这五个方法是可以单独拆开使用的，比如只使用where或只使用field、limit，也可以从这5个中抽几个组合在一起使用，还可以一次查询里写多个相同的方法，比如orderBy、where可以写多次相同的。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>不过值得注意的是这5个方法顺序不同查询的结果有时也会有所不同（比如orderBy多次打乱顺序的情况下），查询性能也会有所不同。通常skip最好放在后面，不要让skip略过大量数据。skip().limit()和limit().skip()效果是等价的。构建查询条件的5个方法是基于集合引用Collection的，就拿where来说，不能写成 wx.cloud.database().where()，也不能是 wx.cloud.database().collection(“china”).doc.where()，只能是 wx.cloud.database().collection(“china”).where()，也就是只能用于查询集合collection里的记录。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>const db = wx.cloud.database().collection.where(gdp:db.command.gt(3000)).field(_id:true,gdp: true).ordeBy(‘gdp’,desc).skip(0).limit(20).get().then().catch()</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 分页<br><br></code></pre></td></tr></table></figure><p>分页显示skip，skip常与limit一起用于分页，比如商品列表一页只显示20个商品，第1页显示整个数据的0~20个，那么第2页我们用skip(20)可以跳过第一页的20条数据，第3页则跳过40个数据，第N页则是skip((n-1)*20)个数据：<br>思路：每点击一次按钮查询一次数据库</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><br><span class="hljs-comment">### 查询指令Command</span><br><br>指令用于查询时，都会写在where内，主要对字段的值进行比较和逻辑的筛选判断。数据库 `API` 提供了大于、小于等多种查询指令，这些指令都暴露在  `db.command` 对象上。<br><br>指令Command可以分为查询指令和更新指令，这两者的用法有很大的区别，查询指令用于`db.collection`的where条件筛选，而更新指令则是用于`db.collection.doc`的update请求的字段的更新里，这两者的区别在后面我们也会反复提及。<br><br><span class="hljs-comment">#### **比较操作符和逻辑操作符**</span><br><br>​**查询指令之比较**<br><br>| [gt](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.gt.html) |    大于    | [lt](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.lt.html) |    小于    |<br>| <span class="hljs-symbol">:----------------------------------------------------------</span>: | <span class="hljs-symbol">:--------</span>: | <span class="hljs-symbol">:----------------------------------------------------------</span>: | <span class="hljs-symbol">:--------</span>: |<br>| [eq](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.eq.html) |    等于    | [neq](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.neq.html) |   不等于   |<br>| [lte](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.lte.html) | 小于或等于 | [gte](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.gte.html) | 大于或等于 |<br>| [<span class="hljs-keyword">in</span>](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.in.html) |  在数组中  | [nin](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.nin.html) | 不在数组中 |<br><br>​**查询指令之逻辑**<br><br>| [<span class="hljs-keyword">and</span>](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.and.html) | 条件与 | [<span class="hljs-keyword">or</span>](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.or.html) | 条件或 |<br>| ------------------------------------------------------------ | ------ | ------------------------------------------------------------ | ------ |<br>| [<span class="hljs-keyword">not</span>](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.not.html) | 条件非 | [nor](<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/developers.weixin.qq.com/miniprogram</span><span class="hljs-regexp">/dev/wxcloud</span><span class="hljs-regexp">/reference-sdk-api/database</span><span class="hljs-regexp">/command/</span>Command.nor.html) | 都不   |<br><br><span class="hljs-comment">#### **查询指令的写法**</span><br><br></code></pre></td></tr></table></figure><p>指令command是基于database数据库引用的，我们以大于gt在小程序端（以大于3000为例）的完整写法为例：<br>wx.cloud.database().command.gt(3000)<br>为了简便，通常我们会把 wx.cloud.database()会赋值给一个变量，如 db， db.command又会赋值给 _，使用时最终被简化为 _.gt(3000)。通过一层一层的声明变量并赋值，大大简化了指令的写法，大家可以在其他指令都沿用这种写法。</p></li></ul><p>用法丰富的等于指令Command.eq<br>相比于其他的比较指令等于eq和不等于neq操作符的用法非常丰富，它可以进行数值比较，我们查询某个字段比如GDP等于某个数值如17502.8亿的城市：<br>  .where({<br>         gdp: _.eq(17502.8),<br>         })<br>  .where({<br>     gdp: _.eq(17502.8),<br>     })<br>它还可以进行字符串的匹配，比如我们查询某个字段比如city完整匹配一个字符串如深圳：</p><p>.where({<br>         city: _.eq(“深圳”),<br>         })</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>注意：在查询时，gdp: _.eq(17502.8)的效果等同于gdp:17502.8，而city: _.eq(“深圳”)等同于city:”深圳”，虽然两种方式查询的结果都是一致的，但是它们的原理不同，前者用的是等于指令，后者用的是传递对象值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>eq还可以用于字段的值是数组以及对象的情况，在后面的章节我们会再来介绍。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### **字段内的逻辑指令**<br><br>查询广东省内、GDP在<span class="hljs-number">3000</span>亿以上且在<span class="hljs-number">1</span>万亿以下的城市。在广东省内也就是让字段province的值等于”广东”，而GDP的要求则是GDP这个字段同时满足大于<span class="hljs-number">3000</span>亿且小于<span class="hljs-number">1</span>万亿，这时就需要用到and（条件与，也就是且的意思）：<br><br></code></pre></td></tr></table></figure><p>  .where({<br>    province:<em>.eq(“广东”),<br>    gdp:</em>.gt(3000).and(_.lt(10000))<br>  })</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### **跨字段的逻辑指令**<br><br></code></pre></td></tr></table></figure><p>上面的案例中where内的两个条件， province:<em>.eq(“广东”)和 gdp:</em>.gt(3000).and(_.lt(10000))带有跨字段的条件与and（也就是且）的关系，那如何实现跨字段的条件或or呢？</p><p>查询中国GDP在3000亿元以上且常住人口在500万以上或建城区面积在300平方公里以上的前20个大城市。这里常住人口和建成区面积只需要满足其中一个条件即可，这就涉及到条件或or（注意下面代码的格式写法）：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>  .where(<br>    {<br>     gdp: <em>.gt(3000),<br>     resident_pop:</em>.gt(500),<br>     },<br>    _.or([{<br>     builtup_area: _.gt(300)}<br>     ]),<br>  )</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>注意上面三个条件， gdp: <em>.gt(3000)和 resident_pop:</em>.gt(500)是逻辑与，而与 builtup_area: _.gt(300)}的关系是逻辑或。 _.or([{条件一 },{条件二 }])内是一个数组，条件一与条件二又构成逻辑与的关系。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### 正则查询`db.RegExp`<br><br>正则表达式能够灵活有效匹配字符串，可以用来检查一个串里是否含有某种子串，比如“`CloudBase`技术训练营”里是否含有”技术”这个词。云数据库正则查询支持`UTF`<span class="hljs-number">-8</span>的格式，可以进行中英文的模糊查询。正则查询也是写在<span class="hljs-keyword">where</span>字段的条件筛选里。<br><br>#### 字段字符串的模糊查询<br><br>我们可以用正则查询来查询某个字段，比如city城市名称内，包含某个字符串比如”州”的城市：<br><br></code></pre></td></tr></table></figure><p>.where({<br>    city: db.RegExp({<br>      regexp: ‘州’,<br>      options: ‘i’,<br>    })<br>  })</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>注意这里的city是字段，`db.RegExp()`里的`regexp`是正则表达式，而options是flag，i是flag的值表示不区分字母的大小写。当然我们也可以直接在where内用JavaScript的原生写法或调用 `RegExp`对象的构造函数。比如上面的案例也可以写成：<br><br>```javascript<br>//JavaScript原生正则写法<br>  .where(&#123;<br><span class="hljs-title">     city:</span>/州/i<br>  &#125;)<br> <br>//JavaScript调用RegExp对象的构造函数写法<br>  .where(&#123;<br><span class="hljs-title">    city:</span> <span class="hljs-keyword">new</span> db.RegExp(&#123;<br><span class="hljs-title">      regexp:</span> <span class="hljs-string">&quot;州&quot;</span>,<br><span class="hljs-title">      options:</span> &#x27;i&#x27;,<br>    &#125;)<br>  &#125;)<br></code></pre></td></tr></table></figure><p>数据库查询的正则表达式也支持模板字符串，比如我们可以先声明<code>const cityname</code>=”州”，然后用模板字符串包住<code>cityname</code>变量：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">city: db.<span class="hljs-built_in">RegExp</span>(&#123;<br>     regexp:`$&#123;cityname&#125;`,<br>     options: <span class="hljs-string">&#x27;i&#x27;</span>,<br>   &#125;)<br></code></pre></td></tr></table></figure><h4 id="简单的正则表达式入门"><a href="#简单的正则表达式入门" class="headerlink" title="简单的正则表达式入门"></a><strong>简单的正则表达式入门</strong></h4><p>正则表达式的用法是非常繁杂的，关于正则表达式的知识可以去<code>MDN</code>以及掘金上面搜索了解更多细节。</p><p>值得注意的是，在数据库查询时应尽可能避免过度使用正则表达式来做复杂的匹配，尤其是用户访问触发较多的场景，通常情况下数据查询的响应时间（无论是小程序端还是云函数端）最好要低于<code>500ms</code>。</p><h4 id="在小程序端新增记录和统计记录"><a href="#在小程序端新增记录和统计记录" class="headerlink" title="在小程序端新增记录和统计记录"></a>在小程序端新增记录和统计记录</h4><p>在前面我们已经介绍了集合数据请求的<strong>查询方法get</strong>，除了get查询外，<strong>请求的方法</strong>还有<strong>add新增</strong>，<strong>remove删除</strong>、<strong>update改写/更新</strong>、<strong>count统计</strong>以及<strong>watch监听</strong>，这些方法都是基于数据库集合的引用Collection的，接下来我们再来介绍如何基于Collection新增记录和统计记录的数量。</p><p>基于数据库集合的引用Collection所查询到的记录都是多条记录，也就是说我们可以对N条记录进行增、删、改、查等操作，不过目前还不支持在小程序端进行多条记录的update和remove，<strong>只能在云函数端</strong>进行这样的操作。</p><h5 id="统计记录Collection-count"><a href="#统计记录Collection-count" class="headerlink" title="统计记录Collection.count"></a><strong>统计记录<code>Collection.count</code></strong></h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">const db = wx<span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.database</span>()<br>const _ = db<span class="hljs-selector-class">.command</span><br>db<span class="hljs-selector-class">.collection</span>(<span class="hljs-string">&quot;china&quot;</span>)<br>  <span class="hljs-selector-class">.where</span>(&#123;             <br>    gdp: _<span class="hljs-selector-class">.gt</span>(<span class="hljs-number">3000</span>)    <br>  &#125;)<br>  <span class="hljs-selector-class">.count</span>()<span class="hljs-selector-class">.then</span>(res =&gt; &#123;<br>    console<span class="hljs-selector-class">.log</span>(res.total)<br>  &#125;)<br></code></pre></td></tr></table></figure><p>field、<code>orderBy</code>、skip、limit对count是无效的，只有where才会影响count的结果，count只会返回记录数，不会返回查询到的数据。</p><h3 id="增加记录"><a href="#增加记录" class="headerlink" title="增加记录"></a>增加记录</h3><p><code>Collection.add</code></p><ul><li><p>获取集合之后通过add方法可以增加集合记录</p></li><li><p>add的参数传入一个对象，是一个回调函数，需要传入参数data ，data类型也是一个data，传入的是该集合各个字段的值</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vim">addDaily()&#123;<br>   db.collection(<span class="hljs-string">&#x27;zhihu_daily&#x27;</span>).<span class="hljs-built_in">add</span>(&#123;<br>     dat<span class="hljs-variable">a:</span> &#123;<br>       _id:<span class="hljs-string">&quot;daily9718005&quot;</span>,<br>       title: <span class="hljs-string">&quot;元素，生生不息的宇宙诸子&quot;</span>,<br>       image<span class="hljs-variable">s:</span> [<br>   <span class="hljs-string">&quot;https://pic4.zhimg.com/v2-3c5d866701650615f50ff4016b2f521b.jpg&quot;</span><br> ],<br>       id: <span class="hljs-number">9718005</span>,<br>       ur<span class="hljs-variable">l:</span> <span class="hljs-string">&quot;https://daily.zhihu.com/story/9718005&quot;</span>,<br>       image: <span class="hljs-string">&quot;https://pic2.zhimg.com/v2-c6a33965175cf81a1b6e2d0af633490d.jpg&quot;</span>,<br>       share_ur<span class="hljs-variable">l:</span> <span class="hljs-string">&quot;http://daily.zhihu.com/story/9718005&quot;</span>,<br>       body:<span class="hljs-string">&quot;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;谨以此文，纪念元素周期表发布 150 周年。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;\r\n&lt;p&gt;地球，世界，和生活在这里的芸芸众生从何而来，这是每个人都曾有意无意思考过的问题。&lt;/p&gt;\r\n&lt;p&gt;科幻小说家道格拉斯·亚当斯给了一个无厘头的答案，42；宗教也给出了诸神创世的虚构场景；&lt;/p&gt;\r\n&lt;p&gt;最为恢弘的画面，则是由科学给出的，另一个意义上的&lt;strong&gt;生死轮回，一场属于元素的生死轮回&lt;/strong&gt;。&lt;/p&gt;&quot;</span><br>     &#125;<br>   &#125;)<br>     .then(<span class="hljs-keyword">res</span> =&gt; &#123;<br>       console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>)<br>     &#125;)<br>     .<span class="hljs-keyword">catch</span>(console.error)<br> &#125;<br></code></pre></td></tr></table></figure><p><code>_openid</code><strong>与集合权限</strong></p><p>注意和导入的数据不同的是，在小程序端新增记录，都会自动添加一个<code>_openid</code>的字段，它的值等于用户 <code>openid</code>，<code>_openid</code>的值是不允许修改的。当我们把集合的权限改为<strong>仅创建者可读写</strong>，或<strong>所有人可读，仅创建者可读写</strong>，<strong>在小程序端查询或更新记录时，会自动添加一个条件</strong>，</p></li></ul><h3 id="集合请求方法注意事项"><a href="#集合请求方法注意事项" class="headerlink" title="集合请求方法注意事项"></a><strong>集合请求方法注意事项</strong></h3><p>get、update、count、remove、add等都是请求，在小程序端可以有callback和promise两种写法，但是在云函数端只能用promise，不能用callback。为了方便，建议大家统一使用promise的写法，也就是then、catch。</p><p>get、update、count、remove、add请求不能在一个数据库引用里同时存在。比如不能又是get()，又是count()的，不能这么写：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.collection</span>(<span class="hljs-string">&#x27;china&#x27;</span>)<span class="hljs-selector-class">.where</span>(&#123;<br>    _openid: <span class="hljs-string">&#x27;xxx&#x27;</span>,×<br>&#125;)<span class="hljs-selector-class">.get</span>()<span class="hljs-selector-class">.count</span>()<span class="hljs-selector-class">.add</span>()<br></code></pre></td></tr></table></figure><h3 id="云函数端操作集合内记录"><a href="#云函数端操作集合内记录" class="headerlink" title="云函数端操作集合内记录"></a>云函数端操作集合内记录</h3><h4 id="云函数端调用数据库"><a href="#云函数端调用数据库" class="headerlink" title="云函数端调用数据库"></a><strong>云函数端调用数据库</strong></h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">在云开发能力章节我们已经介绍过如何在云函数端调用数据库，这里也是一样。新建一个云函数chinadata，然后在 exports.main = <span class="hljs-keyword">async</span> (<span class="hljs-keyword">event</span>, context) =&amp;gt; &#123;&#125;输入以下代码，注意是 <span class="hljs-keyword">const</span> db = cloud.database()，wx. cloud.database()，云函数端的数据库引用和小程序端有所不同：<br></code></pre></td></tr></table></figure><h3 id="删除多条数据记录"><a href="#删除多条数据记录" class="headerlink" title="删除多条数据记录"></a>删除多条数据记录</h3><p>五个查询条件 where field <code>orderBy</code> skip limit  </p><p>于数据库集合的引用Collection，我们可以先匹配 where 语句查询到相关条件的多条记录，再来调用<code>Collection.remove()</code>来进行删除。五个查询方法，skip和limit不支持，field、<code>orderBy</code>没有意义，只有where条件可以用来筛选记录。<strong>数据一旦删除就不能再找回了</strong>。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">我们可以把之前建好的chinadata云函数 <span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&amp;gt; &#123;&#125;里的代码修改为如下，即删除省份province为广东的所有数据：<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> db.collection(<span class="hljs-string">&#x27;china&#x27;</span>)<br>  .<span class="hljs-keyword">where</span>(&#123;<br>    province:<span class="hljs-string">&quot;广东&quot;</span><br>  &#125;)<br>  .<span class="hljs-keyword">remove</span>()<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">在模拟器里点击调用chinadata云函数的<span class="hljs-selector-tag">button</span>按钮，就能在控制台里看到云函数返回的对象，其中包含stats: &#123;removed: <span class="hljs-number">22</span>&#125;，即删除了<span class="hljs-number">22</span>条数据<br></code></pre></td></tr></table></figure><h3 id="更新多条记录"><a href="#更新多条记录" class="headerlink" title="更新多条记录"></a>更新多条记录</h3><p>我们可以把之前建好的<code>chinadata</code>云函数 <code>exports.main·</code>= <code>async</code> (event, context) =&gt; {}里的代码修改为如下，也就是先查询省份province为湖北的记录，给这个记录更新一个字段英文省份名pro-en：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> await db.collection(<span class="hljs-string">&#x27;china&#x27;</span>)<br>   .<span class="hljs-keyword">where</span>(&#123;<br>     province:<span class="hljs-string">&quot;湖北&quot;</span><br>   &#125;)<br>   .update(&#123;<br>     <span class="hljs-keyword">data</span>: &#123;<br>       <span class="hljs-string">&quot;pro-en&quot;</span>: <span class="hljs-string">&quot;Hubei&quot;</span><br>     &#125;,<br>   &#125;)<br></code></pre></td></tr></table></figure><p>这里要注意的是，pro-en这个字段之前是没有的，通过<code>Collection.update</code>不只是起到更新的作用，还可以<strong>批量新增字段并赋值</strong>，也就是update时记录里有相同字段就更新，没有就新增； “pro-en”: “<code>Hubei</code>“，直接使用pro-en会报错，用双引号效果等价。</p><p>如果你想给导入的数据添加<code>_openid</code>字段，只用云函数是没法实现的，因为云函数没有用户的登录态。我们需要先在小程序端调用云函数比如login返回<code>openid</code>，再将<code>openid</code>的值再传给<code>chinadata</code>云函数，才能给记录添加<code>openid</code>。</p><h3 id="单个记录"><a href="#单个记录" class="headerlink" title="单个记录"></a>单个记录</h3><h4 id="操作单个记录doc的字段值"><a href="#操作单个记录doc的字段值" class="headerlink" title="操作单个记录doc的字段值"></a>操作单个记录doc的字段值</h4><p>在前面我们已经了解了基于集合引用Collection构建查询条件的5个方法，以及一些请求方法，接下来我们来讲一下基于集合记录引用Document的四个请求方法：<strong>获取单个记录数据</strong><code>Document.get()</code>、<strong>删除单个记录</strong><code>Document.remove()</code>、<strong>更新单个记录</strong><code>Document.update()</code>、<strong>替换更新单个记录</strong><code>Document.set()</code>。和基于Collection不一样的是，前者的增删改查是可以批量多条的，而基于Document则是操作单条记录。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">查询集合collection里的记录常用于获取文章、资讯、商品、产品等等的列表；而查询单个记录doc的字段值则常用于这些列表里的详情内容。如果你在开发中需要增删改查某个记录的字段值，为了方便让程序可以根据_<span class="hljs-keyword">id</span>找到对应的记录，建议在创建记录的时候_<span class="hljs-keyword">id</span>用程序有规则的生成。<br></code></pre></td></tr></table></figure><h4 id="查询单个记录doc的字段值"><a href="#查询单个记录doc的字段值" class="headerlink" title="查询单个记录doc的字段值"></a><strong>查询单个记录doc的字段值</strong></h4><p>集合里的每条记录都有一个 _id 字段用以<strong>唯一标志</strong>一条记录，_id 的数据格式可以是number数字，也可以是string字符串。这个_id是<strong>可以自定义</strong>的，当导入记录或写入记录<strong>没有自定义时系统会自动生成</strong>一个非常长的字符串。**查询记录doc的字段field值就是基于_id的。</p><p>比如我们查询其中知乎日报的一篇文章（也就是其中一条记录）的数据，使用开发者工具<code>zhihudaily</code>页面的<code>zhihudaily</code>.js的<code>onLoad</code>生命周期函数里输入以下代码（<strong>db不要重复声明</strong>）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.collection</span>(<span class="hljs-string">&#x27;zhihu_daily&#x27;</span>)<span class="hljs-selector-class">.doc</span>(<span class="hljs-string">&quot;daily9718006&quot;</span>)<br>  <span class="hljs-selector-class">.get</span>()<br>  <span class="hljs-selector-class">.then</span>(res =&gt; &#123;<br>  console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;单个记录的值&#x27;</span>,res.data)<br>  &#125;)<br>  <span class="hljs-selector-class">.catch</span>(err =&gt; &#123;<br>    console<span class="hljs-selector-class">.error</span>(err)<br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><p>如果集合的数据是导入的，那_id是自动生成的，自动生成的_id是字符串string，所以doc内使用了单引号（双引号也是可以的哦），如果你自定义的_id是number类型，比如自定义的_id为20191125，查询时为doc(20191125)即可，这只是基础知识啦。</p><h4 id="删除单条记录"><a href="#删除单条记录" class="headerlink" title="删除单条记录"></a>删除单条记录</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">removeDaily</span><span class="hljs-params">()</span></span>&#123;           db<span class="hljs-selector-class">.collection</span>(<span class="hljs-string">&#x27;zhihu_daily&#x27;</span>)<span class="hljs-selector-class">.doc</span>(<span class="hljs-string">&quot;daily9718006&quot;</span>)<br>     <span class="hljs-selector-class">.remove</span>()<br>     <span class="hljs-selector-class">.then</span>(console.log)<br>     <span class="hljs-selector-class">.catch</span>(console.error)<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="更新单条记录"><a href="#更新单条记录" class="headerlink" title="更新单条记录"></a>更新单条记录</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">updateDaily</span><span class="hljs-params">()</span></span>&#123;<br>  db<span class="hljs-selector-class">.collection</span>(<span class="hljs-string">&#x27;zhihu_daily&#x27;</span>)<span class="hljs-selector-class">.doc</span>(<span class="hljs-string">&quot;daily9718006&quot;</span>)<br>      <span class="hljs-selector-class">.update</span>(&#123;<br>        data:&#123;<br>          title: <span class="hljs-string">&quot;【知乎日报】元素，生生不息的宇宙诸子&quot;</span>,<br>        &#125;<br>      &#125;)<span class="hljs-selector-class">.then</span>(res =&gt; &#123;<br>      console<span class="hljs-selector-class">.log</span>(res)<br>      &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><h4 id="替换更新记录"><a href="#替换更新记录" class="headerlink" title="替换更新记录"></a><strong>替换更新记录</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift">setDaily()&#123;<br>   db.collection(&#x27;zhihu_daily&#x27;).doc(<span class="hljs-string">&quot;daily9718006&quot;</span>)<br>     .set(&#123;<br>       data: &#123;<br>         <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;为什么狗会如此亲近人类?&quot;</span>,<br>         <span class="hljs-string">&quot;images&quot;</span>: [<br>           <span class="hljs-string">&quot;https://pic4.zhimg.com/v2-4cab2fbf4fe9d487910a6f2c54ab3ed3.jpg&quot;</span><br>         ],<br>         <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">9717547</span>,<br>         <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://daily.zhihu.com/story/9717547&quot;</span>,<br>         <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;https://pic4.zhimg.com/v2-60f220ee6c5bf035d0eaf2dd4736342b.jpg&quot;</span>,<br>         <span class="hljs-string">&quot;share_url&quot;</span>: <span class="hljs-string">&quot;http://daily.zhihu.com/story/9717547&quot;</span>,<br>         <span class="hljs-string">&quot;body&quot;</span>:  <span class="hljs-string">&quot;&lt;p&gt;让狗从凶猛的野兽变成忠实的爱宠，涉及了宏观与微观上的两层故事：我们如何在宏观上驯养了它们，以及这些驯养在生理层面究竟意味着什么。&lt;/p&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&lt;p&gt;&lt;img class=<span class="hljs-subst">\&quot;</span>content-image<span class="hljs-subst">\&quot;</span> src=<span class="hljs-subst">\&quot;</span>http://pic1.zhimg.com/70/v2-4147c4b02bf97e95d8a9f00727d4c184_b.jpg<span class="hljs-subst">\&quot;</span> alt=<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\&quot;</span>&gt;&lt;/p&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&lt;p&gt;狗是灰狼（Canis lupus）被人类驯养后形成的亚种，至少可以追溯到 1 万多年以前，是人类成功驯化的第一种动物。在这漫长的岁月里，人类的定向选择强烈改变了这个驯化亚种的基因频率，使它呈现出极高的多样性，尤其体现在生理形态上。&lt;/p&gt;&quot;</span><br>       &#125;<br>     &#125;)<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="day7-之二-存储、数组、对象"><a href="#day7-之二-存储、数组、对象" class="headerlink" title="day7 之二 存储、数组、对象"></a><code>day7</code> 之二 存储、数组、对象</h2><h4 id="云存储下载文件"><a href="#云存储下载文件" class="headerlink" title="云存储下载文件"></a>云存储下载文件</h4><h5 id="小程序端"><a href="#小程序端" class="headerlink" title="小程序端"></a>小程序端</h5><h5 id="wx-cloud-downloadFile"><a href="#wx-cloud-downloadFile" class="headerlink" title="wx.cloud.downloadFile"></a><code>wx.cloud.downloadFile</code></h5><table><thead><tr><th align="left">字段</th><th align="left">说明</th><th align="left">数据类型</th><th align="left">默认值</th><th align="left">必填</th></tr></thead><tbody><tr><td align="left"><code>fileID</code></td><td align="left">云文件 ID</td><td align="left">String</td><td align="left">-</td><td align="left">Y</td></tr><tr><td align="left"><code>config</code></td><td align="left">配置</td><td align="left">Object</td><td align="left">-</td><td align="left">N</td></tr><tr><td align="left">success</td><td align="left">成功回调</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">fail</td><td align="left">失败回调</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">complete</td><td align="left">结束回调</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h5 id="云函数端"><a href="#云函数端" class="headerlink" title="云函数端"></a>云函数端</h5><h5 id="downloadFile"><a href="#downloadFile" class="headerlink" title="downloadFile"></a><code>downloadFile</code></h5><p>从云存储空间下载文件</p><p><strong>请求参数</strong></p><table><thead><tr><th align="left">字段</th><th align="left">说明</th><th align="left">数据类型</th><th align="left">默认值</th><th align="left">必填</th></tr></thead><tbody><tr><td align="left"><code>fileID</code></td><td align="left">云文件 ID</td><td align="left">String</td><td align="left">-</td><td align="left">Y</td></tr></tbody></table><p><strong>Promise 返回参数</strong></p><table><thead><tr><th align="left">字段</th><th align="left">说明</th><th align="left">数据类型</th></tr></thead><tbody><tr><td align="left"><code>fileContent</code></td><td align="left">文件内容</td><td align="left">Buffer</td></tr><tr><td align="left"><code>statusCode</code></td><td align="left">服务器返回的 HTTP 状态码</td><td align="left">Number</td></tr></tbody></table><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>cloud.init(&#123;<br>  env: cloud.DYNAMIC_CURRENT_ENV<br>&#125;)<br><br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> fileID = <span class="hljs-string">&#x27;xxxx&#x27;</span><br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> cloud.downloadFile(&#123;<br>    fileID: fileID,<br>  &#125;)<br>  <span class="hljs-keyword">const</span> buffer = res.fileContent<br>  <span class="hljs-keyword">return</span> buffer.toString(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="删除云储存文件"><a href="#删除云储存文件" class="headerlink" title="删除云储存文件"></a>删除云储存文件</h4><h5 id="Cloud-deleteFile"><a href="#Cloud-deleteFile" class="headerlink" title="Cloud.deleteFile"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/Cloud.html">Cloud</a>.deleteFile</h5><p>参数 <code>fileList</code>  ：云文件 ID 字符串数组</p><p>返回值</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>fileList</code></td><td align="left">Object</td><td align="left">文件列表</td></tr></tbody></table><p><code>**fileList</code> 的结构**</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>fileID</code></td><td align="left">string</td><td align="left">云文件 ID</td></tr><tr><td align="left">status</td><td align="left">number</td><td align="left">状态码，0 为成功</td></tr><tr><td align="left"><code>errMsg</code></td><td align="left">string</td><td align="left">成功为 ok，失败为失败原因</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Promise</span> 风格<br>wx.cloud.deleteFile(&#123;<br>  <span class="hljs-attr">fileList</span>: [<span class="hljs-string">&#x27;a7xzcb&#x27;</span>]<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// handle success</span><br>  <span class="hljs-built_in">console</span>.log(res.fileList)<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// handle error</span><br>&#125;)<br>Callback 风格<br><br>wx.cloud.deleteFile(&#123;<br>  <span class="hljs-attr">fileList</span>: [<span class="hljs-string">&#x27;a7xzcb&#x27;</span>],<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// handle success</span><br>    <span class="hljs-built_in">console</span>.log(res.fileList)<br>  &#125;,<br>  <span class="hljs-attr">fail</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// handle error</span><br>  &#125;,<br>  <span class="hljs-attr">complete</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;)<br>云函数端示例<br><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>cloud.init(&#123;<br>  <span class="hljs-attr">env</span>: cloud.DYNAMIC_CURRENT_ENV<br>&#125;)<br><br><span class="hljs-built_in">exports</span>.main = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> fileIDs = [<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-string">&#x27;xxx&#x27;</span>]<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> cloud.deleteFile(&#123;<br>    <span class="hljs-attr">fileList</span>: fileIDs,<br>  &#125;)<br>  <span class="hljs-keyword">return</span> result.fileList<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="云文件-ID-换取真实链接"><a href="#云文件-ID-换取真实链接" class="headerlink" title="云文件 ID 换取真实链接"></a>云文件 ID 换取真实链接</h4><h5 id="getTempFileURL"><a href="#getTempFileURL" class="headerlink" title="getTempFileURL"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/Cloud.getTempFileURL.html">getTempFileURL</a></h5><h4 id="建立用户与数据的关系"><a href="#建立用户与数据的关系" class="headerlink" title="建立用户与数据的关系"></a>建立用户与数据的关系</h4><p><code>openid</code>与云开发</p><p>在前面我们已经了解到，用户在小程序里有着独一无二的<code>openid</code>，用<code>openid</code>完全可以区分用户；使用云开发时用户在小程序端上传文件到云存储，这个<code>openid</code>会被记录在文件信息里；添加数据到数据库这个<code>openid</code>会被保存在<code>_openid</code>的字段里（也就是说我们除了可以用云函数如前面的login来获取用户的<code>openid</code>，还可以通过数据库的<code>_openid</code>字段来获取<code>openid</code>）；而且我们在小程序端查询数据时（查询时改、删、更新等的前提），都会默认有一个 where({<code>_openid</code>:当前用户的<code>openid</code>})的条件，限制了用户write写（改、删、更新）的权限。</p><p><strong>判断用户是否存在并创建记录</strong></p><p>打开云开发控制台的<strong>数据库</strong>标签，新建一个<code>clouddisk</code>的集合，并修改它的权限为为“<strong>所有人可读，仅创建者可读写</strong>”（或使用安全规则）。使用开发者工具新建一个folder的页面，然后在<code>folder</code>.js的页面生命周期函数<code>onLoad</code>里输入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">checkUser</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-comment">//获取clouddisk是否有当前用户的数据，注意这里默认带了一个where(&#123;_openid:&quot;当前用户的openid&quot;&#125;)的条件</span><br>   <span class="hljs-keyword">const</span> userData = <span class="hljs-keyword">await</span> db.collection(<span class="hljs-string">&#x27;clouddisk&#x27;</span>).get() <br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;当前用户的数据对象&quot;</span>,userData)<br><br>   <span class="hljs-comment">//如果当前用户的数据data数组的长度为0，说明数据库里没有当前用户的数据</span><br>   <span class="hljs-keyword">if</span>(userData.data.length === <span class="hljs-number">0</span>)&#123;      <br>     <span class="hljs-comment">//没有当前用户的数据，那就新建一个数据框架，其中_id和_openid会自动生成</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> db.collection(<span class="hljs-string">&#x27;clouddisk&#x27;</span>).add(&#123;<br>       <span class="hljs-attr">data</span>:&#123;<br>         <span class="hljs-comment">//nickName和avatarUrl可以通过getUserInfo来获取，这里不多介绍</span><br>         <span class="hljs-string">&quot;nickName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <br>         <span class="hljs-string">&quot;avatarUrl&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>         <span class="hljs-string">&quot;albums&quot;</span>: [ ],<br>         <span class="hljs-string">&quot;folders&quot;</span>: [ ]<br>       &#125;<br>     &#125;)<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>     <span class="hljs-built_in">this</span>.setData(&#123;<br>       userData<br>     &#125;)<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;用户数据&#x27;</span>,userData)<br>   &#125;<br> &#125;,<br></code></pre></td></tr></table></figure><h3 id="for循环写法"><a href="#for循环写法" class="headerlink" title="for循环写法"></a>for循环写法</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">let tempFiles = res.tempFiles<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">tempFile</span> of tempFiles)&#123;<br>         files.push(&#123;<br>           src: <span class="hljs-keyword">tempFile</span>.path,<br>           name: <span class="hljs-keyword">tempFile</span>.name<br>         &#125;)<br>       &#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套数组和对象的查询"><a href="#嵌套数组和对象的查询" class="headerlink" title="嵌套数组和对象的查询"></a>嵌套数组和对象的查询</h3><p>我们可以对对象、对象中的元素、数组、数组中的元素进行匹配查询，甚至还可以对数组和对象相互嵌套的字段进行匹配查询/更新</p><h4 id="匹配记录中的嵌套字段"><a href="#匹配记录中的嵌套字段" class="headerlink" title="匹配记录中的嵌套字段"></a><strong>匹配记录中的嵌套字段</strong></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 方式一</span><br>db<span class="hljs-selector-class">.collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>)<span class="hljs-selector-class">.where</span>(&#123;<br>  style: &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-string">&#x27;red&#x27;</span><br>  &#125;<br>&#125;)<span class="hljs-selector-class">.get</span>()<br> <br><span class="hljs-comment">// 方式二</span><br>db<span class="hljs-selector-class">.collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>)<span class="hljs-selector-class">.where</span>(&#123;<br>  <span class="hljs-string">&#x27;style.color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span><br>&#125;)<span class="hljs-selector-class">.get</span>()<br></code></pre></td></tr></table></figure><h3 id="小程序端下载并预览文件"><a href="#小程序端下载并预览文件" class="headerlink" title="小程序端下载并预览文件"></a>小程序端下载并预览文件</h3><p>技术文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html">wx.openDocument()</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/downloadFile/client.downloadFile.html">wx.cloud.downloadFile</a></p><p>预览文件需要临时路径，下载文件后会有临时路径</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Node</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elememt-ui</title>
    <link href="/2020/01/22/elementui/"/>
    <url>/2020/01/22/elementui/</url>
    
    <content type="html"><![CDATA[<p><strong>layout布局：</strong>el-row，el-col</p><p><strong>container布局</strong>：el-container,el-header,el-footer,el-main,el-aside</p><p><strong>icon:</strong>  el-icon-iconName</p><p><strong>按钮：</strong>el-button  type类型：primary、danger、warning、info、success   icon按钮需添加icon属性</p><p><strong>link:</strong> el-link   type类型：primary、danger、warning、info、success</p><p><strong>单选框：</strong> el-radio  需绑定model</p><p><strong>单选框组：</strong> el-radio-group</p><p><strong>多选框：</strong> el-checkbox</p><p><strong>多选框组：</strong> el-checkboc-group</p><p><strong>input输入框：</strong> el-input  <strong>属性：</strong> placeholder 添加默认显示内容 ，clearable 添加一个可清除按钮，show-password 可切换显示隐藏的密码框，prefix/suffix-icon 带有图标的输入框</p><p><strong>inputNumber:</strong> el-input-number  <strong>属性：</strong> min、max……</p><p><strong>select：</strong> el-select  选项放在el-option下  <strong>el-option属性：</strong> value 为select父组件上绑定的model值，label为选项显示的值</p><p><strong>cascader 级联选择器：</strong> el-cascader</p><p><strong>滑块：</strong>el-slider</p><p><strong>开关：</strong> el-switch</p><p><strong>timePicker：</strong> el-time-select/el-time-picker 时间选择</p><p><strong>datePicker：</strong> el-date-picker 日期选择</p><p><strong>dateTimePicker:</strong>  el-date-picker  type=”datetime”</p><p><strong>上传：</strong> el-upload</p><p><strong>Rate：</strong> el-rate</p><p><strong>颜色选择：</strong> el-color</p><p><strong>transfer：</strong> el-transfer  </p><p><strong>form：</strong> el-form</p><p><strong>table：</strong> el-table,el-column</p><p><strong>tag:</strong> el-tag</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Element</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序基本配置</title>
    <link href="/2020/01/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F20201001/"/>
    <url>/2020/01/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F20201001/</url>
    
    <content type="html"><![CDATA[<h2 id="app-json全局配置文件"><a href="#app-json全局配置文件" class="headerlink" title="app.json全局配置文件"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html">app.json全局配置文件</a></h2><p>小程序配置文件</p><p>可以配置 </p><ul><li>page：页面路径（增删改）</li><li>window: 窗口的颜色，字体等</li><li>tabBar:窗口导航栏</li></ul><h3 id="page属性详解"><a href="#page属性详解" class="headerlink" title="page属性详解"></a>page属性详解</h3><p>page属性对应的是值是一个数组，数组的每个元素代表的是一个页面（page）的路径</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;page&quot;</span>:[<br><span class="hljs-string">&quot;page/index/index&quot;</span>,<br><span class="hljs-string">&quot;page/log/log&quot;</span><br>]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="window属性的详解"><a href="#window属性的详解" class="headerlink" title="window属性的详解"></a>window属性的详解</h3><p>window属性对应的值也是一个对象，该对象的不同属性可以修改小程序不同的值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;window&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;backgroundTextStyle&quot;</span>: <span class="hljs-string">&quot;dark&quot;</span>,  <span class="hljs-regexp">//</span>背景颜色<br>   <span class="hljs-string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="hljs-string">&quot;#f2f2f2&quot;</span>,   <span class="hljs-regexp">//</span>导航栏背景颜色<br>   <span class="hljs-string">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;我正在学习小程序&quot;</span>,   <span class="hljs-regexp">//</span>导航栏标题<br>   <span class="hljs-string">&quot;navigationBarTextStyle&quot;</span>: <span class="hljs-string">&quot;black&quot;</span>     <span class="hljs-regexp">//</span>导航栏字体颜色<br> &#125;,<br></code></pre></td></tr></table></figure><p>常用</p><ul><li><p>enablePullDownRefresh   布尔值  是否下拉刷新</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#window">window的其他属性</a></p></li></ul><h3 id="tabBar导航栏"><a href="#tabBar导航栏" class="headerlink" title="tabBar导航栏"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabBar">tabBar导航栏</a></h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-string">&quot;tabBar&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;list&quot;</span>: [   <span class="hljs-comment">//最多五个导航栏</span><br>    &#123;<br>      <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/day8/day8&quot;</span>, <span class="hljs-comment">//页面路径</span><br>     <span class="hljs-string">&quot;iconPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment">//未选中显示的图标</span><br>     “selectedIconPath”:<span class="hljs-string">&quot;&quot;</span> 选中显示的图标<br>      <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;day8&quot;</span>   <span class="hljs-comment">//显示文字</span><br>    &#125;,&#123;<br>      <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/location/location&quot;</span>,<br>      <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;location&quot;</span><br>    &#125;<br>  ]，<br>  ”colo<span class="hljs-string">r&quot;:&quot;</span><span class="hljs-string">&quot;,  tab上的默认颜色，十六进制颜色表示</span><br><span class="hljs-string">  &quot;</span>selectedColo<span class="hljs-string">r&quot;:&quot;</span><span class="hljs-string">&quot;,   tab选中的颜色</span><br><span class="hljs-string">  &quot;</span>backgroundColo<span class="hljs-string">r&quot;:&quot;</span><span class="hljs-string">&quot;,  tab背景颜色</span><br><span class="hljs-string">  ”borderStyle&quot;</span>:<span class="hljs-string">&quot;&quot;</span> tab边框颜色<br>  <span class="hljs-string">&quot;custom&quot;</span>:布尔值，自定义的tabBar<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h3><p>建立小程序搜索索引</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
